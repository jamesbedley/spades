! function r(s, o, l) {
    function d(t, e) {
        if (!o[t]) {
            if (!s[t]) {
                var a = "function" == typeof require && require;
                if (!e && a) return a(t, !0);
                if (c) return c(t, !0);
                var i = new Error("Cannot find module '" + t + "'");
                throw i.code = "MODULE_NOT_FOUND", i
            }
            var n = o[t] = {
                exports: {}
            };
            s[t][0].call(n.exports, function(e) {
                return d(s[t][1][e] || e)
            }, n, n.exports, r, s, o, l)
        }
        return o[t].exports
    }
    for (var c = "function" == typeof require && require, e = 0; e < l.length; e++) d(l[e]);
    return d
}({
    1: [function(e, t, a) {
        "use strict";
        var r = e("./helper-functions").captainsLog,
            o = function(t, e, a, i, n) {
                "undefined" != typeof APP_MODE && APP_MODE && (t = "https://cardgames.io" + t), a = a || function() {
                    r.debug("Successfully posted to this url: " + t + " with this data : " + JSON.stringify(e))
                }, i = i || function(e) {
                    console.log("ERROR for urL " + t), r.error("ERROR: " + JSON.stringify(e))
                }, $.ajax({
                    type: "POST",
                    url: t,
                    headers: n || {},
                    data: JSON.stringify(e),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: a,
                    error: i
                })
            },
            s = function(e, t, a) {
                if ("undefined" != typeof APP_MODE && APP_MODE && (e = "https://cardgames.io" + e), !t) throw new TypeError("Success handler missing");
                return a = a || function(e) {
                    r.error(JSON.stringify(e))
                }, $.ajax({
                    type: "GET",
                    url: e,
                    success: t,
                    error: a
                })
            },
            i = {
                avatars: {
                    getStats: function(e, t) {
                        return s("/api/avatars/", e, t)
                    },
                    getLatest: function(e, t) {
                        return s("/api/avatars/latest", e, t)
                    },
                    saveFace: function(e, t, a) {
                        var i = {
                            code: e,
                            userAgent: navigator.userAgent
                        };
                        o("/api/avatars/", i, t, a)
                    }
                },
                adfree: {
                    getCode: function(e, t, a) {
                        return s("/api/adfree/" + e, t, a)
                    },
                    activateCode: function(e, t, a) {
                        return o("/api/adfree/" + e + "/activate", {
                            code: e
                        }, t, a)
                    }
                },
                gdpr: {
                    accept: function(e, t, a, i) {
                        return o("/api/gdpr/accept", {
                            allowPersonalizedAds: e,
                            userAgent: t
                        }, a, i)
                    }
                },
                country: {
                    get: function(e, t) {
                        return s("/lambda/country/", e, t)
                    }
                },
                errors: {
                    getLatest: function(e, t) {
                        return s("/api/errors/latest", e, t)
                    },
                    getByName: function(e, t, a) {
                        return s("/api/errors/" + e, t, a)
                    },
                    log: function(e, t, a, i, n, r) {
                        void 0 === r && (r = 0);
                        var s = {
                            name: e,
                            slug: t,
                            errorMessage: a,
                            url: location.href,
                            userAgent: navigator.userAgent,
                            maxMailCount: r
                        };
                        o("/api/errors", s, i, n)
                    }
                },
                events: {
                    post: function(e, t, a) {
                        o("/api/events/", e, t, a)
                    }
                },
                numberedGames: {
                    win: function(e, t, a, i, n) {
                        return a = a.replace(/ /g, "-"), o("/api/" + t + "/" + a + "/numberedgames/" + e + "/win", i, n)
                    },
                    postSaveResult: function(e, t, a, i, n, r) {
                        return i = i.replace(/ /g, "-"), o("/api/" + a + "/" + i + "/numberedgames/" + t + "/saveresult", e, n, r)
                    },
                    start: function(e, t, a, i, n) {
                        return a = a.replace(/ /g, "-"), o("/api/" + t + "/" + a + "/numberedgames/" + e + "/start", i, n)
                    },
                    getGame: function(e, t, a, i, n) {
                        return a = a.replace(/ /g, "-"), s("/api/" + t + "/" + a + "/numberedgames/" + e + "/?domain=" + encodeURIComponent(location.href), i, n)
                    },
                    getStats: function(e, t, a, i) {
                        return t = t.replace(/ /g, "-"), s("/api/" + e + "/" + t + "//numberedgames/stats", a, i)
                    }
                },
                visitors: {
                    post: function(e, t, a) {
                        return o("/api/visitors", e, t, a)
                    }
                },
                badWords: {
                    get: function(e, t) {
                        return s("/api/badwords", e, t)
                    }
                }
            };
        t.exports = i
    }, {
        "./helper-functions": 8
    }],
    2: [function(e, t, a) {
        "use strict";
        var i = function() {
            function e(e, t) {
                if (this.playable = !1, this.shortName = e + t, this.suit = e, this.rank = t, "bj" == e) return this.longName = "black joker", void(this.shortName = "BJ");
                if ("rj" == e) return this.longName = "red joker", void(this.shortName = "RJ");
                this.red = "h" == e || "d" == e, this.black = "s" == e || "c" == e;
                var a = {
                        h: "heart",
                        s: "spade",
                        d: "diamond",
                        c: "club"
                    },
                    i = {
                        11: "jack",
                        12: "queen",
                        13: "king",
                        1: "ace",
                        14: "ace"
                    };
                this.suitName = a[this.suit], i[t] ? (this.longName = i[t] + " of " + a[e] + "s", this[i[t]] = !0) : this.longName = t + " of " + a[e] + "s", this.shortName = this.suit.toUpperCase() + this.rank, this.isSpade = "s" === e, this.isHeart = "h" === e, this.isDiamond = "d" === e, this.isClub = "c" === e, this.isJack = 11 === t, this.isQueen = 12 === t, this.isKing = 13 === t, this.isAce = 1 === t || 14 === t
            }
            var t = e.prototype;
            return t.toString = function() {
                return this.shortName
            }, t.rankName = function() {
                return [null, null, "a two", "a three", "a four", "a five", "a six", "a seven", "an eight", "a nine", "a ten", "a jack", "a queen", "a king", "an ace"][this.rank]
            }, t.shortRankName = function() {
                return [null, null, "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "jack", "queen", "king", "ace"][this.rank]
            }, t.symbol = function() {
                return {
                    h: "♥︎",
                    s: "♠︎",
                    d: "♦︎",
                    c: "♣︎"
                } [this.suit] + ({
                    1: "A",
                    11: "J",
                    12: "Q",
                    13: "K",
                    14: "A"
                } [this.rank] || this.rank)
            }, e
        }();
        t.exports = i
    }, {}],
    3: [function(e, t, a) {
        "use strict";
        var i = e("../helper-functions"),
            p = i.ArrayUtils,
            n = i.captainsLog,
            r = i.dataBind,
            l = e("./card"),
            s = function() {
                function e(e) {
                    this.cardCount = 8, this.defaultPlayerCount = 2, this.canChangePlayerCount = !1, this.acesHigh = !0, this.mayAlwaysDraw = !1, this.canSortDesc = !0, this.players = [], this.deck = null, this.pile = null, this.allCards = null, this.currentPlayerIndex = 0, this.dealtCardCount = 0, this.nextPlayerToDealTo = 0, this.dealerIndex = -1, this.lastDealerIndex = -1, this.initDefaultRenderers(), this.customCardClass = e
                }
                var t = e.prototype;
                return t.makeRenderFunc = function(a) {
                    return function(e) {
                        var t = r(a, e);
                        n.debug("RENDEREVENT: " + t), setTimeout(e.callback, 0)
                    }
                }, t.initDefaultRenderers = function() {
                    this.renderers = {}, this.renderers.deckready = this.makeRenderFunc("deckready"), this.renderers.dealcard = this.makeRenderFunc("dealcard - @card - @player.name - hand: @player.hand"), this.renderers.selectcard = this.makeRenderFunc("selectcard - @card - @player.name"), this.renderers.unselectcard = this.makeRenderFunc("unselectcard - @card - @player.name"), this.renderers.start = this.makeRenderFunc("start"), this.renderers.playerturn = this.makeRenderFunc("playerturn - @player.name"), this.renderers.play = this.makeRenderFunc("play - @player.name played @cards - hand: @player.hand"), this.renderers.draw = this.makeRenderFunc("draw - @card - @player.name"), this.renderers.pass = this.makeRenderFunc("pass - @player.name"), this.renderers.win = this.makeRenderFunc("win - @player.name"), this.renderers.win = this.makeRenderFunc("startagain"), this.renderers.sorthand = this.makeRenderFunc("sorthand - @player.name - @player.hand"), this.renderers.illegalcard = this.makeRenderFunc("illegalcard - @player.name - @card"), this.renderers.pickdealer = this.makeRenderFunc("pickdealer - @player.name"), this.renderers.forcequit = this.makeRenderFunc("forcequit - @player.name forcequits the game - @reason")
                }, t.message = function() {}, t.renderEvent = function(e, t, a) {
                    (a = a || {}).player || (a.player = this.currentPlayer()), a.name = e;
                    var i = a.game = this;
                    if (a.callback = function() {
                            t.call(i)
                        }, !this.renderers[e]) throw "No renderer for event: " + e;
                    this.renderers[e](a)
                }, t.setEventRenderer = function(e, t) {
                    this.renderers[e] = t
                }, t.getPlayableCards = function(e) {
                    return e.hand.filter(function(e) {
                        return e.playable
                    })
                }, t.playCards = function(e, t) {
                    var a = t,
                        i = Array.isArray(a),
                        n = 0;
                    for (a = i ? a : a[Symbol.iterator]();;) {
                        var r;
                        if (i) {
                            if (n >= a.length) break;
                            r = a[n++]
                        } else {
                            if ((n = a.next()).done) break;
                            r = n.value
                        }
                        var s = r;
                        if (!this.canPlayCard(e, s)) throw "Illegal card from " + e.name + ", " + s;
                        if (this.pile.push(s), s.selected = !1, !this.removeCard(e, s)) throw "Card " + s + " is not held by player " + e.name;
                        s.playedBy = e
                    }
                    e.selectedCards = [], e.canPlay = !1, this.renderEvent("play", this.afterPlayCards, {
                        player: e,
                        cards: t
                    })
                }, t.removeCard = function(e, t) {
                    return p.remove(e.hand, t)
                }, t.afterPlayCards = function() {
                    this.nextPlayerTurn()
                }, t.useIllegalCard = function(e, t) {
                    this.renderEvent("illegalcard", function() {}, {
                        player: e,
                        card: t
                    })
                }, t.selectCard = function(e, t, a) {
                    if (!e.hand.includes(t)) throw "Player can't select a card he doesn't hold!";
                    if (t.selected) throw "Card is already selected!";
                    e.selectedCards === this.undefined && (e.selectedCards = []), t.selected = !0, e.selectedCards.push(t), this.renderEvent("selectcard", a || function() {}, {
                        card: t,
                        player: e
                    })
                }, t.unselectCard = function(e, t, a) {
                    if (!e.hand.includes(t)) throw "Player can't unselect a card he doesn't hold!";
                    if (!t.selected) throw "Card is not selected!";
                    t.selected = !1, p.remove(e.selectedCards, t), this.renderEvent("unselectcard", a || function() {}, {
                        card: t,
                        player: e
                    })
                }, t.unselectAllCards = function(e, t) {
                    var a = e.selectedCards.slice(),
                        i = a,
                        n = Array.isArray(i),
                        r = 0;
                    for (i = n ? i : i[Symbol.iterator]();;) {
                        var s;
                        if (n) {
                            if (r >= i.length) break;
                            s = i[r++]
                        } else {
                            if ((r = i.next()).done) break;
                            s = r.value
                        }
                        var o = s;
                        if (!e.hand.includes(o)) throw "Player can't unselect card " + o + ", it's not in his hand";
                        if (!o.selected) throw "Card " + o + " is not selected"
                    }
                    var l = a,
                        d = Array.isArray(l),
                        c = 0;
                    for (l = d ? l : l[Symbol.iterator]();;) {
                        var u;
                        if (d) {
                            if (c >= l.length) break;
                            u = l[c++]
                        } else {
                            if ((c = l.next()).done) break;
                            u = c.value
                        }
                        var h = u;
                        h.selected = !1, p.remove(e.selectedCards, h)
                    }
                    this.renderEvent("unselectcard", t || function() {}, {
                        player: e
                    })
                }, t.sortHand = function(e, t, a) {
                    if (e.hand) {
                        var i = {
                                h: 0,
                                s: 1,
                                d: 2,
                                c: 3
                            },
                            n = e.hand.toString(),
                            r = function(e, t) {
                                return e - t
                            },
                            s = function(e, t) {
                                return e.suit === t.suit ? r(e.rank, t.rank) : r(i[e.suit], i[t.suit])
                            };
                        "rank" === this.sortType && (s = function(e, t) {
                            return e.rank === t.rank ? r(i[e.suit], i[t.suit]) : r(e.rank, t.rank)
                        }), e.hand.sort(s), e.hand.toString() === n && this.canSortDesc && (r = function(e, t) {
                            return t - e
                        }, e.hand.sort(s)), a || this.renderEvent("sorthand", t || function() {}, {
                            player: e
                        })
                    }
                }, t.drawCard = function(e) {
                    e.hand.push(this.deck.pop()), e.handSorted = !1, e.canPlay = !1, this.renderEvent("draw", this.playerPlay, {
                        card: e.hand[e.hand.length - 1],
                        cardpos: e.hand.length - 1
                    })
                }, t.currentPlayerTurn = function() {
                    this.beforePlayerTurn(this.currentPlayer()), this.renderEvent("playerturn", this.playerPlay)
                }, t.playerDraw = function(e) {
                    e.draw()
                }, t.playerPlay = function() {
                    var e = this.currentPlayer(),
                        t = [],
                        a = e.hand,
                        i = Array.isArray(a),
                        n = 0;
                    for (a = i ? a : a[Symbol.iterator]();;) {
                        var r;
                        if (i) {
                            if (n >= a.length) break;
                            r = a[n++]
                        } else {
                            if ((n = a.next()).done) break;
                            r = n.value
                        }
                        var s = r;
                        s.playable = this.canPlayCard(e, s), s.playable && t.push(s)
                    }
                    if (e.canPlay = !0, e.hasPlayableCards = 0 < t.length, 0 === t.length)
                        if (this.mustSayPass(e)) this.renderEvent("pass", this.nextPlayerTurn);
                        else {
                            if (!this.mustDraw(e)) throw "Game must implement mustSayPass or mustDraw correctly";
                            this.playerDraw(e)
                        }
                    else this.currentPlayer().play(t)
                }, t.nextPlayerTurn = function() {
                    var e = this.currentPlayer();
                    this.hasWon(e) ? ("bottom-player" === e.id ? this.message("You win!") : this.message(e.name + " wins!"), this.renderEvent("win", function() {})) : (this.currentPlayerIndex = this.pickNextPlayerIndex(), this.isNewRoundStarting() && this.round++, this.currentPlayerTurn())
                }, t.abandon = function(e) {
                    this.forceQuit(e, "abandon")
                }, t.timeout = function(e) {
                    this.forceQuit(e, "timeout")
                }, t.localTimeout = function(e) {
                    this.forceQuit(e, "localtimeout")
                }, t.concede = function(e) {
                    this.forceQuit(e, "concede")
                }, t.forceQuit = function(e, t) {
                    var a, i, n, r = this.players,
                        s = r[0],
                        o = r[1];
                    e === s ? (a = o, i = s, "concede" === t ? n = "You concede, " + o.name + " wins the game!" : "timeout" === t ? n = "You timed out, " + o.name + " wins the game!" : "abandon" === t && (n = "You disconnected, " + o.name + " wins the game!")) : ("concede" === t ? n = o.name + " concedes the game, you win!" : "timeout" === t || "localtimeout" === t ? n = o.name + " timed out, you win the game!" : "abandon" === t && (n = o.name + " disconnected, you win the game!"), a = s, i = o), this.message(n), this.renderEvent("forcequit", function() {
                        this.renderEvent("win", function() {}, {
                            player: a,
                            loser: i,
                            winType: t
                        }), this.renderEvent = function() {}
                    }, {
                        player: e,
                        reason: t
                    })
                }, t.addPlayer = function(e) {
                    e.game = this, e.pos = this.players.length, this.players.push(e)
                }, t.getNextPlayer = function(e) {
                    var t = this.players.indexOf(e);
                    return this.players[this.nextIndex(t)]
                }, t.start = function() {
                    this.pile = [], this.round = 0, this.newDeck()
                }, t.startAgain = function() {
                    var e = this.players,
                        t = Array.isArray(e),
                        a = 0;
                    for (e = t ? e : e[Symbol.iterator]();;) {
                        var i;
                        if (t) {
                            if (a >= e.length) break;
                            i = e[a++]
                        } else {
                            if ((a = e.next()).done) break;
                            i = a.value
                        }
                        var n = i;
                        n.hand && (n.hand = []), n.tricks && (n.tricks = []), n.showCards && "bottom-player" !== n.id && delete n.showCards, n.selectedCards && (n.selectedCards = []), n.points && (n.points = 0), n.results && (n.results = []), n.stats = {}
                    }
                    this.dealtCardCount = 0, this.nextPlayerToDealTo = 0, this.handSorted = !1;
                    var r = this.players.map(function(e) {
                        return e.id
                    });
                    this.pickDealer(r), this.beforeNewRound && this.beforeNewRound(), this.renderEvent("startagain", this.start)
                }, t.pickDealer = function(e) {
                    0 <= this.lastDealerIndex ? this.dealerIndex = (this.lastDealerIndex + 1) % e.length : this.dealerIndex = Math.floor(Math.random() * e.length), this.nextPlayerToDealTo = (this.dealerIndex + 1) % e.length, this.renderEvent("pickdealer", function() {}, {
                        dealerId: e[this.dealerIndex]
                    })
                }, t.afterDealing = function() {
                    this.currentPlayerIndex = this.pickFirstPlayerIndex(), this.renderEvent("start", this.currentPlayerTurn)
                }, t.currentPlayer = function() {
                    return this.players[this.currentPlayerIndex]
                }, t.newDeck = function(e) {
                    void 0 === e && (e = -1), this.deck = [], this.allCards = [];
                    var t = this.acesHigh ? 2 : 1;
                    this.customCardClass && (l = this.customCardClass);
                    for (var a = 12 + t, i = t; i <= a; i++) this.deck.push(new l("h", i)), this.deck.push(new l("s", i)), this.deck.push(new l("d", i)), this.deck.push(new l("c", i));
                    if (this.allCards = this.deck.slice(), this.deckCode) {
                        for (var n = [], r = 0; r < this.deck.length; r++) {
                            var s = this.deck[r],
                                o = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(r);
                            n[this.deckCode.indexOf(o)] = s
                        }
                        this.deck = n
                    } else this.shuffle(this.deck, e);
                    this.processNewDeck && this.processNewDeck(), this.renderEvent("deckready", function() {})
                }, t.shuffle = function(e, t) {
                    void 0 === t && (t = -1), p.shuffle(e, t)
                }, t.deal = function() {
                    var i = this;
                    if (this.dealtCardCount === this.cardCount * this.players.length) this.afterDealing();
                    else {
                        var e, t = this.players[this.nextPlayerToDealTo];
                        if (this.fixedCards) {
                            this._fixed = {};
                            var a = function(t) {
                                var a = i.fixedCards[t];
                                i._fixed[t] = i.deck.filter(function(e) {
                                    return a.includes(e.shortName)
                                }), i.deck = i.deck.filter(function(e) {
                                    return !i._fixed[t].includes(e)
                                })
                            };
                            for (var n in this.fixedCards) a(n);
                            delete this.fixedCards
                        }
                        e = this._fixed && this._fixed[t.id] && 0 < this._fixed[t.id].length ? this._fixed[t.id].pop() : this.deck.pop(), t.hand.push(e), this.nextPlayerToDealTo = this.nextIndex(this.nextPlayerToDealTo), this.dealtCardCount++, this.renderEvent("dealcard", this.deal, {
                            player: t,
                            cardpos: t.hand.length - 1,
                            card: e
                        })
                    }
                }, t.pickFirstPlayerIndex = function() {
                    return this.nextIndex(this.dealerIndex)
                }, t.hasWon = function() {
                    return !1
                }, t.beforePlayerTurn = function() {}, t.canPlayCard = function() {
                    return !0
                }, t.canSelectCard = function() {
                    return !0
                }, t.mustSayPass = function() {
                    return !1
                }, t.mustDraw = function() {
                    return !1
                }, t.nextIndex = function(e) {
                    return (e + 1) % this.players.length
                }, t.pickNextPlayerIndex = function() {
                    return this.nextIndex(this.currentPlayerIndex)
                }, t.isNewRoundStarting = function() {
                    return 0 === this.currentPlayerIndex
                }, e
            }();
        t.exports = s
    }, {
        "../helper-functions": 8,
        "./card": 2
    }],
    4: [function(e, t, a) {
        "use strict";
        var h = e("./card"),
            k = e("../util"),
            i = e("../helper-functions"),
            g = i.captainsLog,
            d = i._setTimeout,
            f = i.ArrayUtils,
            n = e("../game"),
            r = n.HTML_CARD_SUITS,
            s = n.makeAllPlayersHappy,
            o = n.SPEED,
            l = e("../gamecontrol"),
            c = new(e("../temp-storage"))(window.slug),
            u = {
                TABLE_SIZE: {
                    width: 700,
                    height: 600
                },
                CARD_SIZE: {
                    width: 69,
                    height: 94
                },
                TRICK_SIZE: {
                    width: 33,
                    height: 45
                },
                CONDENSE_COUNT: 6,
                DECK_POS: null,
                PILE_POS: null,
                TRICK_POS: null,
                CARD_PADDING: 18,
                HORIZONTAL_MARGIN: 60,
                VERTICAL_MARGIN: 80,
                OVERLAY_MARGIN: 1,
                LEFT: "left",
                RIGHT: "right",
                TOP: "top",
                BOTTOM: "bottom",
                TOP_PLAYER_CARD_SIZE: null,
                BOTTOM_PLAYER_CARD_SIZE: null,
                LEFT_PLAYER_CARD_SIZE: null,
                RIGHT_PLAYER_CARD_SIZE: null,
                SIDE_PLAYER_VERTICAL_LINE: 270,
                BOTTOM_PLAYER_TOP: null,
                TOP_PLAYER_TOP: null,
                LEFT_PLAYER_TOP: null,
                RIGHT_PLAYER_TOP: null,
                BOTTOM_PLAYER_LEFT: null,
                TOP_PLAYER_LEFT: null,
                LEFT_PLAYER_LEFT: null,
                RIGHT_PLAYER_LEFT: null
            },
            P = u,
            y = {
                ANIMATION_SPEED: 500,
                TAKE_TRICK_DELAY: 750
            },
            b = {
                value: 1,
                next: function() {
                    return this.value++, this.value
                }
            };

        function p(e) {
            for (var t = 0, a = ["", "-webkit-", "-ms-"]; t < a.length; t++) {
                var i = a[t];
                if (void 0 !== document.body.style[i + e]) return i
            }
            return null
        }
        P.DECK_AND_PILE_SIZE = {
            width: P.CARD_SIZE.width,
            height: P.CARD_SIZE.height
        }, P.MAX_CARD_SIZE = {
            width: P.CARD_SIZE.width,
            height: P.CARD_SIZE.height
        }, P.MAX_TRICK_SIZE = {
            width: P.TRICK_SIZE.width,
            height: P.TRICK_SIZE.height
        }, P.MAX_SIZE_CARD_PADDING = P.CARD_PADDING, P.CARD_PADDING_PERCENTAGE = P.MAX_SIZE_CARD_PADDING / P.MAX_CARD_SIZE.width, jQuery.fn.moveCard = function(e, t, a, i) {
            return this.moveAndSizeCard(e, t, P.CARD_SIZE.width, P.CARD_SIZE.height, a, i)
        }, jQuery.fn.moveAndSizeCard = function(e, t, a, i, n, r) {
            return this.animate({
                top: e,
                left: t,
                width: a,
                height: i,
                queue: !1
            }, r || y.ANIMATION_SPEED, n)
        }, jQuery.fn.setBackground = function(e, t) {
            return this.css({
                "background-position": e + " " + t
            })
        }, h.prototype.move = function(e, t, a, i) {
            return $(this.guiCard).moveCard(e, t, a, i), this
        }, h.prototype.z = function() {
            return parseInt($(this.guiCard).css("z-index"))
        }, h.prototype.symbol = function() {
            var e = {
                1: "A",
                11: "J",
                12: "Q",
                13: "K",
                14: "A"
            } [this.rank] || this.rank;
            return r[this.suit] + e
        };
        var m = p("transform"),
            v = p("transition"),
            w = k.parseUserAgent(),
            C = "Safari" === w.browser && 10 === w.version;
        h.prototype.rotate = function(e, t) {
            if (null !== m) return "number" == typeof t && null !== v ? $(this.guiCard).css(v + "transition-property", m + "transform").css(v + "transition-duration", o.ms(t) + "ms") : null !== v && $(this.guiCard).css(v + "transition-property", "").css(v + "transition-duration", ""), 0 === e ? $(this.guiCard).css(m + "transform", "") : C ? $(this.guiCard).css(m + "transform", "rotate3d(0,0,1," + e + "deg)") : $(this.guiCard).css(m + "transform", "rotate(" + e + "deg)"), this
        }, h.prototype.left = function() {
            return parseFloat($(this.guiCard).css("left"))
        }, h.prototype.top = function() {
            return parseFloat($(this.guiCard).css("top"))
        }, h.prototype.width = function() {
            return parseFloat($(this.guiCard).css("width"))
        }, h.prototype.height = function() {
            return parseFloat($(this.guiCard).css("height"))
        }, h.prototype.normalizeRotationOnMove = !0, h.prototype.showCard = function(e) {
            this.normalizeRotationOnMove && this.rotate(0);
            var t = this.suit.toLowerCase() + this.rank;
            return $(this.guiCard).addClass(t).addClass("up").removeClass([P.LEFT, P.RIGHT, P.TOP, P.BOTTOM].join(" ")).addClass(e || P.BOTTOM), this
        }, h.prototype.moveToFront = function() {
            return this.guiCard.style.zIndex = b.next(), this
        }, h.prototype.moveToBack = function() {
            return this.guiCard.style.zIndex = 0, this
        }, h.prototype.hideCard = function(e) {
            this.normalizeRotationOnMove && this.rotate(0);
            var t = this.suit.toLowerCase() + this.rank;
            return $(this.guiCard).removeClass("up").removeClass(t).removeClass([P.LEFT, P.RIGHT, P.TOP, P.BOTTOM].join(" ")).addClass(e || P.BOTTOM), this
        };
        var S = function() {
            function e() {
                this.playType = "pile", this.resizeEventCount = 0
            }
            var t = e.prototype;
            return t.setBoardHeight = function(e) {
                var t;
                if (APP_MODE) P.TABLE_SIZE.height = $("#play-page").height();
                else {
                    if (k.isMobileLookActive()) {
                        var a = e || 411;
                        (t = window.innerHeight - 47) < a ? t = a : 689 < t && (t = 689)
                    } else {
                        t = 600
                    }
                    $("#board, #play-page").height(t), P.TABLE_SIZE.height = t
                }
            }, t.calculateBasicPositions = function(e) {
                if (P.TABLE_SIZE.width = $("#play-page").width(), k.isMobileLookActive()) {
                    g.debug("CalculateBasicPositions: mobile look active"), this.setBoardHeight(), P.CONDENSE_COUNT = 8, P.OVERLAY_MARGIN = 1;
                    var t = 24;
                    375 <= P.TABLE_SIZE.width && (t = 32), $("#deal").on("click touchstart", function(e) {
                        e.preventDefault(), $("#messageBox").fadeIn()
                    }), P.TABLE_SIZE.height < 450 ? (P.CARD_SIZE.width = 52, P.CARD_SIZE.height = this.getCardHeight(P.CARD_SIZE.width)) : (P.CARD_SIZE.width = P.MAX_CARD_SIZE.width, P.CARD_SIZE.height = P.MAX_CARD_SIZE.height), 375 <= P.TABLE_SIZE.width && (t = 39), P.DECK_AND_PILE_SIZE.width = P.CARD_SIZE.width, P.DECK_AND_PILE_SIZE.height = P.CARD_SIZE.height;
                    var a = this.getCardHeight(t),
                        i = $(".avatar").height(),
                        n = $(".avatar").width();
                    P.LEFT_PLAYER_LEFT = n + 5;
                    var r = Math.floor(.35 * P.TABLE_SIZE.height + 22.5);
                    P.SIDE_PLAYER_VERTICAL_LINE = r;
                    var s = Math.floor(P.SIDE_PLAYER_VERTICAL_LINE - P.CARD_SIZE.height / 2);
                    if ("pile" === this.playType) {
                        var o = P.TABLE_SIZE.width / 2,
                            l = 375 <= P.TABLE_SIZE.width ? 5 : 1;
                        P.PILE_POS = {
                            left: Math.round(o + l) + 1,
                            top: s
                        }, P.DECK_POS = {
                            left: Math.round(o - l - P.DECK_AND_PILE_SIZE.width) + 1,
                            top: s
                        }, $("#pile-marker").css({
                            width: P.DECK_AND_PILE_SIZE.width,
                            height: P.DECK_AND_PILE_SIZE.height,
                            "class": "show-restart",
                            left: P.PILE_POS.left,
                            top: P.PILE_POS.top
                        })
                    } else P.DECK_POS = {
                        left: Math.floor((P.TABLE_SIZE.width - P.CARD_SIZE.width) / 2),
                        top: s
                    }, P.PILE_POS = {
                        left: P.DECK_POS.left,
                        top: P.DECK_POS.top
                    };
                    P.LEFT_PLAYER_TOP = P.RIGHT_PLAYER_TOP = r, P.RIGHT_PLAYER_LEFT = P.TABLE_SIZE.width - P.LEFT_PLAYER_LEFT - a, P.BOTTOM_PLAYER_LEFT = P.TOP_PLAYER_LEFT = Math.floor(P.TABLE_SIZE.width / 2), P.BOTTOM_PLAYER_TOP = P.TABLE_SIZE.height - i - P.CARD_SIZE.height - 5, P.TOP_PLAYER_TOP = i + 3, $("#messageBox").css("top", Math.floor(P.BOTTOM_PLAYER_TOP - $("#messageBox").height() - 4));
                    var d = Math.ceil(P.CARD_PADDING / P.CARD_SIZE.width * t);
                    P.LEFT_PLAYER_CARD_SIZE = P.RIGHT_PLAYER_CARD_SIZE = P.TOP_PLAYER_CARD_SIZE = {
                        width: t,
                        height: a,
                        padding: d,
                        offset: 1
                    };
                    var c = {
                        width: 27,
                        height: 37
                    };
                    P.TRICK_SIZE = c.height < a ? c : {
                        width: t,
                        height: a
                    }, $("#top-player-trick-count, #bottom-player-trick-count").css({
                        height: P.TRICK_SIZE.height,
                        lineHeight: P.TRICK_SIZE.height + "px"
                    }), $("#left-player-trick-count, #right-player-trick-count").css({
                        width: P.TRICK_SIZE.height
                    })
                } else {
                    g.debug("CalculateBasicPositions: desktop look active"), P.CONDENSE_COUNT = 6, P.OVERLAY_MARGIN = 1, this.setBoardHeight(), P.CARD_SIZE.width = P.MAX_CARD_SIZE.width, P.CARD_SIZE.height = P.MAX_CARD_SIZE.height, P.DECK_AND_PILE_SIZE.width = P.CARD_SIZE.width, P.DECK_AND_PILE_SIZE.height = P.CARD_SIZE.height;
                    var u = {
                        width: P.MAX_CARD_SIZE.width,
                        height: P.MAX_CARD_SIZE.height,
                        padding: P.CARD_PADDING
                    };
                    P.LEFT_PLAYER_CARD_SIZE = P.RIGHT_PLAYER_CARD_SIZE = P.TOP_PLAYER_CARD_SIZE = P.BOTTOM_PLAYER_CARD_SIZE = u, P.TRICK_SIZE = P.MAX_TRICK_SIZE, P.SIDE_PLAYER_VERTICAL_LINE = 270, P.BOTTOM_PLAYER_TOP = P.TABLE_SIZE.height - P.CARD_SIZE.height - P.VERTICAL_MARGIN, P.TOP_PLAYER_TOP = P.VERTICAL_MARGIN, P.LEFT_PLAYER_TOP = P.TABLE_SIZE.height / 2, P.RIGHT_PLAYER_TOP = P.TABLE_SIZE.height / 2, P.BOTTOM_PLAYER_LEFT = P.TABLE_SIZE.width / 2, P.TOP_PLAYER_LEFT = P.TABLE_SIZE.width / 2, P.LEFT_PLAYER_LEFT = P.HORIZONTAL_MARGIN, P.RIGHT_PLAYER_LEFT = P.TABLE_SIZE.width - P.CARD_SIZE.height - P.HORIZONTAL_MARGIN, P.DECK_POS = {
                        left: P.TABLE_SIZE.width / 2 - 1.3 * P.CARD_SIZE.width,
                        top: P.TABLE_SIZE.height / 2 - P.CARD_SIZE.height / 2
                    }, P.PILE_POS = {
                        left: P.DECK_POS.left + 1.3 * P.CARD_SIZE.width,
                        top: P.DECK_POS.top
                    }
                }
                var h = Math.round((P.TABLE_SIZE.width - P.CARD_SIZE.width) / 2),
                    p = Math.floor(P.SIDE_PLAYER_VERTICAL_LINE - P.CARD_SIZE.height / 2) + 10,
                    m = 40,
                    f = 35;
                P.CARD_SIZE.width < P.MAX_CARD_SIZE.width && (m = 30, f = 26), P.TRICK_POS = {
                    top: {
                        top: p - f,
                        left: h
                    },
                    bottom: {
                        top: p + f,
                        left: h
                    },
                    left: {
                        top: p,
                        left: h - m
                    },
                    right: {
                        top: p,
                        left: h + m
                    }
                }, this.calculateBasicPositionsCustom && this.calculateBasicPositionsCustom(e)
            }, t.setCardSize = function(e) {
                P.CARD_SIZE.width = e, P.CARD_SIZE.height = this.getCardHeight(e)
            }, t.getCardHeight = function(e) {
                var t = P.MAX_CARD_SIZE.height / P.MAX_CARD_SIZE.width;
                return Math.ceil(t * e)
            }, t.showCards = function(n, r, e) {
                d(function() {
                    var e = n,
                        t = Array.isArray(e),
                        a = 0;
                    for (e = t ? e : e[Symbol.iterator]();;) {
                        var i;
                        if (t) {
                            if (a >= e.length) break;
                            i = e[a++]
                        } else {
                            if ((a = e.next()).done) break;
                            i = a.value
                        }
                        i.showCard(r)
                    }
                }, e || y.ANIMATION_SPEED / 2)
            }, t.hideCards = function(n, r, e) {
                d(function() {
                    var e = n,
                        t = Array.isArray(e),
                        a = 0;
                    for (e = t ? e : e[Symbol.iterator]();;) {
                        var i;
                        if (t) {
                            if (a >= e.length) break;
                            i = e[a++]
                        } else {
                            if ((a = e.next()).done) break;
                            i = a.value
                        }
                        i.hideCard(r)
                    }
                }, e || y.ANIMATION_SPEED / 2)
            }, t.resize = function(e, t) {
                var a = this;
                if (t) {
                    this.resizeEventCount = 0, this.calculateBasicPositions(e.game);
                    var i = e.game,
                        n = i.players;
                    if (0 < n.length && (p(n[0], P.BOTTOM_PLAYER_CARD_SIZE, P.BOTTOM_PLAYER_TOP, P.BOTTOM_PLAYER_LEFT), this.resizeTricks(n[0]), this.adjustHand(n[0], null, 50)), 2 === n.length ? (p(n[1], P.TOP_PLAYER_CARD_SIZE, P.TOP_PLAYER_TOP, P.TOP_PLAYER_LEFT), this.resizeTricks(n[1]), this.adjustHand(n[1], null, 50)) : 3 <= n.length && (p(n[1], P.LEFT_PLAYER_CARD_SIZE, P.LEFT_PLAYER_TOP, P.LEFT_PLAYER_LEFT), p(n[2], P.TOP_PLAYER_CARD_SIZE, P.TOP_PLAYER_TOP, P.TOP_PLAYER_LEFT), this.resizeTricks(n[1]), this.resizeTricks(n[2]), this.adjustHand(n[1], null, 50), this.adjustHand(n[2], null, 50)), 4 === n.length && (p(n[3], P.RIGHT_PLAYER_CARD_SIZE, P.RIGHT_PLAYER_TOP, P.RIGHT_PLAYER_LEFT), this.resizeTricks(n[3]), this.adjustHand(n[3], null, 50)), 0 === i.players.length && (p(e.bottomPlayer, P.BOTTOM_PLAYER_CARD_SIZE, P.BOTTOM_PLAYER_TOP, P.BOTTOM_PLAYER_LEFT), p(e.leftPlayer, P.LEFT_PLAYER_CARD_SIZE, P.LEFT_PLAYER_TOP, P.LEFT_PLAYER_LEFT), p(e.topPlayer, P.TOP_PLAYER_CARD_SIZE, P.TOP_PLAYER_TOP, P.TOP_PLAYER_LEFT), p(e.rightPlayer, P.RIGHT_PLAYER_CARD_SIZE, P.RIGHT_PLAYER_TOP, P.RIGHT_PLAYER_LEFT)), this.resizeCustom && this.resizeCustom(e), this.resizeDeckAndPile(i), "trick" === this.playType && i.pile && 0 < i.pile.length) {
                        var r = i.pile,
                            s = Array.isArray(r),
                            o = 0;
                        for (r = s ? r : r[Symbol.iterator]();;) {
                            var l;
                            if (s) {
                                if (o >= r.length) break;
                                l = r[o++]
                            } else {
                                if ((o = r.next()).done) break;
                                l = o.value
                            }
                            var d = l,
                                c = d.playedBy.position,
                                u = P.TRICK_POS[c];
                            $(d.guiCard).css(u)
                        }
                    }
                    k.isMobileLookActive() || $("#messageBox").css("top", 365)
                } else {
                    this.resizeEventCount++;
                    var h = this.resizeEventCount;
                    setTimeout(function() {
                        h === a.resizeEventCount && a.resize(e, !0)
                    }, 200)
                }

                function p(e, t, a, i) {
                    e.cardSize = t, e.top = a, e.left = i
                }
            }, t.resizeDeckAndPile = function(e) {
                function t(e, t, a, i) {
                    for (var n = 0; n < e.length; n++) {
                        var r = e[n];
                        (n + 1) % P.CONDENSE_COUNT == 0 && (a -= P.OVERLAY_MARGIN, t -= P.OVERLAY_MARGIN), $(r.guiCard).css({
                            top: t,
                            left: a,
                            width: i.width,
                            height: i.height
                        })
                    }
                }
                e.deck && 0 < e.deck.length && t(e.deck, P.DECK_POS.top, P.DECK_POS.left, P.DECK_AND_PILE_SIZE), e.pile && 0 < e.pile.length && "pile" === this.playType && t(e.pile, P.PILE_POS.top, P.PILE_POS.left, P.DECK_AND_PILE_SIZE)
            }, t.resizeTricks = function(e) {
                if (e.tricks)
                    for (var t = 0; t < e.tricks.length; t++) {
                        var a = e.tricks[t].element,
                            i = this.getTrickProps(e, t);
                        $(a).css(i);
                        var n = this.getTrickCountProps(e, i);
                        $("#" + e.id + "-trick-count").css(n)
                    }
            }, t.deckReady = function(e) {
                this._createCardPile(e.game.deck, P.DECK_POS.top, P.DECK_POS.left, !1), e.callback(), c.get("autodeal", !1) && (c.remove("autodeal"), $("#deal").click())
            }, t.clearTable = function(e) {
                $(".card, .trick").remove(), $(".trick-count").text(""), this.hideResults(), $(".hide-restart").hide(), $(".show-restart").show(), $(".remove-restart").remove(), s(), s(), $("#current-score span").text("0"), $("#deal").show(), $("#messageBox").hide(), b.value = 1, k.removeConfetti(), delete this.wrongCardMessages, k.cake("results") || c.get("scores") ? e.game.message("Click Deal to start the next round.") : e.game.message("Click Deal to start a new game."), l.resetGameStatus(), this.clearTableCustom && this.clearTableCustom(e), e.callback()
            }, t.illegalCard = function(e) {
                if (this.wrongCardMessages || (this.wrongCardMessages = ["That's not even your card!", "No, really, you can't play the opponents cards!", "Are you sure you understand the rules of this game?", "THESE ARE NOT THE CARDS YOU'RE LOOKING FOR!", "OK, now you're just messing with me!", "STOP TOUCHING MY CARDS!", "STOP IT!", "Play your own cards, not mine!", "Ok, have you had your fun now? Can we keep on playing the game?", "Just play!", "If you touch my cards one more time there will be CONSEQUENCES!!!", "At some point this is just gonna stop being funny...", "I'm giving you the silent treatment from now on!"], this.wrongCardMessages.index = 0), e.card.playedBy !== e.player) {
                    var t = this.wrongCardMessages[this.wrongCardMessages.index++];
                    t && e.game.message(t)
                }
            }, t._createCardPile = function(e, t, a, i) {
                $(".card").remove();
                for (var n = 0; n < e.length; n++) {
                    var r = e[n];
                    (n + 1) % P.CONDENSE_COUNT == 0 && (a -= P.OVERLAY_MARGIN, t -= P.OVERLAY_MARGIN), this._createGuiCard(r, {
                        left: a,
                        top: t
                    }), i ? r.showCard() : r.hideCard()
                }
                var s = Math.ceil(window.devicePixelRatio || 1);
                s = Math.min(3, s), 1.5 == window.devicePixelRatio && (s = 3), k.qs.cards && (s = k.qs.cards);
                var o = "/spades/shared/images/cards/normalcards-2x.css";
                $("#csscards").attr("href") !== o && ($("#csscards").remove(), $("<link>", {
                    rel: "stylesheet",
                    id: "csscards",
                    href: "/spades/shared/images/cards/normalcards-2x.css"
                }).appendTo("head"))
            }, t._createGuiCard = function(e, t) {
                var a = $("#play-page"),
                    i = $("<div>").addClass("card").css(t);
                P.MAX_CARD_SIZE.width != P.DECK_AND_PILE_SIZE.width && i.css({
                    width: P.DECK_AND_PILE_SIZE.width,
                    height: P.DECK_AND_PILE_SIZE.height
                });
                var n = $("<div>").addClass("facedown"),
                    r = $("<div>").addClass("faceup");
                $(i).append(n), $(i).append(r);
                var s = i[0];
                a.append(s), ((e.guiCard = s).card = e).moveToFront(), e.hideCard()
            }, t.getCardPos = function(e, t, a) {
                a = a || e.hand.length;
                var i = P.CARD_SIZE.height,
                    n = P.CARD_SIZE.width,
                    r = P.CARD_PADDING,
                    s = 15;
                e.cardSize && (i = e.cardSize.height, n = e.cardSize.width, r = e.cardSize.padding, s = e.cardSize.padding);
                var o = (a - 1) * r + n,
                    l = {},
                    d = 0;
                e.hand[t] && e.hand[t].selected && (d = s);
                var c = P.TABLE_SIZE.width - 6,
                    u = k.isMobileLookActive() ? c : 360,
                    h = 0;
                if (e.position === P.BOTTOM && (k.siteSettings.spreadCards || k.isMobileLookActive())) {
                    var p = a - 1;
                    o = u, r = Math.floor((o - P.CARD_SIZE.width) / p), h = o - (P.CARD_SIZE.width + p * r), r > P.CARD_SIZE.width / 2 && (r = Math.ceil(P.CARD_SIZE.width / 2), o = P.CARD_SIZE.width + p * r, h = 0)
                } else if (e.position !== P.BOTTOM) {
                    var m = n + 12 * r;
                    if (m < o) h = (o = m) - (n + (a - 1) * (r = Math.floor((m - n) / (a - 1))))
                }
                var f = (i - n) / 2;
                if (e.position === P.TOP) {
                    var g = e.left + o / 2 - n;
                    t <= h ? r++ : g -= h, l.left = g - t * r, l.top = e.top + d
                } else if (e.position === P.BOTTOM) {
                    var y = e.left - o / 2;
                    (o - n) / (a - 1) < Math.round(P.MAX_SIZE_CARD_PADDING / P.MAX_CARD_SIZE.width * n) ? this.adjustCrushedCards(e, l, n, o, y, a, t) : (t <= h ? r++ : y += h, l.left = y + t * r), l.top = e.top - d
                } else if (e.position === P.LEFT) {
                    var b = e.top - o / 2 - f;
                    t <= h ? r++ : b += h, l.top = b + t * r, l.left = e.left + d + f
                } else if (e.position === P.RIGHT) {
                    var v = e.top + o / 2 - n - f;
                    t <= h ? r++ : v -= h, l.top = v - t * r, l.left = e.left - d + f
                }
                return l
            }, t.adjustCrushedCards = function(e, t, a, i, n, r, s) {
                var o = r - 1;
                void 0 !== e.zoomedPos && 0 <= e.zoomedPos && e.zoomedPos < r && (o = e.zoomedPos);
                for (var l = Math.round(P.MAX_SIZE_CARD_PADDING / P.MAX_CARD_SIZE.width * a), d = Math.round(P.MAX_SIZE_CARD_PADDING / P.MAX_CARD_SIZE.width * a * 1.5), c = Math.ceil(l / 2), u = 7, h = 320; h + d < P.TABLE_SIZE.width;) u++, h += d;

                function p(e) {
                    return e <= 2 ? e * c : 2 * (e - 2) + 2 * c
                }
                var m = Math.floor(o - u / 2);
                m < 2 && (m = 0), r - 2 <= m + u && (m = r - u - 1);
                var f, g = m + u,
                    y = m,
                    b = p(y),
                    v = r - g,
                    k = i - b - (p(v - 1) + a),
                    w = k - (0 == v ? (u - 1) * (f = Math.floor((k - a) / (u - 1))) + a : u * (f = Math.floor(k / u)));
                if (s < m) {
                    t.left = n + 2 * s;
                    var C = y - 2,
                        S = 2 * C;
                    if (y - 2 < s) {
                        var T = s - C;
                        t.left = n + S + T * c
                    }
                    t.crushed = !0
                } else if (m <= s && s < g) {
                    var $ = s - y,
                        E = n + b;
                    t.left = $ < w ? E + $ * (f + 1) : E + $ * f + w, t.crushed = !1
                } else {
                    var A = s - y - u,
                        I = n + b + k;
                    t.left = A < 2 ? I + A * c : I + 2 * c + 2 * (A - 2), t.crushed = !0, t.crushed = 0 != A
                }
            }, t.dealCard = function(e) {
                this.adjustHand(e.player, e.callback, y.ANIMATION_SPEED / 2, !1, e.game.cardCount)
            }, t.selectCard = function(e) {
                this.adjustHand(e.player, e.callback, y.ANIMATION_SPEED / 3)
            }, t.unselectCard = function(e) {
                this.adjustHand(e.player, e.callback, y.ANIMATION_SPEED / 3)
            }, t.pickDealer = function(e) {
                $(".avatar").removeClass("dealer"), e.game.showDealerHat && $("#" + e.dealerId).addClass("dealer"), e.callback()
            }, t.pass = function(e) {
                var t = $("#pass");
                t.css({
                    "font-size": "16px",
                    top: e.player.top,
                    "z-index": b.value + 1e3
                }), e.player.position === P.BOTTOM && t.css("top", e.player.top + 100);
                var a = {
                    top: P.PILE_POS.top - 40,
                    "font-size": "120px"
                };
                e.player.position === P.LEFT || e.player.position === P.RIGHT ? (e.player.position === P.LEFT ? t.css({
                    right: "",
                    left: 0
                }) : t.css({
                    left: "",
                    right: 0
                }), t.css("width", "100px"), a.width = P.TABLE_SIZE.width) : (t.css("width", P.TABLE_SIZE.width + "px"), t.css("text-align", "center")), t.show().animate(a, 2 * y.ANIMATION_SPEED).fadeOut(y.ANIMATION_SPEED, e.callback)
            }, t.play = function(e) {
                "pile" === this.playType ? this.playOnPile(e) : "trick" === this.playType && this.playOnTrick(e)
            }, t.moveCardsToFront = function(e) {
                var t = e.slice(0, e.length);
                t.sort(function(e, t) {
                    return e.z() - t.z()
                });
                for (var a = t.length - 1; 0 <= a; a--) $(t[a].guiCard).css("z-index", b.value + a + 1);
                b.value += t.length + 3
            }, t.playOnPile = function(u) {
                function h(e) {
                    if (0 === u.cards.length) u.callback();
                    else {
                        var t = u.player.hand.slice(0),
                            a = u.cards,
                            i = Array.isArray(a),
                            n = 0;
                        for (a = i ? a : a[Symbol.iterator]();;) {
                            var r;
                            if (i) {
                                if (n >= a.length) break;
                                r = a[n++]
                            } else {
                                if ((n = a.next()).done) break;
                                r = n.value
                            }
                            var s = r;
                            t.push(s)
                        }
                        t.sort(function(e, t) {
                            return $(e.guiCard).css("z-index") - $(t.guiCard).css("z-index")
                        });
                        for (var o = t.length - 1; 0 <= o; o--) $(t[o].guiCard).css("z-index", b.value + o + 1);
                        b.value += t.length + 3;
                        var l = u.cards[0];
                        f.remove(u.cards, u.cards[0]);
                        var d = P.PILE_POS.top - Math.floor((m + e) / P.CONDENSE_COUNT) * P.OVERLAY_MARGIN,
                            c = P.PILE_POS.left - Math.floor((m + e) / P.CONDENSE_COUNT) * P.OVERLAY_MARGIN;
                        $(l.guiCard).moveAndSizeCard(d, c, P.DECK_AND_PILE_SIZE.width, P.DECK_AND_PILE_SIZE.height, function() {
                            return h(e + 1)
                        }), 0 === u.cards.length && p.adjustHand(u.player, null, y.ANIMATION_SPEED, !0), p.showCards([l])
                    }
                }
                var p = this,
                    m = u.game.pile.length - u.cards.length;
                1 < u.cards.length && $(u.cards[u.cards.length - 1].guiCard).css("top") != $(u.cards[0].guiCard).css("top") ? $(u.cards[u.cards.length - 1].guiCard).animate({
                    "top": $(u.cards[0].guiCard).css("top")
                }, y.ANIMATION_SPEED / 4, function() {
                    return h(0)
                }) : h(0)
            }, t.playOnTrick = function(e) {
                var t = e.player.hand.slice(0, e.player.hand.length);
                t.push(e.cards[0]), this.moveCardsToFront(t);
                var a = e.player.position,
                    i = P.TRICK_POS[a],
                    n = e.cards[0];
                n.random && e.game.message(e.player.name + " waited too long to make their move, a random card was played for them!"), $(n.guiCard).moveCard(i.top, i.left, e.callback), this.showCards([n]), d(function() {
                    return n.moveToFront()
                }, y.ANIMATION_SPEED / 1.5), this.adjustHand(e.player, null, y.ANIMATION_SPEED, !0)
            }, t.adjustHand = function(e, t, a, i, n) {
                a = a || y.ANIMATION_SPEED;
                for (var r = 0; r < e.hand.length; r++) {
                    var s = e.hand[r],
                        o = this.getCardPos(e, r, n),
                        l = void 0;
                    r === e.hand.length - 1 && (l = t), e.cardSize ? $(s.guiCard).moveAndSizeCard(o.top, o.left, e.cardSize.width, e.cardSize.height, l, a) : $(s.guiCard).moveCard(o.top, o.left, l, a), s.crushed = !!o.crushed, i || s.moveToFront()
                }
                0 === e.hand.length && t && d(t, a), e.showCards ? this.showCards(e.hand, e.position, a / 2) : this.hideCards(e.hand, e.position, a / 2)
            }, t.draw = function(e) {
                this.adjustHand(e.player, e.callback)
            }, t.sortHand = function(e) {
                this.adjustHand(e.player, e.callback)
            }, t.showResults = function() {
                $("#board").addClass("show-results");
                var e = $("#result-box").height(),
                    t = ($("#play-page").height() - e) / 2;
                t -= 22, k.isMobileLookActive() && 25 < t && (t -= 25), $("#result-box").css("z-index", Math.max(5e5, b.next())), $("#result-box").css("top", Math.max(Math.floor(t), 0))
            }, t.hideResults = function() {
                $("#board").removeClass("show-results")
            }, t.getTrickProps = function(e, t) {
                var a = {},
                    i = k.isMobileLookActive() ? 6 : 10,
                    n = $("#bottom-player").width(),
                    r = 2 + (n - P.TRICK_SIZE.height) / 2,
                    s = P.TABLE_SIZE.width / 2,
                    o = n / 2,
                    l = t * i; - 1 === t && (l = -P.TRICK_SIZE.width);
                var d = $("#left-player").offset().top - $("#play-page").offset().top,
                    c = 5;
                if (e.position === P.TOP || e.position === P.BOTTOM ? (a.width = P.TRICK_SIZE.width, a.height = P.TRICK_SIZE.height) : (a.width = P.TRICK_SIZE.height, a.height = P.TRICK_SIZE.width), e.position === P.TOP) k.isMobileLookActive() && (c -= 3), a.top = r, a.left = s + o + c + l;
                else if (e.position === P.BOTTOM) {
                    var u = P.TABLE_SIZE.height - parseInt($("#bottom-player").css("bottom")) - $("#bottom-player").height();
                    a.top = u + (n - P.TRICK_SIZE.height) / 2, k.isMobileLookActive() && (c += 3), a.left = s - o - P.TRICK_SIZE.width - c - l
                } else if (e.position === P.LEFT) a.top = d - P.TRICK_SIZE.width - c - l, a.left = 1 + r;
                else if (e.position === P.RIGHT) {
                    var h = k.isMobileLookActive() ? 0 : 2;
                    a.left = P.TABLE_SIZE.width - r - P.TRICK_SIZE.height - h, k.isMobileLookActive() ? a.top = d - P.TRICK_SIZE.width - c - l : a.top = d + $("#right-player").height() + c + l
                }
                for (var p in a) a[p] = Math.round(a[p]);
                return a
            }, t.getTrickCountProps = function(e, t) {
                var a = {};
                return e.position === P.TOP ? (a.top = t.top, a.left = t.left + P.TRICK_SIZE.width) : e.position === P.BOTTOM ? (a.top = t.top, a.left = t.left - $("#bottom-player-trick-count").width()) : e.position === P.LEFT ? (a.top = t.top - $("#left-player-trick-count").height(), a.left = t.left) : e.position === P.RIGHT && (a.left = t.left, k.isMobileLookActive() ? a.top = t.top - $("#right-player-trick-count").height() : a.top = t.top + P.TRICK_SIZE.width), a
            }, t.takeTrick = function(h) {
                var p = this;
                d(function() {
                    var e = h.trick,
                        t = Array.isArray(e),
                        a = 0;
                    for (e = t ? e : e[Symbol.iterator]();;) {
                        var i;
                        if (t) {
                            if (a >= e.length) break;
                            i = e[a++]
                        } else {
                            if ((a = e.next()).done) break;
                            i = a.value
                        }
                        var n = i;
                        $(n.guiCard).addClass("trick-card"), n.moveToFront()
                    }
                    var r = p.getTrickProps(h.player, h.player.tricks.length - 1),
                        s = {
                            top: r.top,
                            left: r.left,
                            width: P.TRICK_SIZE.width,
                            height: P.TRICK_SIZE.height
                        },
                        o = p.getTrickCountProps(h.player, r),
                        l = h.player.position === P.TOP || h.player.position === P.BOTTOM ? "vertical" : "horizontal";

                    function d() {
                        $(".trick-card").hide();
                        var e = $("<div/>");
                        h.player.tricks[h.player.tricks.length - 1].element = e.get(0), $("#play-page").append(e.addClass("trick").addClass(h.player.position).addClass(l).css(r)), h.callback()
                    }
                    for (var c = 0; c < h.trick.length; c++) $(h.trick[c].guiCard).animate(s, y.ANIMATION_SPEED, c === h.trick.length - 1 ? d : null);
                    var u = $("#" + h.player.id + "-trick-count");
                    u.animate(o, y.ANIMATION_SPEED, function() {
                        if (void 0 !== h.player.bidValue) {
                            var e = h.player.tricks.length,
                                t = h.player.bidValue;
                            u.text(e + "/" + t)
                        } else u.text(h.player.tricks.length.toString())
                    })
                }, y.TAKE_TRICK_DELAY)
            }, t.createMiniCardsElement = function(e, t) {
                var a = $("<span>");
                t && a.addClass("mini-card-outlined");
                var i = e,
                    n = Array.isArray(i),
                    r = 0;
                for (i = n ? i : i[Symbol.iterator]();;) {
                    var s;
                    if (n) {
                        if (r >= i.length) break;
                        s = i[r++]
                    } else {
                        if ((r = i.next()).done) break;
                        s = r.value
                    }
                    var o = s,
                        l = $("<span>", {
                            "class": "mini-card " + o.suit
                        }).html(o.symbol());
                    a.append(l)
                }
                return a
            }, t.processPageCards = function() {
                var e = $(".process-cards"),
                    c = {
                        J: 11,
                        Q: 12,
                        K: 13,
                        A: 1
                    },
                    u = this;
                e.each(function() {
                    var e = [],
                        t = $(this).text().split(" "),
                        a = Array.isArray(t),
                        i = 0;
                    for (t = a ? t : t[Symbol.iterator]();;) {
                        var n;
                        if (a) {
                            if (i >= t.length) break;
                            n = t[i++]
                        } else {
                            if ((i = t.next()).done) break;
                            n = i.value
                        }
                        var r = n,
                            s = r.charAt(0).toLowerCase(),
                            o = r.substr(1),
                            l = c[o];
                        l = l || parseInt(o), e.push(new h(s, l))
                    }
                    var d = u.createMiniCardsElement(e, !0);
                    $(this).replaceWith(d)
                })
            }, e
        }();
        t.exports = {
            Renderer: S,
            dimensions: u,
            timing: y,
            zIndex: b
        }
    }, {
        "../game": 6,
        "../gamecontrol": 7,
        "../helper-functions": 8,
        "../temp-storage": 18,
        "../util": 19,
        "./card": 2
    }],
    5: [function(e, t, a) {
        "use strict";
        var i = e("./render"),
            p = i.dimensions,
            n = i.timing,
            s = i.zIndex,
            m = e("../statistics"),
            r = e("../helper-functions"),
            o = r._setTimeout,
            f = r.captainsLog,
            u = e("../game").makePlayersSad,
            g = e("../gamecontrol"),
            y = e("../util"),
            b = e("../page").players,
            l = e("../temp-storage"),
            v = e("../page").slug,
            k = e("../multiplayer/multiplayer-game-client"),
            d = e("../multiplayer/multiplayer-lobby-client"),
            c = e("../multiplayer/multiplayer-challenge-client"),
            h = e("../util").cake,
            w = 0,
            C = 1,
            S = 2,
            T = 3,
            E = function() {
                function e(e) {
                    this.game = e, this.playerCount = e.defaultPlayerCount, this.tempStorage = new l(v)
                }
                var t = e.prototype;
                return t.init = function(e, t, a, i) {
                    var n = this;
                    void 0 === i && (i = null);
                    try {
                        if (y.qs.gid) {
                            var r = this.tempStorage.get(y.qs.gid);
                            r && (this.multiplayerTable = r, this.game.isPrivateGame = this.multiplayerTable.isPrivate, this.tempStorage.remove(y.qs.gid), $("#messageBox").show(), this.tempStorage.remove("joinedtable"))
                        }
                        this.multiplayerEventTransforms = {}, this.renderer = a, this.renderer.tempStorage = this.tempStorage, this.renderer.processPageCards(), this.renderer.calculateBasicPositions(this.game), this.createHumanPlayer(e), this.createOpponentPlayers(t, i), this.setEventRenderers(), this.isTouch = !1;
                        try {
                            this.isTouch = !!navigator.userAgent.match(/iphone|ipad|android/gi)
                        } catch (e) {}
                        this.setupSortHandler(), this.setupMessageHandler(), "Click Deal to start the game." === $("#messageBox p").text() && $("html").hasClass("starwars") && $("#messageBox p").text("To start the game, click Deal you must!"), this.setupPlayerCountHandler(), this.setupRestartHandler(), this.setupWinHandler(), this.setupStartHandler(), this.setupTurnHandler(), this.multiplayerTable && 1 === this.multiplayerTable.round && (y.deleteCake("results"), this.tempStorage.remove("scores"), this.tempStorage.remove("results")), this.setupMultiplayerLobby(), this.extraSetup(), this.multiplayerTable ? this.setupMultiplayerGame() : this.setupDealHandler(), this.startGame(), g.addRestartHandler(function() {
                            return n.restartWithoutReload()
                        }), $(window).on("resize", function(e) {
                            e.game = n.game, e.topPlayer = n.topPlayer, e.bottomPlayer = n.bottomPlayer, e.human = n.bottomPlayer, e.rightPlayer = n.rightPlayer, e.leftPlayer = n.leftPlayer, n.renderer.resize(e)
                        }), y.siteSettings.addListener("spreadCards", function() {
                            (g.isGameStarted() || g.isGameFinished()) && n.renderer.adjustHand(n.human)
                        })
                    } catch (e) {
                        f.error(e), alert(e + e.stack)
                    }
                }, t.createHumanPlayer = function(e) {
                    this.human = new e(b.bottom.name), this.human.top = p.BOTTOM_PLAYER_TOP, this.human.left = p.BOTTOM_PLAYER_LEFT, this.human.position = p.BOTTOM, this.human.showCards = !0, this.human.id = "bottom-player", this.human.stats = {}, this.bottomPlayer = this.human, this.multiplayerTable && (this.human.multiplayerId = this.multiplayerTable.players[0].id)
                }, t.restartWithoutReload = function() {
                    y.deleteCake("results"), this.tempStorage.remove("scores"), this.scores && (this.scores = []), this.results && (this.results = []), $(".bubble").hide(), this.game.startAgain()
                }, t.saveLastDealer = function() {
                    this.multiplayerTable || (this.tempStorage.set("lastdealerindex", this.game.dealerIndex), this._localLastDealerIndex = this.game.dealerIndex, this.game.lastDealerIndex = this.game.dealerIndex)
                }, t.loadLastDealer = function() {
                    if (!this.multiplayerTable) {
                        var e = this.tempStorage.get("lastdealerindex", null);
                        null !== e && (this.game.lastDealerIndex = e)
                    }
                }, t.createOpponentPlayers = function(e, t) {
                    if (this.multiplayerTable) {
                        this.topPlayer = this.createPlayer(t, S), this.leftPlayer = this.createPlayer(t, C), this.rightPlayer = this.createPlayer(t, T), this.topPlayer.face = b.top.code;
                        var a = this.multiplayerTable.players;
                        2 === a.length ? this.topPlayer.multiplayerId = a[1].id : 3 === a.length ? (this.leftPlayer.multiplayerId = a[1].id, this.topPlayer.multiplayerId = a[2].id) : 4 === a.length && (this.leftPlayer.multiplayerId = a[1].id, this.topPlayer.multiplayerId = a[2].id, this.rightPlayer.multiplayerId = a[3].id)
                    } else this.topPlayer = this.createPlayer(e, S), this.leftPlayer = this.createPlayer(e, C), this.rightPlayer = this.createPlayer(e, T)
                }, t.createPlayer = function(e, t, a) {
                    void 0 === t && (t = S), void 0 === a && (a = !1);
                    var i = {};
                    i[S] = [b.top.name, "top-player", p.TOP_PLAYER_TOP, p.TOP_PLAYER_LEFT, p.TOP, p.TOP_PLAYER_CARD_SIZE, b.top.code], i[C] = [b.left.name, "left-player", p.LEFT_PLAYER_TOP, p.LEFT_PLAYER_LEFT, p.LEFT, p.LEFT_PLAYER_CARD_SIZE, b.left.code], i[T] = [b.right.name, "right-player", p.RIGHT_PLAYER_TOP, p.RIGHT_PLAYER_LEFT, p.RIGHT, p.RIGHT_PLAYER_CARD_SIZE, b.right.code], i[w] = [b.bottom.name, "bottom-player", p.BOTTOM_PLAYER_TOP, p.BOTTOM_PLAYER_LEFT, p.BOTTOM, p.BOTTOM_PLAYER_CARD_SIZE, b.bottom.code];
                    var n = i[t],
                        r = n[0],
                        s = n[1],
                        o = n[2],
                        l = n[3],
                        d = n[4],
                        c = n[5],
                        u = n[6],
                        h = new e(r, this.game);
                    return h.top = o, h.left = l, h.position = d, h.face = u, h.id = s, h.cardSize = c, h.showCards = a, h.stats = {}, h
                }, t.setEventRenderers = function() {
                    var e = this.game;
                    for (var t in e.renderers) e.setEventRenderer(t, function(e) {
                        return e.callback()
                    });
                    var a = this.renderer;
                    e.setEventRenderer("deckready", function(e) {
                        return a.deckReady(e)
                    }), e.setEventRenderer("dealcard", function(e) {
                        return a.dealCard(e)
                    }), e.setEventRenderer("selectcard", function(e) {
                        return a.selectCard(e)
                    }), e.setEventRenderer("unselectcard", function(e) {
                        return a.unselectCard(e)
                    }), e.setEventRenderer("play", function(e) {
                        return a.play(e)
                    }), e.setEventRenderer("draw", function(e) {
                        return a.draw(e)
                    }), e.setEventRenderer("pass", function(e) {
                        return a.pass(e)
                    }), e.setEventRenderer("sorthand", function(e) {
                        return a.sortHand(e)
                    }), e.setEventRenderer("pickdealer", function(e) {
                        return a.pickDealer(e)
                    }), e.setEventRenderer("startagain", function(e) {
                        return a.clearTable(e)
                    }), e.setEventRenderer("illegalcard", function(e) {
                        return a.illegalCard(e)
                    }), e.setEventRenderer("timeout", function(e) {
                        return e.callback()
                    })
                }, t.setupSortHandler = function() {
                    var t = this;
                    $("#sortHand").on("click touchstart", function(e) {
                        e.preventDefault(), t.human.canPlay || t.human.mustDraw ? t.game.sortHand(t.human, function() {}) : t.game.message("You can only sort when it is your turn to play.")
                    })
                }, t.setupPlayerCountHandler = function() {
                    this.game.canChangePlayerCount && (this.playerCount = y.settings.playerCount), this.multiplayerTable && (this.playerCount = this.multiplayerTable.players.length), 2 < this.playerCount && $("#left-player").show(), 4 === this.playerCount && $("#right-player").show(), $("#player-count-" + this.playerCount).addClass("selected");
                    var a = this;
                    $("#player-count button").on("click touchstart", function(e) {
                        e.preventDefault();
                        var t = parseInt($(this).data("value"));
                        a.playerCount = t, y.settings.set("playerCount", a.playerCount), a.pickDealer(), $("#player-count button").removeClass("selected"), $(this).addClass("selected"), 4 === a.playerCount && ($("#right-player").fadeIn(), $("#left-player").fadeIn()), 3 === a.playerCount && ($("#right-player").fadeOut(), $("#left-player").fadeIn()), 2 === a.playerCount && ($("#right-player").fadeOut(), $("#left-player").fadeOut())
                    })
                }, t.bindCardEventHandlers = function() {
                    var a = this.human,
                        i = this.renderer;
                    $(".card").on("mousedown touchstart", function(e) {
                        e.preventDefault(),
                            function(e) {
                                if (e.crushed && a && a.hand) {
                                    var t = a.hand.indexOf(e);
                                    return -1 !== t && (a.zoomedPos = t, i.adjustHand(a, null, n.ANIMATION_SPEED), !0)
                                }
                                return !1
                            }(this.card) || a.useCard(this.card, 3 == e.which || e.metaKey)
                    }), $(".card").bind("contextmenu", function(e) {
                        return !1
                    })
                }, t.setupStartHandler = function() {
                    var t = this;
                    this.game.setEventRenderer("start", function(e) {
                        $("#sortHand").show(), t.bindCardEventHandlers(), t.renderer.start ? t.renderer.start(e) : e.callback()
                    })
                }, t.multiplayerStartupMessage = function() {
                    2 === this.game.players.length ? this.game.message("Waiting for " + b.top.name + " to come online...") : this.game.message("Waiting for other players to come online...")
                }, t.beforeMultiplayerDeal = function() {}, t.setupMultiplayerGame = function() {
                    var s = this;
                    this.preloadImages(), this.addPlayers(), $(".face-top-player, .face-right-player, .face-left-player").addClass("offline");
                    var e = this.game.players,
                        t = Array.isArray(e),
                        a = 0;
                    for (e = t ? e : e[Symbol.iterator]();;) {
                        var i;
                        if (t) {
                            if (a >= e.length) break;
                            i = e[a++]
                        } else {
                            if ((a = e.next()).done) break;
                            i = a.value
                        }
                        var n = i;
                        n.multiplayerMoves = [], n.multiplayer = !0
                    }
                    var r = this.multiplayerTable.players,
                        o = Array.isArray(r),
                        l = 0;
                    for (r = o ? r : r[Symbol.iterator]();;) {
                        var d;
                        if (o) {
                            if (l >= r.length) break;
                            d = r[l++]
                        } else {
                            if ((l = r.next()).done) break;
                            d = l.value
                        }
                        var c = d;
                        $(".face-" + c.pos + "-player").addClass("p-" + c.id), c.bot && $(".face-" + c.pos + "-player").addClass("bot")
                    }
                    this.multiplayerStartupMessage(), $("#open-player-picker").hide(), $("#player-count").hide(), this.client = new k(v, this.multiplayerTable, this.game.players), this.client.on("players-ready", function() {
                        2 === s.game.players.length ? s.game.message("Both players are ready, starting the game...") : s.game.message("All players are ready, starting the game..."), 2 === s.multiplayerTable.playerCount.maxPlayers ? m.startMultiplayerChallengeGame(s.game.players[1]) : m.startGame(s.game.players), s.beforeMultiplayerDeal(), s.game.deal(), g.startGame(), y.isMobileLookActive() && $("#messageBox").fadeIn()
                    }), this.client.on("forcequit", function(e) {
                        s.game.forceQuit(e.data.player, e.data.reason)
                    }), $(".multiplayer-start-next-round").attr("disabled", "disabled"), this.client.on("next-table", function(e) {
                        return s.nextMultiplayerTableReady(e)
                    }), this.client.connect(), this.setupMultiplayerEvents();

                    function u(n) {
                        var r = s.game.renderers[n];
                        s.game.renderers[n] = function(e) {
                            var t = !1;
                            if (e.player.shouldMakeSubstituteMove && (t = e.player.shouldMakeSubstituteMove()), "bottom-player" === e.player.id || t) {
                                var a = s.multiplayerEventTransforms[n];
                                if (a) {
                                    var i = a(e);
                                    i ? (t ? (f.debug("Making substitute move for " + e.player.name), i.playerId = e.player.multiplayerId, i.substitute = !0) : i.playerId = s.human.multiplayerId, s.client.sendMove(i)) : f.debug("Transform returned null for event " + n + ", not sending it")
                                }
                            } else f.debug("Not Bottom player");
                            r(e)
                        }
                    }
                    for (var h in this.game.renderers) u(h)
                }, t.nextMultiplayerTableReady = function() {
                    $(".multiplayer-start-next-round").removeAttr("disabled")
                }, t.setupMultiplayerEvents = function() {
                    this.handleMultiplayerEvent("selectcard", function(e) {
                        return {
                            type: e.name,
                            card: e.card.toString()
                        }
                    }), this.handleMultiplayerEvent("unselectcard", function(e) {
                        return {
                            type: e.name,
                            card: e.card.toString()
                        }
                    }), this.handleMultiplayerEvent("pass", function(e) {
                        return {
                            type: e.name
                        }
                    }), this.handleMultiplayerEvent("forcequit", function(e) {
                        return {
                            type: e.name,
                            reason: e.reason
                        }
                    }), this.handleMultiplayerEvent("play", function(e) {
                        return {
                            type: e.name,
                            random: e.cards.some(function(e) {
                                return e.random
                            }) || window.undefined,
                            cards: e.cards.map(function(e) {
                                return e.toString()
                            })
                        }
                    })
                }, t.handleMultiplayerEvent = function(e, t) {
                    this.multiplayerEventTransforms[e] = t
                }, t.setupMultiplayerLobby = function() {
                    if (2 === this.game.defaultPlayerCount) {
                        var e = h("privateroom") || y.qs.privateroom;
                        e && h("privateroom", e, 1), this.lobbyClient = new c(v, e)
                    } else {
                        var t = {
                            maxPlayers: this.game.defaultPlayerCount
                        };
                        this.game.canChangePlayerCount ? t.minPlayers = 2 : t.minPlayers = t.maxPlayers, this.lobbyClient = new d(v, t)
                    }
                }, t.setupTurnHandler = function() {
                    this.game.setEventRenderer("playerturn", function(e) {
                        "bottom-player" === e.player.id ? e.game.message("Your turn!") : e.game.message(e.player.name + "'s turn!"), e.callback()
                    })
                }, t.preloadImages = function() {
                    for (var e = 0, t = ["cards/horizontal-trick.png", "cards/vertical-trick.png", "svg/speech-left.svg", "svg/speech-right.svg", "svg/speech-top.svg", "svg/trophy.svg"]; e < t.length; e++) {
                        var a = t[e];
                        y.preloadImage(STATIC_ASSET_DOMAIN + "/shared/images/" + a)
                    }
                    2 <= window.devicePixelRatio && (y.preloadImage(STATIC_ASSET_DOMAIN + "/shared/images/cards/vertical-trick2x.png"), y.preloadImage(STATIC_ASSET_DOMAIN + "/shared/images/cards/horizontal-trick2x.png"))
                }, t.addPlayers = function() {
                    this.multiplayerTable && (this.playerCount = this.multiplayerTable.players.length, 4 === this.playerCount && ($("#left-player").fadeIn(), $("#right-player").fadeIn()), 3 === this.playerCount && ($("#left-player").fadeIn(), $("#right-player").fadeOut()), 2 === this.playerCount && ($("#left-player").fadeOut(), $("#right-player").fadeOut())), this.game.addPlayer(this.human), 2 < this.playerCount && this.game.addPlayer(this.leftPlayer), this.game.addPlayer(this.topPlayer), 4 == this.playerCount && this.game.addPlayer(this.rightPlayer);
                    var e = this.game.players,
                        t = Array.isArray(e),
                        a = 0;
                    for (e = t ? e : e[Symbol.iterator]();;) {
                        var i;
                        if (t) {
                            if (a >= e.length) break;
                            i = e[a++]
                        } else {
                            if ((a = e.next()).done) break;
                            i = a.value
                        }
                        i.stats = {}
                    }
                }, t.setupDealHandler = function() {
                    var t = this,
                        a = this.game;
                    $("#deal").on("click touchstart", function(e) {
                        for (e.preventDefault(), g.startGame(), 0 === a.players.length && t.preloadImages(), (2 !== a.defaultPlayerCount || y.siteSettings.hideMultiplayerButton) && $("#multiplayer-button").is(":visible") && $("#multiplayer-button").fadeOut(); 0 < a.players.length;) a.players.pop();
                        t.addPlayers(), m.startGame(a.players), a.message(""), t.setTestCards(), a.deal(), $("#deal").hide(), $(".show-after-deal").show(), $("#open-player-picker").hide(), $("#player-count").hide(), y.trackEvent("StartGame", t.playerCount + " players", t.playerCount)
                    })
                }, t.setupRestartHandler = function() {
                    var a = this.game,
                        i = !!this.multiplayerTable,
                        n = this.tempStorage;
                    $("#start-new-game").on("click touchstart", function(e) {
                        if ("disabled" !== $("#start-new-game").attr("disabled")) {
                            var t = $(this).text();
                            "Play another hand" !== t && "Play next round" !== t || n.set("autodeal", !0), e.preventDefault(), y.ads.trigger(function() {
                                if (y.isMobileLookActive() && !i) a.startAgain();
                                else {
                                    try {
                                        if (y.qs.gid && !n.get(y.qs.gid)) return void(location.href = location.pathname)
                                    } catch (e) {}
                                    y.reloadPage()
                                }
                            })
                        }
                    })
                }, t.setupMessageHandler = function() {
                    this.game.message = function(e) {
                        $("#messageBox p").html("<span>" + e + "</span>")
                    }
                }, t.setWinReason = function(e) {
                    "concede" === e.winType ? "bottom-player" === e.loser.id ? $("#win-reason").text("You surrendered.") : $("#win-reason").text(e.loser.name + " surrendered.") : "timeout" === e.winType || "localtimeout" === e.winType ? "bottom-player" === e.loser.id ? $("#win-reason").text("You timed out.") : $("#win-reason").text(e.loser.name + " timed out!") : "abandon" === e.winType ? "bottom-player" === e.loser.id ? $("#win-reason").text("You disconnected from the game!") : $("#win-reason").text(e.loser.name + " disconnected from the game.") : "illegalmove" === e.winType && $("#win-reason").text(e.loser.name + " disconnected, and lost!")
                }, t.setupWinHandler = function() {
                    var r = this,
                        c = this.renderer;
                    this.game.setEventRenderer("win", function(l) {
                        var d = l.game;
                        r.multiplayerTable || (y.trackEvent("Win", l.player.id), y.trackEvent("FinishGame")), r.client && (r.client.sendResult({
                            finished: !0,
                            winners: [l.player.multiplayerId],
                            endReason: l.winType
                        }), r.tempStorage.remove(y.qs.gid)), g.finishGame(), u([l.player.id]), s.next(), "bottom-player" === l.player.id ? $("#result-box h3").text("CONGRATULATIONS!!! YOU WIN!") : $("#result-box h3").text(l.player.name.toUpperCase() + " WINS!!!"), r.setWinReason(l);
                        var e = d.players,
                            t = Array.isArray(e),
                            a = 0;
                        for (e = t ? e : e[Symbol.iterator]();;) {
                            var i;
                            if (t) {
                                if (a >= e.length) break;
                                i = e[a++]
                            } else {
                                if ((a = e.next()).done) break;
                                i = a.value
                            }
                            var n = i;
                            n === l.player ? n.stats.result = "win" : n.stats.result = "lose"
                        }
                        r.multiplayerTable && 2 === r.multiplayerTable.playerCount.maxPlayers ? m.finishMultiplayerChallengeGame(d.players) : m.finishGame(d.players), o(function() {
                            var e = d.pile,
                                t = Array.isArray(e),
                                a = 0;
                            for (e = t ? e : e[Symbol.iterator]();;) {
                                var i;
                                if (t) {
                                    if (a >= e.length) break;
                                    i = e[a++]
                                } else {
                                    if ((a = e.next()).done) break;
                                    i = a.value
                                }
                                $(i.guiCard).hide()
                            }
                            var n = d.deck,
                                r = Array.isArray(n),
                                s = 0;
                            for (n = r ? n : n[Symbol.iterator]();;) {
                                var o;
                                if (r) {
                                    if (s >= n.length) break;
                                    o = n[s++]
                                } else {
                                    if ((s = n.next()).done) break;
                                    o = s.value
                                }
                                $(o.guiCard).hide()
                            }
                            $("#result-box span.winner-img").css("display", "none"), $("#result-box span#" + l.player.id + "-win").css({
                                display: "inline-block",
                                width: 120,
                                height: 120
                            }), $("#messageBox").hide(), c.showResults()
                        }, 500)
                    })
                }, t.startGame = function() {
                    this.pickDealer(), this.multiplayerTable && (this.game.deckCode = this.multiplayerTable.initialDeck), this.game.start()
                }, t.pickDealer = function() {
                    var e, t = this,
                        a = this.playerCount || this.game.defaultPlayerCount;
                    if (e = 2 == a ? ["bottom-player", "top-player"] : 3 == a ? ["bottom-player", "left-player", "top-player"] : ["bottom-player", "left-player", "top-player", "right-player"], this.multiplayerTable) {
                        var i = this.multiplayerTable.players.find(function(e) {
                                return e.id === t.multiplayerTable.initialDealerId
                            }),
                            n = this.multiplayerTable.players.indexOf(i);
                        --n < 0 && (n = this.multiplayerTable.players.length - 1), this.game.lastDealerIndex = n
                    }
                    this.game.pickDealer(e)
                }, t.extraSetup = function() {}, t.setTestCards = function() {
                    var e = y.qs,
                        t = this.game,
                        a = t.players,
                        i = Array.isArray(a),
                        n = 0;
                    for (a = i ? a : a[Symbol.iterator]();;) {
                        var r;
                        if (i) {
                            if (n >= a.length) break;
                            r = a[n++]
                        } else {
                            if ((n = a.next()).done) break;
                            r = n.value
                        }
                        var s = r;
                        e[s.id] && (t.fixedCards || (t.fixedCards = {
                            all: []
                        }), t.fixedCards[s.id] = e[s.id].slice(0, e[s.id].length).map(function(e) {
                            return e.toUpperCase()
                        }))
                    }
                }, e
            }();
        t.exports = E
    }, {
        "../game": 6,
        "../gamecontrol": 7,
        "../helper-functions": 8,
        "../multiplayer/multiplayer-challenge-client": 9,
        "../multiplayer/multiplayer-game-client": 10,
        "../multiplayer/multiplayer-lobby-client": 11,
        "../page": 16,
        "../statistics": 17,
        "../temp-storage": 18,
        "../util": 19,
        "./render": 4
    }],
    6: [function(e, t, a) {
        "use strict";
        var i, l = e("./util"),
            n = e("./helper-functions"),
            o = n.captainsLog,
            d = n._setTimeout,
            r = n._setInterval,
            c = (n.ArrayUtils, l.settings),
            u = e("./gamecontrol"),
            h = e("./temp-storage"),
            s = {
                h: "&hearts;",
                s: "&spades;",
                d: "&diams;",
                c: "&clubs;"
            };

        function p() {
            i && (window.requestAnimationFrame(p), $.fx.tick())
        }
        window.requestAnimationFrame && (l.qs.gid ? o.debug("Multiplayer game, not using requestAnimationFrame") : ($.fx.timer = function(e) {
            e() && jQuery.timers.push(e) && !i && (i = !0, p())
        }, $.fx.stop = function() {
            i = !1
        }));
        var m = navigator.userAgent.match(/Android (4|5|6|7|8|9)/) && navigator.userAgent.match(/ SM-|samsung/g);
        l.qs.android && (m = !0), m && (s = {
            h: "&#x2661;",
            s: "&#x2664;",
            d: "&#x2662;",
            c: "&#x2667;"
        });
        var f, g = (f = 1, {
            get: function() {
                return f
            },
            set: function(e) {
                "string" == typeof e && (e = {
                    verySlow: .5,
                    slow: .8,
                    normal: 1,
                    fast: 1.5,
                    veryFast: 2.2
                } [e]), f = e, $.fx.speeds._default = y(400), $.fx.speeds.fast = y(200), $.fx.speeds.slow = y(600), 1 != f && (b("animate", 1), b("fadeOut", 0), b("fadeIn", 0), d.speed = f, r.speed = f)
            },
            toString: function() {
                return "SPEED: " + f
            },
            ms: y
        });

        function y(e) {
            return e / f
        }

        function b(e, a) {
            var i = $.fn[e];
            $.fn[e] = function() {
                var e = Array.prototype.slice.call(arguments),
                    t = e[a];
                return "number" == typeof t ? e[a] = y(t) : t && t.duration && (t.duration = y(t.duration)), i.apply(this, e)
            }
        }

        function v(e) {
            $("#" + e + " div").addClass("sad")
        }

        function k(e) {
            $("#" + e + " div").removeClass("sad")
        }
        c.speed && "normal" !== c.speed && g.set(c.speed), l.cake("scroll") && (window.scroll(0, parseInt(l.cake("scroll"))), l.deleteCake("scroll")), document.referrer && document.referrer.length && (document.referrer.match(/^https:\/\/cardgames\.io\//) || document.referrer.match(/127\.0\.0\.1/) || l.trackEvent("Referral", document.referrer));
        var w, C, S, T = (w = "", C = {}, S = 0, $(document).on("keypress", function(e) {
            var t = (new Date).getTime();
            2e3 < t - S && (w = ""), S = t;
            var a = String.fromCharCode(e.which);
            for (var i in w += a, C) {
                if (i == w) return C[i](), void(w = "");
                if (i.substr(0, w.length) == w) return
            }
            for (var n in C)
                if (n.substr(0, 1) == a) return void(w = a);
            w = ""
        }), function(e, t) {
            C[e] = t
        });

        function E(e) {
            void 0 === e && (e = "");
            var a = e.split(","),
                t = o.messages.filter(function(t) {
                    return a.some(function(e) {
                        return -1 !== t.toLowerCase().indexOf(e.trim().toLowerCase())
                    })
                });
            0 === t.length ? $("#matrix textarea").val("Sorry, no log lines found for term: " + e) : $("#matrix textarea").val(t.join("\n"))
        }
        window.players && window.players.top && "2" === window.players.top.code && $("body").addClass("default-top-player"), T("matrix", function() {
            $("body").toggleClass("matrix");
            var e = $("#matrix textarea");
            $("body").hasClass("matrix") && (E(), e.scrollTop(e[0].scrollHeight), setTimeout(function() {
                $("#matrix input").val("").focus()
            }, 200))
        }), $("#matrix-log-filter").on("input", function(e) {
            var t = $("#matrix-log-filter").val().trim().toLowerCase(),
                a = $("#matrix textarea");
            t.match(/^(:q|quit|exit|matrix)$/) ? $("body").removeClass("matrix") : t.match(/fuck/) ? a.val("We're not that kind of site!") : "help" === t ? a.val("What do you need help with?") : "who are you" === t ? a.val("My name is Skynet.") : "skynet" === t ? a.val("Welcome to Cyberdyne systems.") : "shutdown" === t ? a.val("Shutting site down in 5 seconds...") : "cheat" === t ? a.val("Nice try!") : E(t.trim())
        }), l.qs.autoplay && ("number" == typeof l.qs.autoplay ? g.set(l.qs.autoplay) : g.set(3)), $(function() {
            for (var e = 0, t = ["bottom", "top", "left", "right"]; e < t.length; e++) {
                var a = t[e];
                l.preloadBackgroundImageClass("face-small sad face-" + a + "-player")
            }

            function n(e) {
                if (void 0 === c) return {};
                var t = void 0 !== c[e] ? c : l.siteSettings;
                return void 0 === t[e] ? (o.error("Bad option name: " + e), {}) : t
            }
            $(document).on("keypress", function(e) {
                13 === e.which && $("#start-new-game").is(":visible") && $("#start-new-game").click()
            }), APP_MODE && (l.siteSettings.showAdSettingsLink && $("#ad-settings").css("display", "block"), window.app = {
                showAdSettingsLink: function() {
                    l.siteSettings.set("showAdSettingsLink", !0), $("#ad-settings").css("display", "block")
                },
                hideAdSettingsLink: function() {
                    l.siteSettings.set("showAdSettingsLink", !1), $("#ad-settings").hide()
                }
            }, $(".game-links a").on("click", function(e) {
                var t = e.target.href;
                e.preventDefault(), l.ads.trigger(function() {
                    location.href = t
                })
            }), window.addEventListener("message", function(e) {
                if ("new-face" === e.data) {
                    loadPlayerFaces(), $("#temphidenames").remove(), $("body").removeClass("subview-open avatars-subview-open");
                    var t = $("#title h1").data("real-title");
                    t && $("#title h1").text(t)
                }
            }), window.addEventListener("orientationchange", function(e) {
                $("body").removeClass("subview-open avatars-subview-open  statistics-subview-open");
                var t = $("#title h1").data("real-title");
                t && $("#title h1").text(t)
            }), $('a[href$="/statistics/"]').on("click", function(e) {
                e.preventDefault(), $("#statistics-subview").attr("src") || $("#statistics-subview").attr("src", e.target.href), $("body").addClass("subview-open").addClass("statistics-subview-open"), l.mobileMenu.close()
            }), $('a[href$="/avatars/"]').on("click", function(e) {
                e.preventDefault();
                var t = $("#title h1"),
                    a = t.text();
                t.data("real-title", a), t.text("CHANGE PLAYER"), $("#avatars-subview").attr("src") || $("#avatars-subview").attr("src", "/avatars/"), $("body").addClass("subview-open").addClass("avatars-subview-open"), l.mobileMenu.close()
            }), $(".appmode-remove").remove(), $(".game-links a").each(function() {
                $(this).attr("href", $(this).attr("href") + "?" + (new Date).getTime())
            }), $('a[href="#ad-settings"]').on("click", function(e) {
                e.preventDefault(), l.mobileMenu.close(), window.Android ? Android.adSettings() : window.webkit.messageHandlers.adSettings.postMessage("Hi there")
            })), $("#play-page").on("click", function() {}), $('.option-row input[type="radio"]').each(function() {
                var e = $(this).attr("name");
                n(e)[e] == $(this).val() && $(this).prop("checked", !0)
            }), $(".option-row input+span").on("touchstart", function(e) {
                $(this).siblings("input").trigger("click"), e.preventDefault()
            }), $('.option-row input[type="radio"]').on("change", function(e) {
                var t = $(this).attr("name"),
                    a = n(t),
                    i = $(this).val();
                "number" == typeof a[t] ? a.set(t, parseInt(i)) : a.set(t, i)
            }), $('.option-row input[type="checkbox"]').each(function() {
                var e = $(this).attr("name"),
                    t = n(e);
                $(this).prop("checked", t[e])
            }), $('.option-row input[type="checkbox"]').on("change", function(e) {
                var t = $(this).attr("name");
                n(t).set(t, $(this).is(":checked"))
            }), l.siteSettings.addListener("useDarkTheme", function(e) {
                e.value ? $("html").addClass("dark-theme") : $("html").removeClass("dark-theme")
            }), l.siteSettings.addListener("hideMultiplayerButton", function(e) {
                l.siteSettings.hideMultiplayerButton && ($("#multiplayer-button").hide(), APP_MODE || alert("You've chosen to hide the Multiplayer button. It will still show up when you load the page, but will be hidden as soon as the game starts."))
            }), l.siteSettings.addListener("holidayThemes", function(e) {
                e.value ? (themes.turnOn(), l.deleteCake("themeoff")) : themes.turnOff()
            }), l.siteSettings.addListener("alwaysUseInterstitialAds", function(e) {
                $(".don-draper").css("visibility", e.value ? "hidden" : "visible")
            }), l.siteSettings.addListener("spreadCards", function(e) {
                try {
                    webRenderer._adjustHand(human)
                } catch (e) {}
            }), void 0 !== c && c.addListener("speed", function(e) {
                $("#speed-value").text({
                    slow: "Slow",
                    verySlow: "Very slow",
                    normal: "Normal",
                    fast: "Fast",
                    veryFast: "Very fast"
                } [c.speed]), g.set(c.speed)
            }), $("#facebook-promo a").click(function() {
                l.trackEvent("FacebookLinkClick")
            }), d(function() {
                l.preloadImage(STATIC_ASSET_DOMAIN + "/shared/images/svg/trophy.svg")
            }, 9e3), $(".avatar").click(function() {
                l.trackEvent("ClickPlayer", $(this).attr("id"))
            }), $("#game-options-page button").click(function() {
                $("body").removeClass("options-open")
            }), $('a[href="#options"]').click(function(e) {
                e.preventDefault(), l.removeConfetti(), l.mobileMenu.isOpen() && l.mobileMenu.close(), $("body").addClass("options-open"), $("body").removeClass("multiplayer-open"), $.getJSON("/version.json", function(e) {
                    $("#options-version").text("v" + e.version)
                })
            });
            void 0 !== c && $("#speed-value").text({
                verySlow: "Very slow",
                slow: "Slow",
                normal: "Normal",
                fast: "Fast",
                veryFast: "Very fast"
            } [c.speed]), $('a[href="#newgame"]').click(function(e) {
                function t() {
                    l.qs.gid ? document.location.href = document.location.pathname : (l.isMobileLookActive(), l.reloadPage())
                }
                e.preventDefault(), e.stopPropagation(), l.removeConfetti();
                var a, i, n = "You have a game in progress. Are you sure you want to start a new game and abandon the current game?";
                a = u.isGameStarted(), i = u.isGameFinished();
                var r = new h(window.slug);
                return a ? i ? l.cake("results") || r.get("scores") ? confirm(n) && (l.cake("results", ""), r.remove("scores"), l.trackEvent("NewGame", "Finished"), l.ads.trigger(t)) : (l.trackEvent("NewGame", "Finished"), l.ads.trigger(t)) : confirm(n) && (l.trackEvent("NewGame", "Abandoned"), l.cake("results") && l.cake("results", ""), r.remove("scores"), l.ads.trigger(t)) : l.cake("results") || r.get("scores") ? confirm(n) && (l.cake("results", ""), r.remove("scores"), l.trackEvent("NewGame", "NotStarted"), l.ads.trigger(t)) : (l.trackEvent("NewGame", "NotStarted"), l.ads.trigger(t)), !1
            });

            function i(e) {
                return e && e.toUpperCase().match(/-THX1138$/)
            }

            function r() {
                window.paused ? (window.paused = !1, window.pauseTime += (new Date).getTime() - window.pausedAt, $('a[href="#pause"]').text("Pause Game"), $("#play-page").removeClass("paused"), $("#pause-notification").hide()) : u.isGameFinished() || (window.pauseTime = window.pauseTime || 0, window.pausedAt = (new Date).getTime(), window.paused = !0, $('a[href="#pause"]').text("Resume Game"), $("#play-page").addClass("paused"), $("#pause-notification").show())
            }
            i(l.cake("betacode")) && $("#board").removeClass("beta"), $("#beta-screen button").on("click", function(e) {
                e.preventDefault();
                var t = $("#beta-screen input").val();
                i(t) ? ($("#board").removeClass("beta"), l.cake("betacode", t, 20)) : alert("That is not a valid code")
            }), $('a[href="#rules"],a[href="#about"]').on("click", function(e) {
                e.target.href.match(/#rules/) ? ($("body").removeClass("about-open"), $("body").addClass("rules-open")) : ($("body").removeClass("rules-open"), $("body").addClass("about-open")), APP_MODE && e.preventDefault(), l.mobileMenu.close()
            }), $('a[href="#pause"]').click(function(e) {
                r(), l.mobileMenu.close(), e.preventDefault()
            }), $("#resume-button").click(function(e) {
                r(), l.mobileMenu.close(), e.preventDefault()
            }), $(".theme-off").on("click", function(e) {
                e.preventDefault(), l.cake("themeoff", "1", 10, "/"), $("html").removeClass(themes.current)
            }), $(".theme-on").on("click", function(e) {
                e.preventDefault(), l.deleteCake("themeoff"), 0 === $("#theme-css").length && $("<link>", {
                    href: "/themes/" + siteVersion + "/" + themes.current + ".min.css",
                    id: "theme-css",
                    rel: "stylesheet"
                }).appendTo("head"), $("html").addClass(themes.current)
            }), $(window).on("pagehide", function(e) {
                window.paused || (window.pageHiddenAt = (new Date).getTime())
            }), $(window).on("pageshow", function() {
                if (!window.paused && window.pageHiddenAt) {
                    var e = (new Date).getTime() - window.pageHiddenAt;
                    "undefined" == typeof pauseTime && (window.pauseTime = 0), window.pauseTime += e
                }
            }), void 0 === document.createElement("div").style.webkitTextStroke && $("html").addClass("no-text-stroke"), window.startTime = (new Date).getTime(), (new Date).toString().match(/ May 4 /) && $("#the-force").text("May the 4th be with you");
            try {
                if (!l.isMobileLookActive()) {
                    var s = document.createElement("div");
                    s.innerHTML = "&nbsp;", s.className = "adsbox", document.body.appendChild(s), setTimeout(function() {
                        0 === s.offsetHeight ? $("body").addClass("adblock") : "3030" !== location.port || l.qs.ads || $(".don-draper ins").each(function() {
                            var e = document.createElement("iframe");
                            e.src = "/merchandise/", e.setAttribute("class", "dev-ad"), e.frameBorder = 0, e.scrolling = "no", $(this).append(e)
                        });
                        s.parentNode.removeChild(s)
                    }, 100)
                }
            } catch (e) {}
        }), l.browser.supportsSvg || function(e) {
            if (e) {
                var t = "../";
                return "/" === document.location.pathname && (t = ""), $("#firefox-Logo").attr("src", t + "shared/images/Icon_Mozilla.png"), $("#Chrome-Logo").attr("src", t + "shared/images/Icon_Chrome.png"), $("#oldbrowser").show()
            }
            $("#oldbrowser").hide()
        }(!0), void 0 !== a && (t.exports = {
            loadPlayerFace: function(e, t, a) {
                var i = l.getFaceUrl(e, !1),
                    n = l.getFaceUrl(e, !0),
                    r = l.getHairClass(e);
                l.createFaceStyleElement(t.substr(1), i, n);
                var s = $(t + " .face-small"),
                    o = s.get(0).className.match(/hair-\w+/);
                o && (o = o[0], s.data("original-hair") || s.data("original-hair", o), s.removeClass(o)), s.addClass(r), s.data("current-hair", r), $(t + " small").text(a), $(t + " .face-small").css("margin", "auto"), $(t).css("margin-left", "-" + $(t).width() / 2 + "px")
            },
            addCheat: T,
            makePlayersSad: function(e) {
                for (var t = ["top-player", "bottom-player", "left-player", "right-player"], a = 0; a < t.length; a++) - 1 == e.indexOf(t[a]) ? v(t[a]) : k(t[a])
            },
            makePlayerSad: v,
            makePlayerHappy: k,
            makeAllPlayersHappy: function() {
                $(".avatar div").removeClass("sad")
            },
            SPEED: g,
            HTML_CARD_SUITS: s
        })
    }, {
        "./gamecontrol": 7,
        "./helper-functions": 8,
        "./temp-storage": 18,
        "./util": 19
    }],
    7: [function(e, t, a) {
        "use strict";
        var i = "notstarted",
            n = null;
        t.exports = {
            isGameNotStarted: function() {
                return "notstarted" === i
            },
            isGameStarted: function() {
                return "started" === i
            },
            isGameFinished: function() {
                return "finished" === i
            },
            isStuck: function() {
                return "stuck" === i
            },
            startGame: function() {
                i = "started"
            },
            finishGame: function() {
                i = "finished"
            },
            stuck: function() {
                i = "stuck"
            },
            resetGameStatus: function() {
                i = "notstarted"
            },
            addRestartHandler: function(e) {
                n = e
            },
            canRestart: function() {
                return null !== n
            },
            restart: function() {
                if (null === n) throw new Error('No restart handler has been registered. Check "canRestart()" before calling this function');
                n()
            }
        }
    }, {}],
    8: [function(e, t, a) {
        "use strict";
        var s = {
                x: -1,
                m: Math.pow(2, 32),
                a: 1664525,
                b: 1013904223,
                init: function(e) {
                    void 0 === e && (e = -1), this.x = -1 == e ? Math.floor(Math.random() * this.m) : e
                },
                next: function() {
                    return -1 == this.x && this.init(), this.x = (this.a * this.x + this.b) % this.m, this.x / (this.m - 1)
                }
            },
            i = {
                shuffle: function(e, t) {
                    void 0 === t && (t = -1);
                    var a = e.length;
                    if (0 !== a)
                        for (s.init(t); --a;) {
                            var i = Math.floor(s.next() * (a + 1)),
                                n = e[a],
                                r = e[i];
                            e[a] = r, e[i] = n
                        }
                },
                remove: function(e, t) {
                    var a = e.indexOf(t);
                    return -1 !== a && (e.splice(a, 1), !0)
                },
                random: function(e) {
                    return e[Math.floor(Math.random() * e.length)]
                }
            };
        var n = {
            info: function(e) {
                this.messages.push("INFO: " + e), this.level.match(/info|verbose|debug/) && (console.info ? console.info(e) : console.log("INFO: " + e))
            },
            messages: [],
            error: function(e) {
                this.messages.push("ERROR: " + e), console.error ? console.error(e) : console.log("ERROR: " + e)
            },
            debug: function(e) {
                this.messages.push("DEBUG: " + e), "debug" == this.level && (console.debug ? console.debug(e) : console.log("DEBUG: " + e))
            },
            warn: function(e) {
                this.messages.push("WARN: " + e), this.level.match(/info|verbose|warn|debug/) && (console.warn ? console.warn(e) : console.log("WARN: " + e))
            },
            toString: function() {
                return "gott log "
            },
            // level: "info"
            level: "debug"
        };

        function r(e, t) {
            return 1 !== r.speed && (t = Math.floor(t / r.speed)), setTimeout(e, t)
        }

        function o(e, t) {
            return 1 !== o.speed && (t = Math.floor(t / o.speed)), setInterval(e, t)
        }
        o.speed = r.speed = 1, void 0 !== a && (t.exports = {
            captainsLog: n,
            dataBind: function(e, s) {
                return e.replace(/@(\w+(\.\w+)*)/g, function(e, t) {
                    for (var a, i = t.split("."), n = s, r = 0; r < i.length; r++) {
                        if (a = i[r], void 0 === n) return "<undefined>";
                        if (null === n || null === n[a]) return "<null>";
                        if (void 0 === n[a]) return "<undefined>";
                        n = n[a]
                    }
                    return "" + n
                })
            },
            _setTimeout: r,
            _setInterval: o,
            randomInt: function(e, t) {
                return Math.floor(Math.random() * (t - e + 1)) + e
            },
            ArrayUtils: i,
            addDelaysToFunctions: function(e, t) {
                function a(e, t, a) {
                    var i = e[t];
                    if (!i) throw new Error("Unrecognized func name: " + t);
                    e[t] = function() {
                        var e = this,
                            t = arguments;
                        r(function() {
                            i.apply(e, t)
                        }, a)
                    }
                }
                for (var i in t) {
                    a(e, i, t[i])
                }
            },
            cson: function(e) {
                return "undefined" == typeof JSON ? "JSON Not Available" : JSON.stringify(function e(t) {
                    var a = Object.prototype.toString;
                    if ("undefined" == typeof JSON) return "JSON Not Available";
                    if (null == t) return t;
                    if (t.name || t.shortName) return t.name || t.shortName;
                    if ("[object Array]" == a.call(t)) {
                        for (var i = [], n = 0; n < t.length; n++) i.push(e(t[n]));
                        return i
                    }
                    if ("[object Object]" != a.call(t)) return t;
                    var r = {};
                    for (var s in t) r[s] = e(t[s]);
                    return r
                }(e), null, 2).replace(/\s*"([HSDC]\d\d?)"\s*(\]|,)/gm, "$1$2").replace(/"([HSDC]\d\d?)"/gm, "$1")
            },
            combinations: function(e, n) {
                return function e(t, a, i) {
                    if (0 !== t.length || 0 !== a.length) return 0 === a.length ? n ? t.length >= n && i.push(t) : i.push(t) : (e(t.concat(a[0]), a.slice(1, a.length), i), e(t, a.slice(1, a.length), i)), i
                }([], e, [])
            }
        })
    }, {}],
    9: [function(e, t, a) {
        "use strict";
        var o = e("../util"),
            i = e("./multiplayer-util"),
            n = i.normalizeTable,
            r = i.emitBlockList,
            s = i.randomId,
            l = i.setupMultiplayerLogging,
            d = e("../helper-functions").captainsLog,
            c = e("../statistics"),
            u = e("../temp-storage"),
            h = e("./name-handler"),
            p = function() {
                function e(e, t) {
                    var a = this;
                    if (this.slug = e, this.roomId = t, this.tempStorage = new u(e), l(), o.siteSettings.multiplayerPublicId || (o.siteSettings.set("multiplayerPublicId", s()), o.siteSettings.set("multiplayerPrivateId", s())), this.publicId = o.siteSettings.multiplayerPublicId, this.privateId = o.siteSettings.multiplayerPrivateId, this.playerInfo = {}, this.declineCount = 0, this.setupEventHandlers(), h(function() {
                            return a.newNameReady()
                        }, function(e) {
                            return a.changedNameReady(e)
                        }), o.siteSettings.multiplayerGameInProgress && !o.qs.gid) {
                        var i = Math.max(0, o.siteSettings.playerRating - 3);
                        d.debug("Are on offline page, with multiplayerGameInProgress=true, decreasing playerRating by 3 points!"), o.siteSettings.set("playerRating", i), o.siteSettings.set("multiplayerGameInProgress", !1)
                    }
                    var n = this.tempStorage.get("connectlobby");
                    n && n > (new Date).getTime() && !o.qs.gid && this.connect()
                }
                var t = e.prototype;
                return t.newNameReady = function() {
                    $(".multiplayer-lobby-link").click()
                }, t.changedNameReady = function(e) {
                    e.newName !== e.oldName && ($(".player-" + o.siteSettings.multiplayerPublicId + " small").text(o.siteSettings.playerName), this.socket.emit("name-change", o.siteSettings.playerName))
                }, t.message = function(e) {
                    $("#challenge-lobby-message").html(e)
                }, t.showCover = function() {
                    $("#cover").fadeIn(200)
                }, t.hideCover = function() {
                    $("#cover").fadeOut(200)
                }, t.showDialog = function(e) {
                    this.showCover(), $(e).show()
                }, t.hideDialog = function(e) {
                    $(e).hide(), "#multiplayer-challenge-lobby" !== e && this.lobbyWindowOpen ? $("#multiplayer-challenge-lobby").show() : this.hideCover()
                }, t.setupEventHandlers = function() {
                    function e(e, t) {
                        return $(e).on("click", t.bind(a))
                    }
                    var a = this;
                    e(".multiplayer-lobby-link", this.openMultiplayerLobby), e(".close-multiplayer", this.closeMultiplayerLobby), e("#disconnect-lobby", this.manualDisconnect), e(".close-dialog", this.closeAllDialogs), $(".online-players-list").on("click", ".online-player", function(e) {
                        return a.sendChallenge(e)
                    }), e("#cancel-invite", this.cancelChallenge), e("#accept-multiplayer", this.acceptChallenge), e("#decline-multiplayer", this.declineChallenge), e("#decline-and-block-multiplayer", this.declineAndBlock)
                }, t.setupMessageHandlers = function() {
                    function e(e, t) {
                        return a.socket.on(e, t.bind(a))
                    }
                    var a = this;
                    e("connect", this.onConnect), e("disconnect", this.onDisconnect), e("connect_error", this.onConnectError), e("reconnection", this.onReconnect), e("start-game", this.onStartGame), e("players-online-full", this.onPlayersOnlineFull), e("players-online-delta", this.onPlayersOnlineDelta), e("online-count", this.onOnlineCount), e("name-change", this.onNameChange), e("challenge-received", this.challengeReceived), e("challenge-accepted", this.challengeAccepted), e("challenge-declined", this.challengeDeclined), e("challenge-cancelled", this.challengeCancelled), e("update-app", this.onUpdateApp)
                }, t.createConnectionUrl = function() {
                    var e, t = this.slug;
                    e = "cardgames.io" === location.hostname || "production" === o.qs.server || APP_MODE ? "https://" + t + ".cardgames.io/" : "https://dev.cardgames.io:3031/";
                    var a = o.siteSettings.players.bottom.code,
                        i = o.siteSettings.playerName,
                        n = o.siteSettings.playerRating;
                    return this.roomId && (t += "-" + this.roomId), e += "lobby", e += "?face=" + a + "&name=" + i + "&publicId=" + this.publicId + "&privateId=" + this.privateId + "&clientversion=" + siteVersion + "&game=" + t + "&type=challenge&rating=" + n
                }, t.openMultiplayerLobby = function(e) {
                    var t = this;
                    e.preventDefault(), o.mobileMenu.close(), this.lobbyWindowOpen = !0;
                    try {
                        window.sessionStorage.getItem("nothing")
                    } catch (e) {
                        return this.showDialog("#no-cookies"), $("#no-cookies").show(), void $("#no-cookies button").on("click", function(e) {
                            t.hideDialog("#no-cookies")
                        })
                    }
                    if (!o.siteSettings.playerName || "You" === o.siteSettings.playerName) return this.showDialog("#enter-name"), void $("#name-new").focus();
                    if (this.showDialog("#multiplayer-challenge-lobby"), o.isMobileLookActive()) {
                        var a = $("#challenge-lobby-message").height(),
                            i = $("#multiplayer-challenge-lobby .button-container").position().top - a - 52 - 20;
                        $(".online-players-list").height(Math.floor(i))
                    }
                    this.setReconnectExpiry(), this.connect(), this.socket && this.socket.connected && this.socket.emit("open-lobby-window")
                }, t.closeMultiplayerLobby = function() {
                    this.hideDialog("#multiplayer-challenge-lobby"), this.socket.emit("close-lobby-window"), this.lobbyWindowOpen = !1
                }, t.setReconnectExpiry = function() {
                    var e = (new Date).getTime() + 18e5;
                    this.tempStorage.set("connectlobby", e)
                }, t.closeAllDialogs = function() {
                    $(".multiplayer-dialog").hide(), this.lobbyWindowOpen ? $("#multiplayer-challenge-lobby").show() : this.hideCover()
                }, t.onUpdateApp = function() {
                    this.disconnect(), $("#multiplayer-button").text("Multiplayer"), this.message("Hi. It looks like you're using an old version of our app. Please update to the latest version to continue playing our multiplayer games 😎."), $("#disconnect-lobby").hide(), this.tempStorage.remove("connectlobby"), this.lobbyWindowOpen = !1
                }, t.manualDisconnect = function(e) {
                    e.preventDefault(), this.disconnect(), $("#multiplayer-button").text("Multiplayer"), $(".multiplayer-dialog").hide(), this.showDialog("#manual-disconnect"), this.tempStorage.remove("connectlobby"), this.lobbyWindowOpen = !1
                }, t.onStartGame = function(e) {
                    n(e, this.publicId), this.tempStorage.set(e.id, e), this.isStarting = !0, c.cancelGame(), location.href = "/" + this.slug + "/?gid=" + e.id
                }, t.setOnlineCount = function(e) {
                    10 <= e ? $("#multiplayer-button").text("Online (10+)") : $("#multiplayer-button").text("Online (" + e + ")"), e <= 1 ? this.message('You are the only player online. Just click "Close", if more players come online they\'ll see you and can challenge you to a game.') : this.message('These players are currently online. Click on them to challenge them to a game. <br>A player with <span class="checkmark">✓</span> has finished at least their last 3 games.')
                }, t.onPlayersOnlineFull = function(e) {
                    $("#connection-error").remove(), $(".online-player").each(function() {
                        var t = $(this).data("id");
                        e.find(function(e) {
                            return e.id === t
                        }) || $(this).remove()
                    });
                    var t = e,
                        a = Array.isArray(t),
                        i = 0;
                    for (t = a ? t : t[Symbol.iterator]();;) {
                        var n;
                        if (a) {
                            if (i >= t.length) break;
                            n = t[i++]
                        } else {
                            if ((i = t.next()).done) break;
                            n = i.value
                        }
                        var r = n;
                        0 === $(".player-" + r.id).length && this.createPlayerDiv(r), this.playerInfo[r.id] = r
                    }
                    this.setOnlineCount(e.length), this.updateScrollBars()
                }, t.onNameChange = function(e, t) {
                    e !== o.siteSettings.multiplayerPublicId && $(".player-" + e + " small").text(t)
                }, t.updateScrollBars = function() {
                    var e = $(".online-players-list"),
                        t = e.get(0);
                    t.scrollHeight > t.clientHeight ? e.addClass("large") : e.removeClass("large")
                }, t.onOnlineCount = function(e) {
                    this.setOnlineCount(e)
                }, t.sendChallenge = function(e) {
                    var t = $(e.currentTarget).data("id");
                    if (this.declineCount = 0, t === o.siteSettings.multiplayerPublicId) return $("#multiplayer-challenge-lobby").hide(), $("#challenge-yourself input").val(o.siteSettings.playerName), setTimeout(function() {
                        return $("#challenge-yourself input").focus()
                    }, 200), void this.showDialog("#challenge-yourself");
                    this.opponent = this.playerInfo[t], this.socket.emit("send-challenge", t), o.preloadBackgroundImage(o.getFaceUrl(this.opponent.face, !0)), this.showChallengeDialog("#challenge-sent")
                }, t.cancelChallenge = function() {
                    this.socket.emit("cancel-challenge", this.opponent.id), this.lobbyWindowOpen ? ($("#challenge-sent").hide(), $("#multiplayer-challenge-lobby").show()) : this.hideDialog("#challenge-sent"), delete this.opponent
                }, t.acceptChallenge = function() {
                    var e = this.tempStorage.get("declined-challenges", {});
                    delete e[this.opponent.id], this.tempStorage.set("declined-challenges", e), this.lobbyWindowOpen = !1, this.socket.emit("accept-challenge", this.opponent.id), this.showChallengeDialog("#challenge-accepted-you"), this.declineCount = 0
                }, t.declineAndBlock = function() {
                    var e = o.siteSettings.blocked;
                    e[this.opponent.id] = {
                        name: this.opponent.name,
                        face: this.opponent.face,
                        time: (new Date).getTime()
                    }, o.siteSettings.set("blocked", e), o.forceTrackEvent("BlockAfterChallenge", "User " + o.siteSettings.playerName + " has blocked user " + this.opponent.name), r(this.socket, Object.keys(e)), this.declineChallenge()
                }, t.declineChallenge = function() {
                    var e = this.tempStorage.get("declined-challenges", {});
                    e[this.opponent.id] ? e[this.opponent.id] += 1 : e[this.opponent.id] = 1, this.tempStorage.set("declined-challenges", e), this.socket.emit("decline-challenge", this.opponent.id), this.hideDialog("#challenge-received"), delete this.opponent, this.declineCount++, this.checkForDeclineLimit()
                }, t.checkForDeclineLimit = function() {
                    6 <= this.declineCount && (this.disconnect(), $("#multiplayer-button").text("Multiplayer"), $("#cover").hide(), $(".multiplayer-dialog").hide(), this.tempStorage.remove("connectlobby"), this.lobbyWindowOpen = !1, this.declineCount = 0)
                }, t.showChallengeDialog = function(e, t) {
                    void 0 === t && (t = !1), $(".multiplayer-dialog").hide(), $(e + " p span").text(this.opponent.name);
                    var a = o.getFaceUrl(this.opponent.face, t);
                    $(e + " .player-image").css("background-image", "url(" + a + ")"), 3 <= this.opponent.rating ? $(e + " .player-image").addClass("finisher") : $(e + " .player-image").removeClass("finisher"), this.showDialog(e)
                }, t.challengeReceived = function(e) {
                    this.opponent = e, o.preloadBackgroundImage(o.getFaceUrl(this.opponent.face, !0));
                    var t = this.tempStorage.get("declined-challenges", {})[e.id];
                    t && 2 <= t ? $("#decline-and-block-multiplayer").text("Decline & Block " + e.name).show() : $("#decline-and-block-multiplayer").hide(), this.showChallengeDialog("#challenge-received")
                }, t.challengeAccepted = function() {
                    this.lobbyWindowOpen = !1, this.showChallengeDialog("#challenge-accepted")
                }, t.challengeCancelled = function(e) {
                    if (this.opponent)
                        if (this.opponent.id === e) {
                            if ($("#challenge-accepted-you").is(":visible")) return this.showChallengeDialog("#challenge-cancelled", !0), void delete this.opponent;
                            if ($("#challenge-received").is(":visible")) return this.showChallengeDialog("#challenge-cancelled", !0), this.declineCount++, this.checkForDeclineLimit(), void delete this.opponent;
                            d.debug("Ignoring cancelled challenge from " + this.opponent.name + ", we have no dialog showing!"), delete this.opponent
                        } else d.debug("Ignoring cancelled challenge from id=" + e + ", we are being challenged by " + this.opponent.name);
                    else d.debug("Ignoring cancelled challenge from id=" + e)
                }, t.challengeDeclined = function(e, t) {
                    if (this.opponent && this.opponent.id === e) {
                        var a = ["Probably afraid of you.", "Maybe they had to go wash their hair.", "Maybe they spontaneously combusted.", "Perhaps they had a food related emergency.", "Probably knew how good you are at this game.", "Maybe afraid to lose!"];
                        d.debug("invite-rejected, reason=" + t);
                        var i = a[Math.floor(Math.random() * a.length)],
                            n = this.opponent.name,
                            r = "Sorry, " + n + " declined your challenge. " + i;
                        "disconnected" === t ? r = n + " has just disconnected and can't accept your challenge. Try someone else." : "challenging" === t ? r = n + " is currently challenging someone else and can't reply to your challenge. Try someone else." : "challenged" === t && (r = n + " is currently being challenged by someone else and can't respond to your challenge. Try someone else."), $("#challenge-declined p").text(r), this.showChallengeDialog("#challenge-declined", !0), delete this.opponent
                    }
                }, t.onPlayersOnlineDelta = function(e) {
                    var t = e.newPlayers,
                        a = Array.isArray(t),
                        i = 0;
                    for (t = a ? t : t[Symbol.iterator]();;) {
                        var n;
                        if (a) {
                            if (i >= t.length) break;
                            n = t[i++]
                        } else {
                            if ((i = t.next()).done) break;
                            n = i.value
                        }
                        var r = n;
                        0 === $(".player-" + r.id).length && this.createPlayerDiv(r), this.playerInfo[r.id] = r
                    }
                    var s = function() {
                            if (l) {
                                if (d >= o.length) return "break";
                                c = o[d++]
                            } else {
                                if ((d = o.next()).done) return "break";
                                c = d.value
                            }
                            var e = $(".player-" + c);
                            e.fadeOut(function() {
                                return e.remove()
                            })
                        },
                        o = e.removedPlayerIds,
                        l = Array.isArray(o),
                        d = 0;
                    for (o = l ? o : o[Symbol.iterator]();;) {
                        var c;
                        if ("break" === s()) break
                    }
                    this.message('These players are currently online. Click on them to challenge them to a game. <br>A player with <span class="checkmark">✓</span> has finished at least their last 3 games.'), this.setOnlineCount($(".online-player").length - e.removedPlayerIds.length), this.updateScrollBars(), $("#connection-error").remove()
                }, t.createPlayerDiv = function(e) {
                    var t = $("<span>").addClass("online-player").addClass("player-" + e.id).data("id", e.id).data("face", e.face),
                        a = "hair-" + (e.face.length <= 2 ? e.face : e.face.charAt(2)),
                        i = e.name;
                    e.id === this.publicId && i !== o.siteSettings.playerName && (i = o.siteSettings.playerName);
                    var n = o.getFaceUrl(e.face, !1),
                        r = $("<div>").addClass("face-small").addClass(a).css("background-image", "url(" + n + ")"),
                        s = $("<small>").text(i);
                    t.append(r).append(s), 3 <= e.rating && t.addClass("finisher"), t.appendTo(".online-players-list")
                }, t.showMessageBox = function(e, t) {
                    $("#error-message-box h3").text(e), $("#error-message-box p").text(t), $("#error-message-box").show()
                }, t.connect = function() {
                    if (o.qs.gid) this.message("You are already playing a multiplayer game, you can't start another one right now");
                    else {
                        if (!this.socket) {
                            var e = this.createConnectionUrl();
                            d.debug("Connection url: " + e), this.socket = io(e, {
                                reconnection: !0,
                                reconnectAttempts: 10
                            }), this.setupMessageHandlers()
                        }
                        this.socket.connected || this.socket.connect()
                    }
                }, t.disconnect = function() {
                    this.socket && this.socket.connected && this.socket.disconnect()
                }, t.onDisconnect = function(e) {
                    d.debug("Socket disconnected: " + e), "io server disconnect" === e && ($("#multiplayer-button").text("Multiplayer"), $(".multiplayer-dialog, #cover").hide(), this.tempStorage.remove("connectlobby"), this.lobbyWindowOpen = !1)
                }, t.onConnect = function() {
                    d.debug("Socket connected"), $("#connection-error").remove(), $("#multiplayer-challenge-lobby").is(":visible") && this.socket.emit("open-lobby-window"), r(this.socket, Object.keys(o.siteSettings.blocked)), this.setupVisibilityHandling()
                }, t.setupVisibilityHandling = function() {
                    var e = this;
                    if (!this.hasSetupVisibilityHandling) {
                        var t = !1;
                        document.addEventListener("visibilitychange", function() {
                            "hidden" === document.visibilityState && e.socket && e.socket.connected && (t = !0, d.debug("Disconnecting, page is hidden"), e.disconnect()), "visible" === document.visibilityState && t && (e.connect(), d.debug("Connecting, page is visible again!"), t = !1)
                        }), this.hasSetupVisibilityHandling = !0
                    }
                }, t.onReconnect = function(e) {
                    d.debug("Reconnected: " + e), $("#multiplayer-challenge-lobby").is(":visible") && this.socket.emit("open-lobby-window")
                }, t.onConnectError = function(e) {
                    d.error("Connection error: " + e), 0 === $("#connection-error").length && $(".online-players-list").html($("<div/>").attr("id", "connection-error").text("CONNECTION ERROR 😟").append($("<div/>").text("Trying to reconnect..."))), this.message("")
                }, e
            }();
        t.exports = p
    }, {
        "../helper-functions": 8,
        "../statistics": 17,
        "../temp-storage": 18,
        "../util": 19,
        "./multiplayer-util": 12,
        "./name-handler": 13
    }],
    10: [function(e, t, a) {
        "use strict";
        var h = e("../util"),
            o = e("../helper-functions").captainsLog,
            i = e("./multiplayer-util").normalizeTable,
            d = e("./speech-handler"),
            c = e("../temp-storage");
        h.qs.nodisconnect && h.cake("nodisconnect", "1", 100, "/");
        var n = function() {
            function e(e, t, a) {
                var i = this;
                this.slug = e, this.table = t, this.players = a, this.publicId = h.siteSettings.multiplayerPublicId, this.privateId = h.siteSettings.multiplayerPrivateId, this.handlers = {}, this.speechHandler = new d(function(e) {
                    return i.sendPhrase(e)
                }), this.receivedMoves = [{
                    nr: 0
                }], this.sentMoves = [{
                    nr: 0
                }], this.tempStorage = new c(e), this.pageLoadId = Math.floor(1e6 * Math.random());
                var n = function() {
                        if (s) {
                            if (o >= r.length) return "break";
                            l = r[o++]
                        } else {
                            if ((o = r.next()).done) return "break";
                            l = o.value
                        }
                        var t = l;
                        i.players.find(function(e) {
                            return e.multiplayerId === t.id
                        }).bot = t.bot
                    },
                    r = this.table.players,
                    s = Array.isArray(r),
                    o = 0;
                for (r = s ? r : r[Symbol.iterator]();;) {
                    var l;
                    if ("break" === n()) break
                }
                this.setupSubstituteMoves(), this.setupConcedeHandler(), this.setupRematchHandler(), this.setupTurnOffTimerHandler(), this.setupBlockMuteHandler(), $(document).on("visibilitychange", function() {
                    return i.visibilityChange()
                }), setTimeout(function() {
                    return i.startVisibility()
                }, 3e3), window.addEventListener("beforeunload", function() {
                    return i.beforeUnloadWindow()
                })
            }
            var t = e.prototype;
            return t.setupSubstituteMoves = function() {
                var n = this,
                    r = this.players,
                    e = function() {
                        if (a) {
                            if (s >= t.length) return "break";
                            o = t[s++]
                        } else {
                            if ((s = t.next()).done) return "break";
                            o = s.value
                        }
                        var i = o;
                        "bottom-player" === i.id ? i.shouldMakeSubstituteMove = function() {
                            return !1
                        } : i.shouldMakeSubstituteMove = function() {
                            if (!i.offline) return !1;
                            if (((new Date).getTime() - i.offline) / 1e3 < 10) return !1;
                            for (var e = r.indexOf(i), t = e + 1; t <= e + 3; t++) {
                                var a = r[t % r.length];
                                if (!a.offline) return a.multiplayerId === n.publicId
                            }
                            return !1
                        }
                    },
                    t = this.players,
                    a = Array.isArray(t),
                    s = 0;
                for (t = a ? t : t[Symbol.iterator]();;) {
                    var o;
                    if ("break" === e()) break
                }
            }, t.on = function(e, t) {
                this.handlers[e] || (this.handlers[e] = []), this.handlers[e].push(t)
            }, t.fireEvent = function(e, t) {
                if (this.handlers[e]) {
                    var a = this.handlers[e],
                        i = Array.isArray(a),
                        n = 0;
                    for (a = i ? a : a[Symbol.iterator]();;) {
                        var r;
                        if (i) {
                            if (n >= a.length) break;
                            r = a[n++]
                        } else {
                            if ((n = a.next()).done) break;
                            r = n.value
                        }
                        r({
                            type: e,
                            data: t
                        })
                    }
                }
            }, t.beforeUnloadWindow = function() {
                if (!this.gameFinished && h.siteSettings.multiplayerGameInProgress && 1 < this.onlinePlayerCount()) {
                    o.debug("Abandoning game that still has active players, setting rating to rating - 3"), h.siteSettings.set("multiplayerGameInProgress", !1);
                    var e = Math.max(0, h.siteSettings.playerRating - 3);
                    h.siteSettings.set("playerRating", e)
                }
                this.gameFinished || 2 !== this.table.playerCount.maxPlayers || this.sendMove({
                    type: "forcequit",
                    reason: "abandon",
                    playerId: this.players[0].multiplayerId
                })
            }, t.startVisibility = function(e) {
                var t = this;
                if (void 0 === e && (e = 1), "visible" === document.visibilityState && this.socket.connected) this.socket.emit("visible"), this.hidden = !1;
                else {
                    var a = this.tempStorage.get("lastvisibility");
                    if (a && "hidden" === a.visibility) {
                        var i = a.pageLoadId !== this.pageLoadId;
                        h.forceTrackEvent("StartVisible", "State: " + document.visibilityState + ", Connected: " + this.socket.connected + ", lastEventWasBeforeReload: " + i + ", Agent: " + navigator.userAgent + ", Attempt: " + e, 0, h.siteSettings.playerName), e <= 5 ? setTimeout(function() {
                            return t.startVisibility(e + 1)
                        }, 1e3) : this.socket.connected && (this.socket.emit("visible"), this.hidden = !1, this.tempStorage.set("lastvisibility", {
                            pageLoadId: this.pageLoadId,
                            time: (new Date).getTime(),
                            visibility: "visible",
                            forced: !0
                        }), h.forceTrackEvent("StartVisible", "Forced a visible event, even though state is: " + document.visibilityState, 0, h.siteSettings.playerName))
                    }
                }
            }, t.visibilityChange = function() {
                this.gameFinished || ("visible" === document.visibilityState ? this.socket.connected && (this.socket.emit("visible"), this.hidden = !1, this.tempStorage.set("lastvisibility", {
                    pageLoadId: this.pageLoadId,
                    time: (new Date).getTime(),
                    visibility: "visible"
                })) : "hidden" === document.visibilityState && this.socket.connected && (this.socket.emit("hidden"), this.hidden = !0, this.tempStorage.set("lastvisibility", {
                    pageLoadId: this.pageLoadId,
                    time: (new Date).getTime(),
                    visibility: "hidden"
                })))
            }, t.connect = function() {
                var a = this,
                    e = this.slug,
                    t = h.siteSettings.players.bottom.code,
                    i = h.siteSettings.playerName;
                if (!t || !i) throw new Error("No face or name, no connection can be made");
                var n = "https://" + this.table.hostname + "/lobby",
                    r = h.siteSettings.playerRating;
                n += "?face=" + t + "&name=" + i + "&publicId=" + this.publicId + "&privateId=" + this.privateId + "&clientversion=" + siteVersion + "&game=" + e + "&tableId=" + this.table.id + "&round=" + this.table.round + "&rating=" + r, o.debug("Connecting to " + n);
                this.socket = io(n, {
                    reconnection: !0,
                    reconnectAttempts: 10
                });

                function s(e, t) {
                    return a.socket.on(e, t.bind(a))
                }
                s("connect", this.onConnect), s("disconnect", this.onDisconnect), s("player-online", this.onPlayerOnline), s("player-offline", this.onPlayerOffline), s("table-state", this.onTableState), s("players-ready", this.onPlayersReady), s("move", this.onMove), s("next-table", this.onNextTable), s("speak", this.onSpeak), s("table-not-found", this.onTableNotFound), s("get-out", this.onGetOut), s("sync-moves", this.onSyncMoves), s("migrate", this.onMigrate), s("rematch", this.onRematch), s("turn-off-timer", this.onTurnOffTimer), s("check-visible", this.onCheckVisible), s("start-game", this.onStartGame), s("custom-message", this.onCustomMessage), $(".exit-multiplayer-game").on("click", function() {
                    return location.href = location.pathname
                }), this.speechHandler.enable()
            }, t.sendPhrase = function(e) {
                this._phraseTrack || (this._phraseTrack = []);
                try {
                    this._phraseTrack.push({
                        time: (new Date).getTime(),
                        id: e,
                        toString: function() {
                            return this.id + ":" + new Date(this.time).toISOString().substr(11)
                        }
                    })
                } catch (e) {}
                var t = (new Date).getTime();
                6 <= this._phraseTrack.length && t - this._phraseTrack[this._phraseTrack.length - 6].time < 1e3 && (h.forceTrackEvent("HackerMoron", "Sending phrases " + this._phraseTrack + " too quickly. Name: " + this.players[0].name + ", id: " + this.players[0].id), this._phraseTrack = []), this.checkMandalorianEasterEgg(e);
                var a = "";
                "your-turn" === e && (a = "Sent: " + this.sentMoves.length + ", received: " + this.receivedMoves.length, window.game && window.game.currentPlayer && (a += " CURRENT PLAYER ID " + window.game.currentPlayer.multiplayerId)), this.socket.emit("speak", e, a)
            }, t.checkMandalorianEasterEgg = function(e) {
                var a = this;
                "this-is-the-way" === e && (h.siteSettings.set("mandalorian", h.siteSettings.mandalorian + 1), 3 === h.siteSettings.mandalorian && ($(".m-name").text("Mandalorian"), this.showDialog("#mandalorian"), $("#mandalorian-no").on("click", function() {
                    h.trackEvent("Mandalorian", "No", 0, "", "", 1), a.hideDialog("#mandalorian")
                }), $("#mandalorian-yes").on("click", function() {
                    h.trackEvent("Mandalorian", "Yes", 0, "", "", 1);
                    var e = h.siteSettings.players;
                    e.bottom.code = "19", e.bottom.face = "/shared/images/svg/face-19.svg", e.bottom.faceSad = e.bottom.face, e.bottom.type = "classic", h.siteSettings.set("players", e);
                    var t = ".face-bottom-player, .face-bottom-player.sad { background-image:url(" + e.bottom.face + ");}";
                    $("<style/>").text(t).appendTo("head"), a.hideDialog("#mandalorian")
                })))
            }, t.showDialog = function(e) {
                $("#cover").fadeIn(), $(e).show()
            }, t.setupConcedeHandler = function() {
                var e = this;
                $("#concede").on("click", function() {
                    e.showDialog("#concede-dialog")
                }), $("#concede-dialog button").on("click", function() {
                    e.hideDialog("#concede-dialog")
                }), $("#concede-confirm").on("click", function() {
                    e.fireEvent("forcequit", {
                        player: e.players[0],
                        reason: "concede"
                    }), e.sendMove({
                        type: "forcequit",
                        reason: "concede",
                        playerId: e.players[0].multiplayerId
                    })
                })
            }, t.setupBlockMuteHandler = function() {
                var i, n = this;

                function r() {
                    $("#" + i.id + ", #block-mute .player-image").toggleClass("blocked", !!i.blocked), $("#block-player").text(i.blocked ? "Unblock" : "Block"), $("#" + i.id + ", #block-mute .player-image").toggleClass("muted", !!i.muted), $("#mute-player").text(i.muted ? "Unmute" : "Mute"), $("#block-mute h2").text("Block/mute " + i.name)
                }
                $("#top-player, #left-player, #right-player").on("click", function(e) {
                    if ("gofish" !== slug || 2 !== n.players[0].state) {
                        var t = e.currentTarget.id;
                        (i = n.players.find(function(e) {
                            return e.id === t
                        })).bot ? console.log("RETURNING BECAUSE BOT " + i.name) : (r(), $("#block-mute .player-image").removeClass("face-top-player, face-left-player, face-right-player").addClass("face-" + t), n.showDialog("#block-mute"), console.log("SHOWING DIALOG"))
                    } else console.log("RETURNING BECAUSE GO FISH " + i.name)
                }), $("#cancel-block-mute").on("click", function(e) {
                    i = null, n.hideDialog("#block-mute")
                }), $("#block-player").on("click", function(e) {
                    i.blocked = !i.blocked, r();
                    var t = i.blocked ? "Block" : "Unblock";
                    h.forceTrackEvent(t, "User " + n.players[0].name + " has " + t.toLowerCase() + "ed user " + i.name);
                    var a = h.siteSettings.blocked;
                    i.blocked ? a[i.multiplayerId] = {
                        name: i.name,
                        face: i.face,
                        time: (new Date).getTime()
                    } : delete a[i.multiplayerId], h.siteSettings.set("blocked", a)
                }), $("#mute-player").on("click", function(e) {
                    i.muted = !i.muted, r();
                    var t = i.muted ? "Mute" : "Unmute";
                    h.forceTrackEvent(t, "User " + n.players[0].name + " has " + t.toLowerCase() + "d user " + i.name);
                    var a = h.siteSettings.muted;
                    i.muted ? a[i.multiplayerId] = {
                        name: i.name,
                        face: i.face,
                        time: (new Date).getTime()
                    } : delete a[i.multiplayerId], h.siteSettings.set("muted", a)
                });
                var e = h.siteSettings.blocked,
                    t = h.siteSettings.muted,
                    a = this.players,
                    s = Array.isArray(a),
                    o = 0;
                for (a = s ? a : a[Symbol.iterator]();;) {
                    var l;
                    if (s) {
                        if (o >= a.length) break;
                        l = a[o++]
                    } else {
                        if ((o = a.next()).done) break;
                        l = o.value
                    }
                    var d = l;
                    e[d.multiplayerId] && (d.blocked = !0, $("#" + d.id).addClass("blocked")), t[d.multiplayerId] && (d.muted = !0, $("#" + d.id).addClass("muted"))
                }
            }, t.onCheckVisible = function() {
                this.socket.emit("confirm-visible", "visible" === document.visibilityState)
            }, t.setupRematchHandler = function() {
                var e = this;
                $("#rematch-yes").on("click", function() {
                    e.socket.emit("rematch", !0), 2 === e.table.players.length ? $("#rematch-text").text("Waiting for response from your opponent...") : $("#rematch-text").text("Waiting for response from others..."), $("#rematch-yes, #rematch-no").attr("disabled", "disabled")
                }), $("#rematch-no, #rematch-cancel").on("click", function() {
                    e.socket.emit("rematch", !1), $("#rematch").remove(), $("#suggest-rematch, .suggest-rematch").remove()
                }), $("#rematch-fail").on("click", function() {
                    $("#rematch").remove(), $("#suggest-rematch, .suggest-rematch").attr("disabled", "disabled")
                }), $("#suggest-rematch, .suggest-rematch").on("click", function() {
                    return e.suggestRematch()
                })
            }, t.setupTurnOffTimerHandler = function() {
                var e = this;
                if (this.table.noTimer) {
                    $("#ask-to-turn-off-timer").attr("disabled", "disabled"), o.debug("Timer already turned off for table in previous rounds!");
                    var t = this.players,
                        a = Array.isArray(t),
                        i = 0;
                    for (t = a ? t : t[Symbol.iterator]();;) {
                        var n;
                        if (a) {
                            if (i >= t.length) break;
                            n = t[i++]
                        } else {
                            if ((i = t.next()).done) break;
                            n = i.value
                        }
                        var r = n;
                        r.timer && r.timer.disable && (r.timer.disable(), o.debug("Turned off timer for " + r.name)), r._noTimer = !0
                    }
                } else !1 === this.table.noTimer && ($("#ask-to-turn-off-timer").attr("disabled", "disabled"), o.debug("Already asked for timer off on this table!")), $("#turn-off-timer-yes").on("click", function() {
                    e.socket.emit("turn-off-timer", !0), 2 === e.table.players.length ? $("#turn-off-timer-text").text("Waiting for response from your opponent...") : $("#turn-off-timer-text").text("Waiting for response from others..."), $("#turn-off-timer-yes, #turn-off-timer-no").attr("disabled", "disabled")
                }), $("#turn-off-timer-no").on("click", function() {
                    e.socket.emit("turn-off-timer", !1)
                }), $("#turn-off-timer-ok").on("click", function() {
                    $("#ask-to-turn-off-timer").attr("disabled", "disabled"), e.hideDialog("#turn-off-timer")
                }), void 0 === this.table.noTimer && $("#ask-to-turn-off-timer").on("click", function() {
                    e.socket.emit("turn-off-timer", !0), $("#phrases").fadeOut(200)
                })
            }, t.hideDialog = function(e) {
                $("#cover").fadeOut(), $(e).hide()
            }, t.onConnect = function() {
                if (this.visibilityChange(), o.debug("Socket connected!"), this.hideDialog("#reconnecting"), this.updatePhrases(), 1 < this.receivedMoves.length) {
                    var e = this.receivedMoves[this.receivedMoves.length - 1];
                    this.socket.emit("sync-moves", e.nr)
                }
            }, t.onRematch = function(t, e, a) {
                var i = this,
                    n = $("#rematch"),
                    r = this.players.find(function(e) {
                        return e.multiplayerId === t
                    });
                if (console.log("onRematch: " + a), this.gameFinished) {
                    if (a && h.forceTrackEvent("RematchActiveGame", t + " - " + r + ", delayed rematch worked!"), !n.is(":visible")) {
                        var s = this.players,
                            o = Array.isArray(s),
                            l = 0;
                        for (s = o ? s : s[Symbol.iterator]();;) {
                            var d;
                            if (o) {
                                if (l >= s.length) break;
                                d = s[l++]
                            } else {
                                if ((l = s.next()).done) break;
                                d = l.value
                            }
                            var c = d,
                                u = $("<div/>").addClass("rematch-face face-" + c.id);
                            $("#rematch-faces").append(u)
                        }
                        n.show()
                    }
                    r.rematch = e, this.players.every(function(e) {
                        return e.rematch
                    }) && ($("#rematch-text").text("The rematch is on! Setting up your game table..."), $("#rematch-yes, #rematch-no").attr("disabled", "disabled")), e ? $("#rematch-faces .face-" + r.id).addClass("rematch-yes") : ($("#rematch-faces .face-" + r.id).addClass("rematch-no").addClass("sad"), 2 === this.table.players.length ? $("#rematch-text").text("Sorry, your opponent didn't want a rematch.") : $("#rematch-text").text("Sorry, not everyone wanted a rematch."), $("#rematch-yes, #rematch-no, #rematch-cancel").hide(), $("#rematch-fail").show(), $("#suggest-rematch").remove())
                } else if (a) h.forceTrackEvent("RematchActiveGame", t + " - " + r + ". Was retry, stopping");
                else {
                    h.forceTrackEvent("RematchActiveGame", t + " - " + r + ". Trying again in 5 seconds.");
                    setTimeout(function() {
                        return i.onRematch(t, e, !0)
                    }, 5e3)
                }
            }, t.onTurnOffTimer = function(t, e) {
                var a = this;
                $("#ask-to-turn-off-timer").attr("disabled", "disabled").off("click");
                var i = $("#turn-off-timer"),
                    n = this.players.find(function(e) {
                        return e.multiplayerId === t
                    });
                if (!i.is(":visible") && !this.hasShownTimerDialog) {
                    var r = this.players,
                        s = Array.isArray(r),
                        o = 0;
                    for (r = s ? r : r[Symbol.iterator]();;) {
                        var l;
                        if (s) {
                            if (o >= r.length) break;
                            l = r[o++]
                        } else {
                            if ((o = r.next()).done) break;
                            l = o.value
                        }
                        var d = l,
                            c = $("<div/>").addClass("turn-off-timer-face face-" + d.id);
                        $("#turn-off-timer-faces").append(c)
                    }
                    t === this.publicId ? (2 === this.players.length ? $("#turn-off-timer-text").text("You have asked for the timer to be turned off. Waiting for your opponent to respond...") : $("#turn-off-timer-text").text("You have asked for the timer to be turned off. Waiting for the other players to respond..."), $("#turn-off-timer-yes, #turn-off-timer-no").hide(), $("#turn-off-timer-ok").attr("disabled", "disabled").show()) : $("#turn-off-timer-text").text(n.name + " is asking whether you would like to turn the timer off, so you can take as long as you want to play. Do you want to turn it off?"), this.showDialog("#turn-off-timer"), setTimeout(function() {
                        return a.hideDialog("#turn-off-timer")
                    }, 25e3), this.hasShownTimerDialog = !0, $("#turn-off-timer-text").height($("#turn-off-timer-text").height())
                }
                if (n.turnOffTimer = e, this.players.every(function(e) {
                        return e.turnOffTimer
                    })) {
                    $("#turn-off-timer h2").text("The timer is off!"), $("#turn-off-timer-text").text("The timer has been turned off! Now enjoy your very slow game!"), $("#turn-off-timer-yes, #turn-off-timer-no").hide(), $("#turn-off-timer-ok").show().removeAttr("disabled"), setTimeout(function() {
                        return a.hideDialog("#turn-off-timer")
                    }, 5e3);
                    var u = this.players,
                        h = Array.isArray(u),
                        p = 0;
                    for (u = h ? u : u[Symbol.iterator]();;) {
                        var m;
                        if (h) {
                            if (p >= u.length) break;
                            m = u[p++]
                        } else {
                            if ((p = u.next()).done) break;
                            m = p.value
                        }
                        var f = m;
                        f.timer && f.timer.disable && f.timer.disable(), f._noTimer = !0
                    }
                }
                e ? $("#turn-off-timer-faces .face-" + n.id).addClass("turn-off-timer-yes") : ($("#turn-off-timer h2").text("The timer will remain on!"), $("#turn-off-timer-faces .face-" + n.id).addClass("turn-off-timer-no").addClass("sad"), 2 === this.table.players.length ? t === this.publicId ? ($("#turn-off-timer-text").text("You didn't want to turn off the timer, it will remain on!"), $("#turn-off-timer").hide()) : $("#turn-off-timer-text").text("Sorry, your opponent didn't want to turn off the timer, it will remain on!") : t === this.publicId ? $("#turn-off-timer-text").text("You didn't want to turn off the timer, it will remain on!") : $("#turn-off-timer-text").text("Sorry, not everyone wanted to turn off the timer, it will remain on!"), $("#turn-off-timer-yes, #turn-off-timer-no").hide(), $("#turn-off-timer-ok").show().removeAttr("disabled"), setTimeout(function() {
                    return a.hideDialog("#turn-off-timer")
                }, 5e3))
            }, t.updatePhrases = function() {
                function a(e) {
                    $("#phrases-list, #emoji-list").html("");
                    var t = e.text,
                        a = Array.isArray(t),
                        i = 0;
                    for (t = a ? t : t[Symbol.iterator]();;) {
                        var n;
                        if (a) {
                            if (i >= t.length) break;
                            n = t[i++]
                        } else {
                            if ((i = t.next()).done) break;
                            n = i.value
                        }
                        var r = n;
                        $("<div/>", {
                            id: r.id
                        }).addClass("speak-bubble").text(r.text).appendTo("#phrases-list")
                    }
                    var s = e.emoji,
                        o = Array.isArray(s),
                        l = 0;
                    for (s = o ? s : s[Symbol.iterator]();;) {
                        var d;
                        if (o) {
                            if (l >= s.length) break;
                            d = s[l++]
                        } else {
                            if ((l = s.next()).done) break;
                            d = l.value
                        }
                        var c = d;
                        $("<div/>", {
                            id: c.id
                        }).addClass("emoji-speak").text(c.text).appendTo("#emoji-list")
                    }
                }
                $.get("https://cardgames.io/api/multiplayergames/phrases/").done(function(e) {
                    a(e), o.debug("Loading phrases from internet..."), h.siteSettings.set("multiplayerPhrases", e)
                }).fail(function(e) {
                    o.debug("Failed to load phrases: " + JSON.stringify(e)), h.trackEvent("PhrasesError", "Status: " + e.status + ", statusText: " + e.statusText, 0, "", "", 1);
                    var t = h.siteSettings.multiplayerPhrases;
                    t.emoji && (o.debug("Loading last good phrases"), a(t))
                })
            }, t.onStartGame = function(e) {
                this.tempStorage.remove("joinedtable"), i(e, this.publicId), this.tempStorage.set(e.id, e), location.href = "/" + this.slug + "/?gid=" + e.id
            }, t.suggestRematch = function() {
                this.gameFinished && (this.socket.emit("rematch", !0), $("#rematch-text").text("You suggested a rematch, waiting for response..."), $("#rematch-yes, #rematch-no").hide(), $("#rematch-cancel").show())
            }, t.reconnectStep = function() {
                var e = this,
                    t = 10 - Math.round(((new Date).getTime() - this.disconnectTime) / 1e3);
                this.socket.connected ? (this.hideDialog("#reconnecting"), delete this.disconnectTime) : t < 0 ? (this.socket.disconnect(), $("#reconnecting").hide(), $("#reconnecting-failed").show(), this.tempStorage.remove(h.qs.gid)) : ($("#reconnecting p span").text(t), setTimeout(function() {
                    return e.reconnectStep()
                }, 1e3))
            }, t.onGetOut = function() {
                this.gameFinished || 2 !== this.table.playerCount.maxPlayers && ($(".multiplayer-dialog").hide(), $("#cover").fadeIn(), $("#get-out").show(), this.socket.disconnect(), this.tempStorage.remove("scores"), h.deleteCake("results"))
            }, t.onDisconnect = function(e) {
                var t = this;
                o.debug("Socket disconnected. Reason: " + e), this.gameFinished || "io client disconnect" !== e && (this.disconnectTime = (new Date).getTime(), setTimeout(function() {
                    return t.reconnectStep()
                }), this.showDialog("#reconnecting"), h.forceTrackEvent("Disconnect", e, 0, this.table.hostname, (new Date).getUTCHours().toString()))
            }, t.onSyncMoves = function(e) {
                var t = this.sentMoves,
                    a = Array.isArray(t),
                    i = 0;
                for (t = a ? t : t[Symbol.iterator]();;) {
                    var n;
                    if (a) {
                        if (i >= t.length) break;
                        n = t[i++]
                    } else {
                        if ((i = t.next()).done) break;
                        n = i.value
                    }
                    var r = n;
                    r.nr > e && this.socket.emit("move", r)
                }
            }, t.onPlayersReady = function(e) {
                var t = this.players,
                    a = Array.isArray(t),
                    i = 0;
                for (t = a ? t : t[Symbol.iterator]();;) {
                    var n;
                    if (a) {
                        if (i >= t.length) break;
                        n = t[i++]
                    } else {
                        if ((i = t.next()).done) break;
                        n = i.value
                    }
                    var r = n;
                    e.includes(r.multiplayerId) && (r.offline = (new Date).getTime() - 2e4, r.bot ? $(".p-" + r.multiplayerId).removeClass("offline") : $(".p-" + r.multiplayerId).addClass("offline"))
                }
                this.gameStartTime = (new Date).getTime(), o.debug("Players ready"), this.table.isPrivate || (o.debug("Players ready, setting multiplayerGameInProgress to true"), h.siteSettings.set("multiplayerGameInProgress", !0)), this.fireEvent("players-ready")
            }, t.onTableNotFound = function() {
                this.gameFinished || this.showDialog("#table-not-found")
            }, t.onMigrate = function(e) {
                this.table.hostname = e, this.socket.off("disconnect"), this.socket.disconnect(), this.connect()
            }, t.onlinePlayerCount = function() {
                return this.players.filter(function(e) {
                    return !e.offline
                }).length
            }, t.onPlayerOnline = function(t) {
                delete this.players.find(function(e) {
                    return e.multiplayerId === t
                }).offline, o.debug("Player online: " + t), $(".p-" + t).removeClass("offline"), 1 < this.onlinePlayerCount() && !this.gameFinished && !this.table.isPrivate && (o.debug("More than us online, setting multiplayerGameInProgress to true"), h.siteSettings.set("multiplayerGameInProgress", !0))
            }, t.onPlayerOffline = function(t) {
                o.debug("Player offline: " + t);
                var e = this.players.find(function(e) {
                    return e.multiplayerId === t
                });
                e && (e.offline = (new Date).getTime(), $("#suggest-rematch").is(":visible") && !e.rematch && $("#suggest-rematch").attr("disabled", "disabled"), $("#rematch").is(":visible") && !e.rematch && this.onRematch(t, !1)), $(".p-" + t).addClass("offline"), 1 !== this.onlinePlayerCount() || this.gameFinished || (o.debug("Only us left, removing multiplayerGameInProgress"), h.siteSettings.set("multiplayerGameInProgress", !1))
            }, t.onTableState = function(e) {
                var a = this;
                $("#top-player .face-small, #left-player .face-small, #right-player .face-small").addClass("offline");
                var t = this.players.filter(function(e) {
                        return "bottom-player" !== e.id
                    }),
                    i = Array.isArray(t),
                    n = 0;
                for (t = i ? t : t[Symbol.iterator]();;) {
                    var r;
                    if (i) {
                        if (n >= t.length) break;
                        r = t[n++]
                    } else {
                        if ((n = t.next()).done) break;
                        r = n.value
                    }
                    r.offline = (new Date).getTime()
                }
                var s = function() {
                        if (l) {
                            if (d >= o.length) return "break";
                            c = o[d++]
                        } else {
                            if ((d = o.next()).done) return "break";
                            c = d.value
                        }
                        var t = c;
                        $(".p-" + t).removeClass("offline"), delete a.players.find(function(e) {
                            return e.multiplayerId === t
                        }).offline
                    },
                    o = e.onlinePlayers,
                    l = Array.isArray(o),
                    d = 0;
                for (o = l ? o : o[Symbol.iterator]();;) {
                    var c;
                    if ("break" === s()) break
                }
            }, t.onMove = function(t) {
                this.dmsg || (this.dmsg = "");
                try {
                    if (this.gameFinished) return void(this.dmsg += "\nDropped move because game finished");
                    try {
                        if (localStorage.dropmoves && Math.random() <= .2) return void o.debug("Dropping move " + t.nr)
                    } catch (e) {}
                    var e = this.receivedMoves[this.receivedMoves.length - 1];
                    if (t.nr <= e.nr) return this.dmsg += "\nDropped move nr " + t.nr + ", last nr was " + e.nr, void(t.resend ? o.debug("Got resent move " + t.nr + " that I didn't need") : h.trackEvent("OldMove", "Got move " + t.nr + ", last move nr was " + e.nr));
                    if (t.nr > e.nr + 1) return h.trackEvent("FutureMove", "Got move " + t.nr + ", last move nr was " + e.nr), this.socket.emit("sync-moves", e.nr), void(this.dmsg += "\nDropped move nr " + t.nr + ", last nr was " + e.nr);
                    this.receivedMoves.push(t);
                    var a = this.players.find(function(e) {
                        return e.multiplayerId === t.playerId
                    });
                    if (a) {
                        var i = a.multiplayerId === h.siteSettings.multiplayerPublicId && !t.substitute,
                            n = t.substitutePlayerId === h.siteSettings.multiplayerPublicId;
                        i ? o.debug("Not putting our own move in the queue") : n ? o.debug("Not putting our own subsitute move in the queue") : "forcequit" === t.type ? (h.siteSettings.set("multiplayerGameInProgress", !1), this.gameFinished || this.fireEvent("forcequit", {
                            player: a,
                            reason: t.reason
                        })) : a.multiplayerMoves.push(t)
                    } else h.trackEvent("MoveWithoutPlayer", "Move.playerId" + t.playerId + ", player ids: " + this.players.map(function(e) {
                        return e.multiplayerId
                    }).join(","), 0, "", "", 1)
                } catch (e) {
                    throw this.dmsg += "\nERROR IN onMove: " + e.toString(), h.forceTrackEvent("OnMoveError", e.toString()), e
                }
            }, t.onSpeak = function(t) {
                if ("your-turn" === t.phraseId && 1 === this.receivedMoves.length && t.playerId !== this.publicId) {
                    var e = "Got your turn, inital is: " + this.table.initialDealerId + ", our id is " + this.publicId + ", no moves received yet. TABLE: " + JSON.stringify(this.table) + ", \nDEBUG: " + t.debugMsg;
                    h.forceTrackEvent("YourTurnStart4", e + "DMSG: " + this.dmsg)
                }
                window.opponentTurn && "your-turn" === t.phraseId && t.playerId !== this.publicId && h.trackEvent("YourTurnBad", "Our publicId: " + this.publicId + ", receivedMoves: " + JSON.stringify(this.receivedMoves) + ", MOVEERR: " + window.moveError, 0, "", "", 1), this.players.find(function(e) {
                    return e.multiplayerId === t.playerId
                }).muted || this.speechHandler.receivePhrase(t.phraseId, t.playerId)
            }, t.onNextTable = function(e) {
                o.debug("Got the table for round " + e.round), i(e, this.publicId), this.tempStorage.set(e.id, e), this.fireEvent("next-table", e)
            }, t.sendMove = function(e) {
                e.nr = this.sentMoves[this.sentMoves.length - 1].nr + 1, this.sentMoves.push(e);
                try {
                    if (localStorage.dropmoves && Math.random() <= .2) return void o.debug("Dropping move " + e.nr)
                } catch (e) {}
                this.socket.emit("move", e)
            }, t.sendCustomMessage = function(e) {
                this.socket.emit("custom-message", e)
            }, t.onCustomMessage = function(e) {
                this.fireEvent("custom-message", e)
            }, t.sendResult = function(e, t) {
                void 0 === t && (t = !0);
                if (o.debug("Sending result: " + JSON.stringify(e)), this.socket.emit("result", e), this.gameFinished = !0, e.finished) {
                    this.tempStorage.remove(h.qs.gid);
                    try {
                        window.history.pushState("", document.title, location.pathname)
                    } catch (e) {}
                    this.players.every(function(e) {
                        return !e.offline || e.bot
                    }) && "abandon" !== e.endReason && $("#suggest-rematch").css("display", "inline-block");
                    var a = (new Date).getTime() - this.gameStartTime;
                    "abandon" === e.endReason || "concede" === e.endReason && a < 18e4 || (o.debug("Increasing rating by 1, endReason was " + e.endReason + ", elapsed time was " + a + "ms"), h.siteSettings.set("playerRating", Math.min(20, h.siteSettings.playerRating + 1)), h.siteSettings.set("multiplayerGameInProgress", !1))
                } else if (t) {
                    $("#start-new-game").text("Start next round");
                    var i = (new Date).getTime(),
                        n = setInterval(function() {
                            var e = (new Date).getTime() - i,
                                t = Math.round((2e4 - e) / 1e3);
                            $("#multiplayer-refresh-countdown span").text(t), t <= 10 && $("#multiplayer-refresh-countdown").show(), t <= 0 && (clearInterval(n), h.ads.trigger(h.reloadPage))
                        }, 1e3);
                    $(".multiplayer-start-next-round").on("click", function() {
                        clearInterval(n)
                    })
                }
            }, e
        }();
        t.exports = n
    }, {
        "../helper-functions": 8,
        "../temp-storage": 18,
        "../util": 19,
        "./multiplayer-util": 12,
        "./speech-handler": 15
    }],
    11: [function(e, t, a) {
        "use strict";
        var A = e("../util"),
            i = e("./multiplayer-util"),
            n = i.normalizeTable,
            r = i.emitBlockList,
            s = i.randomId,
            o = i.setupMultiplayerLogging,
            I = e("../helper-functions").captainsLog,
            l = e("../temp-storage"),
            d = e("./name-handler"),
            c = e("../statistics"),
            u = e("../api");
        $.fn.setDisabled = function(e) {
            return e ? this.attr("disabled", "disabled") : this.removeAttr("disabled")
        };
        var h = function() {
            function e(e, t) {
                if (this.slug = e, this.playerCount = t, this.tempStorage = new l(e), o(), this.tables = {}, A.siteSettings.multiplayerPublicId || (A.siteSettings.set("multiplayerPublicId", s()), A.siteSettings.set("multiplayerPrivateId", s())), this.publicId = A.siteSettings.multiplayerPublicId, this.privateId = A.siteSettings.multiplayerPrivateId, this.setupEventHandlers(), this.setupMultiplayerButton(), d(function() {
                        return $(".multiplayer-lobby-link").click()
                    }), A.siteSettings.multiplayerGameInProgress && !A.qs.gid) {
                    var a = Math.max(0, A.siteSettings.playerRating - 3);
                    I.debug("Are on offline page, with multiplayerGameInProgress=true, decreasing playerRating by 3 points!"), A.siteSettings.set("playerRating", a)
                }
                this.hasJoinedTable() && this.connect()
            }
            var t = e.prototype;
            return t.message = function(e) {
                $("#lobby-message span").text(e)
            }, t.setupMultiplayerButton = function() {
                var a = this;
                $(".multiplayer-lobby-link").on("touchstart click", function(e) {
                    e.preventDefault(), A.mobileMenu.close();
                    try {
                        window.sessionStorage.getItem("nothing")
                    } catch (e) {
                        return $("#cover").fadeIn(), $("#no-cookies").show(), void $("#no-cookies button").on("click", function(e) {
                            $("#cover").fadeOut(), $("#no-cookies").hide()
                        })
                    }
                    if (!A.siteSettings.playerName || "You" === A.siteSettings.playerName) return $("#cover").fadeIn(), $("#enter-name").show(), void $("#name-new").focus();
                    $("#cover").fadeIn(), $("#multiplayer-lobby").show();
                    var t = $("#private").position().top - ($("#lobby-message").position().top + $("#lobby-message").height()) - 10;
                    $("#multiplayer-lobby-tables").height(Math.floor(t)), a.connect()
                }), $("#multiplayer-lobby-close").on("click", function(e) {
                    $("#cover").fadeOut(), $("#multiplayer-lobby").hide(), a.hasJoinedTable() || a.disconnect()
                }), A.qs.join && $("#multiplayer-button").click()
            }, t.validateJoinTableCode = function() {
                $("#join-table-code").val().match(/^\d\d\d\d\d\d$/) ? $("#join-table-ok").setDisabled(!1) : $("#join-table-ok").setDisabled(!0)
            }, t.setupEventHandlers = function() {
                function e(e, t) {
                    return $(e).on("click", t.bind(a))
                }
                var a = this;
                e("#leave-table", this.leaveTable), e("#create-private-table", this.createPrivateTable), e("#join-private-table", this.openJoinTableDialog), e("#join-table-ok", this.joinPrivateTable), $("#multiplayer-lobby").on("click", ".add-bot", function(e) {
                    var t = $(e.target).attr("data-id");
                    a.socket.emit("add-bot", t)
                }), $("#multiplayer-lobby-close").on("click", function() {
                    return $("#multiplayer-lobby").hide()
                }), $("#error-message-box button").on("click", function() {
                    return $("#error-message-box").hide()
                }), $("#join-table-code").on("input", function() {
                    return a.validateJoinTableCode()
                }), $("#join-table-cancel").on("click", function() {
                    $("#join-table-code").val(""), $("#join-private-table-dialog").hide()
                }), $("#multiplayer-lobby-tables").on("click", ".multiplayer-table", function(e) {
                    return a.joinTable(e.currentTarget.id)
                })
            }, t.setupMessageHandlers = function() {
                function e(e, t) {
                    return a.socket.on(e, t.bind(a))
                }
                var a = this;
                e("connect", this.onConnect), e("disconnect", this.onDisconnect), e("connect_error", this.onConnectError), e("reconnection", this.onReconnect), e("private-table-created", this.onPrivateTableCreated), e("table-joined", this.onTableJoined), e("table-left", this.onTableLeft), e("table-changed", this.onTableChanged), e("table-list", this.onTableList), e("table-already-joined", this.onTableAlreadyJoined), e("table-full", this.onTableFull), e("table-not-found", this.onTableNotFound), e("player-blocked", this.onPlayerBlocked), e("table-remove", this.onTableRemove), e("start-game", this.onStartGame), e("start-countdown", this.onStartCountdown), e("update-app", this.onUpdateApp), e("blocked", this.onBlocked), $(".lobby-dialog input").on("focus", function(e) {
                    setTimeout(function() {
                        return $(e.target).select()
                    }, 0)
                }), $("#private-table-created button").on("click", function() {
                    return $("#private-table-created").hide()
                })
            }, t.createConnectionUrl = function() {
                var e, t = this.slug;
                e = "cardgames.io" === location.hostname || "production" === A.qs.server || APP_MODE ? "https://" + t + ".cardgames.io/" : "https://dev.cardgames.io:3031/", e += "lobby";
                var a = {
                        face: A.siteSettings.players.bottom.code,
                        name: A.siteSettings.playerName,
                        publicId: this.publicId,
                        privateId: this.privateId,
                        clientversion: siteVersion,
                        rating: A.siteSettings.playerRating,
                        game: t,
                        type: "jointable",
                        minPlayers: this.playerCount.minPlayers,
                        maxPlayers: this.playerCount.maxPlayers
                    },
                    i = "?";
                for (var n in a) e += "" + i + n + "=" + a[n], i = "&";
                return e
            }, t.hasJoinedTable = function() {
                return this.tempStorage.get("joinedtable", !1)
            }, t.onTableList = function(e) {
                var t = this;
                I.debug("Got list of tables: \n" + JSON.stringify(e)), $("#multiplayer-lobby-tables").html("");
                var a = e.find(function(e) {
                    return e.players.some(function(e) {
                        return e.id === t.publicId
                    })
                });
                a && (I.debug("We have joined one of these tables: " + a.id), this.tableId = a.id), this.setJoinedState(!!a);
                var i = e,
                    n = Array.isArray(i),
                    r = 0;
                for (i = n ? i : i[Symbol.iterator]();;) {
                    var s;
                    if (n) {
                        if (r >= i.length) break;
                        s = i[r++]
                    } else {
                        if ((r = i.next()).done) break;
                        s = r.value
                    }
                    var o = s;
                    this.onTableChanged(o), o.isPrivate && $("#" + o.id).addClass("private-table"), o.isPremium && $("#" + o.id).addClass("premium-table")
                }
                A.qs.join && (this.openJoinTableDialog(), $("#join-table-code").val(A.qs.join), this.validateJoinTableCode(), A.qs.join = !1)
            }, t.onTableRemove = function(e) {
                delete this.tables[e], $("#" + e).remove()
            }, t.onTableAlreadyJoined = function() {
                this.message("You have already joined that table, you can't join it again.")
            }, t.onTableNotFound = function() {
                delete this.tableId, this.setJoinedState(!1), this.message("Whoops, we can't find that table on our servers. Try joining another table!"), $("#join-text").addClass("error").text("Table doesn't exist!"), $("#join-table-ok").setDisabled(!1), $("#join-table-cancel").setDisabled(!1), $("#join-table-code").setDisabled(!1)
            }, t.onPlayerBlocked = function() {
                delete this.tableId, this.setJoinedState(!1), this.message("A player on this table has blocked you. Try joining another table!"), $("#join-table-ok").setDisabled(!1), $("#join-table-cancel").setDisabled(!1), $("#join-table-code").setDisabled(!1)
            }, t.onStartCountdown = function(e) {
                var t = this;
                this.message("The game will start in " + e + " seconds..."), this.targetStart = {
                    time: (new Date).getTime() + 1e3 * e
                }, this.targetStart.intervalId = setInterval(function() {
                    var e = Math.ceil((t.targetStart.time - (new Date).getTime()) / 1e3);
                    0 <= e ? t.message("The game will start in " + e + " seconds...") : t.message("The game is about to start...")
                })
            }, t.onStartGame = function(e) {
                this.tempStorage.remove("joinedtable"), n(e, this.publicId), c.cancelGame(), this.tempStorage.set(e.id, e), location.href = "/" + this.slug + "/?gid=" + e.id
            }, t.onTableFull = function() {
                delete this.tableId, this.setJoinedState(!1), this.message("Sorry, that table just became full, try joining another table!")
            }, t.showMessageBox = function(e, t) {
                $("#error-message-box h3").text(e), $("#error-message-box p").text(t), $("#error-message-box").show()
            }, t.createPrivateTable = function(e) {
                e.preventDefault(), this.tableId ? this.showMessageBox("Can't create table", "You have already joined a table. You must first leave that table if you want to create a new private table.") : this.socket.emit("create-private-table", this.playerCount)
            }, t.openJoinTableDialog = function(e) {
                e && e.preventDefault(), $("#private-table-created").hide(), this.tableId ? this.showMessageBox("Can't join private table", "You have already joined a table. You must first leave that table if you want to join another private table.") : ($("#join-table-ok").setDisabled(!0), $("#join-table-cancel").setDisabled(!1), $("#join-table-code").setDisabled(!1), $("#join-text").text("Please enter the code for the table:").removeClass("error"), $("#join-private-table-dialog").show(), e && $("#join-table-code").focus(), $("#join-table-code").off("keypress").on("keypress", function(e) {
                    13 !== e.keyCode || $("#join-table-ok").attr("disabled") || $("#join-table-ok").click()
                }))
            }, t.joinPrivateTable = function() {
                $("#join-table-ok").setDisabled(!0), $("#join-table-cancel").setDisabled(!0), $("#join-table-code").setDisabled(!0), $("#join-text").text("Attempting to join table..."), this.socket.emit("join-table", parseInt($("#join-table-code").val()))
            }, t.leaveTable = function() {
                this.socket.emit("leave-table", this.tableId), $(".increase-margin").removeClass("increase-margin")
            }, t.onPrivateTableCreated = function(e) {
                I.debug("Table was created: " + JSON.stringify(e)), this.setJoinedState(!0), $("#table-code").val(e.code);
                var t = "https://" + location.hostname;
                location.port && "80" != location.port && (t += ":" + location.port), $("#table-code-link").val(t + "/" + this.slug + "/?join=" + e.code), this.tableId = e.id, this.onTableChanged(e), $("#private-table-created").show()
            }, t.createPlayerDiv = function(e, t) {
                var i = this,
                    a = $("<div/>").attr("id", e.id).attr("data-table-id", t.id).addClass("table-player").addClass(e.cssClass).css("background-image", "url(" + A.getFaceUrl(e.face)).append($("<label/>").text(e.name));
                return 3 <= e.rating && a.addClass("finisher"), e.bot && t.players[0].id === A.siteSettings.multiplayerPublicId && a.on("click", function(e) {
                    var t = $(e.target).attr("data-table-id"),
                        a = e.target.id;
                    i.socket.emit("remove-bot", t, a)
                }), a
            }, t.joinTable = function(e) {
                var t = this;
                if (!this.tableId) {
                    var a, i = A.siteSettings.blocked,
                        n = this.tables[e];
                    if (n && (a = n.players.find(function(e) {
                            return i[e.id]
                        })), a) {
                        $("#cover").fadeIn();
                        var r = "This table has a player, " + a.name + ", that you have blocked",
                            s = i[a.id].name;
                        a.name !== s ? r += ' (they were called "' + s + '" when you blocked them). ' : r += ". ", r += "Are you sure you want to join this table?", $("#confirm-join-blocked-player p").text(r), $("#confirm-join-blocked-player").show(), $("#join-blocked-no").off().on("click", function() {
                            $("#confirm-join-blocked-player").hide(), u.forceTrackEvent("JoinBlockedTableNo", A.siteSettings.playerName + " said no to joining table with blocked player " + a.name)
                        }), $("#join-blocked-yes").off().on("click", function() {
                            $("#confirm-join-blocked-player").hide(), t.tableId = e, t.setJoinedState(!0), t.socket.emit("join-table", e), u.forceTrackEvent("JoinBlockedTableYes", A.siteSettings.playerName + " said yes to joining table with blocked player " + a.name)
                        })
                    } else this.tableId = e, this.setJoinedState(!0), this.socket.emit("join-table", e)
                }
            }, t.setJoinedState = function(e) {
                $("#create-private-table").setDisabled(e), $("#join-private-table").setDisabled(e), e ? (this.playerCount.minPlayers === this.playerCount.maxPlayers ? this.message("The game will start when your table is full.") : this.message("The game will start when at least " + this.playerCount.minPlayers + " have joined."), $("body").addClass("joined"), $("#" + this.tableId).addClass("my-table"), this.tempStorage.set("joinedtable", !0)) : (this.message("Click a table to join a game."), $(".my-table").removeClass("my-table"), $("body").removeClass("joined"), this.tempStorage.set("joinedtable", !1))
            }, t.onTableJoined = function(e) {
                this.tableId = e, this.setJoinedState(!0), $("#join-private-table-dialog").hide()
            }, t.onTableLeft = function() {
                delete this.tableId, this.message("You have left the table. Click a table to join a game."), this.targetStart && (clearInterval(this.targetStart.intervalId), delete this.targetStart), this.setJoinedState(!1)
            }, t.onTableChanged = function(i) {
                var t = this,
                    e = (this.tables[i.id] = i).players.find(function(e) {
                        return e.id === t.publicId
                    });
                if (e) {
                    var a = i.players.indexOf(e);
                    if (this.targetStart && i.players.length < this.playerCount.minPlayers && (clearInterval(this.targetStart.intervalId), delete this.targetStart, this.message("The game will start when at least " + this.playerCount.minPlayers + " have joined.")), e.cssClass = "bottom", e.name = A.siteSettings.playerName, 4 === this.playerCount.minPlayers) {
                        for (var n = ["left", "top", "right"], r = a + 1; r < a + 4; r++) i.players[r] && (i.players[r].cssClass = n.shift());
                        n = ["left", "top", "right"];
                        for (var s = a - 1; 0 <= s; s--) i.players[s] && (i.players[s].cssClass = n.pop())
                    } else if (3 === this.playerCount.minPlayers) {
                        for (var o = ["left", "top", "right"], l = a + 1; l < a + 4; l++) i.players[l] && (i.players[l].cssClass = o.shift());
                        o = ["left", "top"];
                        for (var d = a - 1; 0 <= d; d--) i.players[d] && (i.players[d].cssClass = o.pop())
                    } else if (2 === this.playerCount.minPlayers && 4 === this.playerCount.maxPlayers) {
                        var c = i.players;
                        if (2 === c.length) c[(a + 1) % 2].cssClass = "top";
                        else if (2 < c.length)
                            for (var u = ["left", "top", "right"], h = 0; h < c.length - 1; h++) c[(a + h + 1) % c.length].cssClass = u[h]
                    }
                } else if (4 === this.playerCount.minPlayers)
                    for (var p = ["bottom", "left", "top", "right"], m = i.players.length - 1; 0 <= m; m--) i.players[m].cssClass = p.pop();
                else if (3 === this.playerCount.minPlayers)
                    for (var f = ["bottom", "left", "top"], g = i.players.length - 1; 0 <= g; g--) i.players[g].cssClass = f.pop();
                else if (2 === this.playerCount.minPlayers && 4 === this.playerCount.maxPlayers) {
                    var y = i.players;
                    if (1 === y.length) y[0].cssClass = "top";
                    else if (2 <= y.length)
                        for (var b = ["left", "top", "right", "bottom"], v = 0; v < y.length; v++) y[v].cssClass = b[v]
                }
                var k = $("#" + i.id);
                0 === k.length && (k = $("<div/>", {
                    id: i.id,
                    "class": "multiplayer-table"
                }).appendTo("#multiplayer-lobby-tables"), i.isPrivate && (k.append($("<div/>").addClass("code").text(i.code)), k.addClass("private-table"), 1 <= i.players.length && i.players[0].id === A.siteSettings.multiplayerPublicId && (k.append($("<button/>").text("Add bot").addClass("add-bot").attr("data-id", i.id)), $("#multiplayer-lobby-tables").addClass("increase-margin"))), i.isPremium && $("#" + i.id).addClass("premium-table")), i.id === this.tableId && k.addClass("my-table"), k.find("div").each(function() {
                    var t = $(this).attr("id"),
                        e = i.players.find(function(e) {
                            return e.id === t
                        }),
                        a = $("#" + t);
                    e ? a.hasClass(e.cssClass) || a.removeClass("top left right bottom").addClass(e.cssClass) : a.remove()
                });
                var w = i.players,
                    C = Array.isArray(w),
                    S = 0;
                for (w = C ? w : w[Symbol.iterator]();;) {
                    var T;
                    if (C) {
                        if (S >= w.length) break;
                        T = w[S++]
                    } else {
                        if ((S = w.next()).done) break;
                        T = S.value
                    }
                    var E = T;
                    if (0 === $("#" + E.id).length) this.createPlayerDiv(E, i).appendTo(k)
                }
                I.debug("Table changed: " + i.id)
            }, t.connect = function() {
                if (A.qs.gid) return this.message("You are already playing a multiplayer game, you can't start another one right now"), void $("#private").hide();
                if (!this.socket) {
                    var e = this.createConnectionUrl();
                    I.debug("Connection url: " + e), this.socket = io(e, {
                        reconnection: !0,
                        reconnectAttempts: 10
                    }), this.setupMessageHandlers()
                }
                this.socket.connected || this.socket.connect()
            }, t.onUpdateApp = function() {
                this.disconnect(), this.message("Hi. It looks like you're using an old version of our app. Please update to the latest version to continue playing our multiplayer games 😎."), $("#private").hide(), this.tempStorage.remove("connectlobby"), this.lobbyWindowOpen = !1
            }, t.onBlocked = function(e) {
                var t = Math.ceil(e.msLeft / 6e4);
                this.message("You are blocked from joining new games for the next " + t + " minutes.");
                var a = A.siteSettings;
                A.forceTrackEvent("BlockedLobbyClient", "Rating is: " + a.playerRating + ", name: " + a.playerName), $("#private").css("visibility", "hidden"), this.disconnect()
            }, t.disconnect = function() {
                this.socket && this.socket.connected && this.socket.disconnect()
            }, t.onDisconnect = function(e) {
                I.debug("Socket disconnected: " + e)
            }, t.onConnect = function() {
                I.debug("Socket connected"), $("#private").css("visibility", "visible"), r(this.socket, Object.keys(A.siteSettings.blocked))
            }, t.onReconnect = function(e) {
                I.debug("Reconnected: " + e)
            }, t.onConnectError = function(e) {
                $("#multiplayer-lobby-tables").html($("<div/>").attr("id", "connection-error").text("CONNECTION ERROR 😟").append($("<div/>").text("Trying to reconnect..."))), I.error("Connection error: " + e), this.setJoinedState(!1)
            }, e
        }();
        t.exports = h
    }, {
        "../api": 1,
        "../helper-functions": 8,
        "../statistics": 17,
        "../temp-storage": 18,
        "../util": 19,
        "./multiplayer-util": 12,
        "./name-handler": 13
    }],
    12: [function(e, t, a) {
        "use strict";
        var c = e("../util"),
            r = e("../helper-functions").captainsLog,
            s = setInterval,
            i = clearInterval;
        var n = function() {
            function e(e) {
                this.showMessage = e
            }
            var t = e.prototype;
            return t.disable = function() {
                try {
                    this.showMessage("Timer is turned off!")
                } catch (e) {
                    $("#message, #messageBox p").text("Timer is turned off!")
                }
                this.disabled = !0
            }, t.start = function(a, i, n) {
                var r = this;
                if (!this.disabled) {
                    this.waitStart = (new Date).getTime(), n = n || "Can't leave the other players waiting too long! We will play a random card for you in $REMAINING$ seconds...", this.stop(), this.timeoutId = s(function() {
                        if (r.disabled) r.stop();
                        else {
                            $("#turn-off-timer").is(":visible") && (r.waitStart += 1e3);
                            var e = Math.round(((new Date).getTime() - r.waitStart) / 1e3),
                                t = a - e;
                            t <= 10 && (r.showMessage(n.replace("$REMAINING$", Math.max(0, t))), t <= -1 && (i(), r.stop()))
                        }
                    }, 1e3)
                }
            }, t.isActive = function() {
                return !!this.timeoutId
            }, t.stop = function() {
                this.timeoutId && (i(this.timeoutId), delete this.timeoutId)
            }, e
        }();
        t.exports = {
            normalizeTable: function(e, t) {
                for (var a = 0; e.players[0].id !== t;) {
                    var i = e.players.pop();
                    if (e.players.unshift(i), 5 < ++a) throw new Error("Human player with id " + t + " not found!")
                }
                e.players[0].pos = "bottom";
                var n = e.players.length;
                2 === n ? e.players[1].pos = "top" : 3 === n ? (e.players[1].pos = "left", e.players[2].pos = "top") : 4 === n && (e.players[1].pos = "left", e.players[2].pos = "top", e.players[3].pos = "right"), e.facedata = {};
                var r = e.players,
                    s = Array.isArray(r),
                    o = 0;
                for (r = s ? r : r[Symbol.iterator]();;) {
                    var l;
                    if (s) {
                        if (o >= r.length) break;
                        l = r[o++]
                    } else {
                        if ((o = r.next()).done) break;
                        l = o.value
                    }
                    var d = l;
                    e.facedata[d.pos] = {
                        name: d.name,
                        face: c.getFaceUrl(d.face),
                        faceSad: c.getFaceUrl(d.face, !0),
                        code: d.face,
                        type: "custom"
                    }
                }
            },
            emitBlockList: function(e, t) {
                if (0 === t.length) e.emit("blocklist", []), r.debug("Emitting empty blocklist");
                else {
                    for (var a = 0, i = 0; i < t.length; i += 300) {
                        var n = t.slice(i, i + 300);
                        r.debug("Sending batch with " + n.length + " items, from " + i + " to " + (i + 300)), a += n.length, e.emit("blocklist", n, 0 < i)
                    }
                    r.debug("Emitted " + a + " blocked ids"), 500 < t.length && !c.cake("largeblocklist") && (c.forceTrackEvent("LargeBlockList", "Player " + c.siteSettings.playerName + " has blocklist with " + t.length + " items"), c.cake("largeblocklist", "1", 30, "/"))
                }
            },
            AutoPlayTimer: n,
            randomId: function() {
                var e = "abcdefghijklmnopqrstuvwxyz";
                e += e.toUpperCase();
                for (var t = "", a = 0; a < 14; a++) t += e.charAt(Math.floor(Math.random() * e.length));
                return t + (new Date).getMilliseconds()
            },
            setupMultiplayerLogging: function() {
                if ("dev.cardgames.io" === location.hostname || c.qs.debug || 1 == c.qs.debug) {
                    try {
                        localStorage.debug = "socket.io-client:socket"
                    } catch (e) {}
                    r.level = "debug"
                }
            }
        }
    }, {
        "../helper-functions": 8,
        "../util": 19
    }],
    13: [function(e, t, a) {
        "use strict";
        var s = e("../util"),
            o = e("./names");
        t.exports = function(t, i) {
            function n(e) {
                return e.replace(/^\s*|\s*$/g, "")
            }

            function e(a, i) {
                $(a).on("input", function(e) {
                    var t = n($(a).val());
                    o.validateName(t).isValid ? $(i).removeAttr("disabled") : $(i).attr("disabled", "disabled")
                })
            }

            function r(e) {
                s.siteSettings.set("playerName", e);
                var t = s.siteSettings.players;
                t.bottom.name = e, s.siteSettings.set("players", t), $(".bottom-player-name").text(e)
            }
            e("#name-new", "#confirm-name-new"), e("#name-change", "#confirm-name-change"), $("#confirm-name-new").on("click", function(e) {
                $("#enter-name").hide(), r(n($("#name-new").val())), t()
            }), $("#confirm-name-change").on("click", function(e) {
                $("#challenge-yourself").hide(), $("#multiplayer-challenge-lobby").show();
                var t = s.siteSettings.playerName,
                    a = n($("#name-change").val());
                r(a), i({
                    oldName: t,
                    newName: a
                })
            }), $("#cancel-name-new").on("click", function(e) {
                $("#cover").fadeOut(), $("#enter-name").hide()
            })
        }
    }, {
        "../util": 19,
        "./names": 14
    }],
    14: [function(e, t, a) {
        "use strict";
        a.validateName = function(e) {
            for (var t = new RegExp("[a-zA-Z-À-ÿ-'\\s]"), a = new RegExp("^([a-zA-Z-À-ÿ-']+\\s?[a-zA-Z-À-ÿ-']+$)"), i = 0; i < e.length; i++)
                if (!t.test(e[i])) return {
                    isValid: !1,
                    "reason": " contains invalid characters"
                };
            return 12 < e.length ? {
                isValid: !1,
                "reason": "'s too long"
            } : e.length < 2 ? {
                isValid: !1,
                "reason": "'s too short"
            } : a.test(e) ? e.toLowerCase().includes("fuck") ? {
                isValid: !1,
                "reason": " contains a bad word"
            } : {
                isValid: !0,
                "reason": ""
            } : {
                isValid: !1,
                "reason": " contains too many spaces"
            }
        }
    }, {}],
    15: [function(e, t, a) {
        "use strict";
        var s = e("../util"),
            i = function() {
                function e(e) {
                    var t = this;
                    this.send = e, $("#speak").on("click", function(e) {
                        return t.show(e)
                    }), $("#phrases-list").on("click touchstart", ".speak-bubble", function(e) {
                        return t.speak(e)
                    }), $("#emoji-list").on("click touchstart", ".emoji-speak", function(e) {
                        return t.speak(e)
                    }), $("#cancel-speak").on("click", function(e) {
                        return t.hide(e)
                    })
                }
                var t = e.prototype;
                return t.speak = function(e) {
                    console.log(e.type), e.preventDefault(), $("#phrases").fadeOut(), this.showBubble(e.target.id, s.siteSettings.multiplayerPublicId), this.send(e.target.id)
                }, t.showBubble = function(e, t) {
                    var a, i, n = $(".p-" + t).parent().find(".bubble"),
                        r = $(".p-" + t);
                    i = e.includes("emoji-") ? (a = $("#emoji-list #" + e).text(), "multiplayer-bubble-emoji") : (a = $("#phrases-list #" + e).text(), "multiplayer-bubble-text"), a ? "disabled" !== $("#speak").attr("disabled") ? (n.show(), a.includes(":(") && r.addClass("sad"), n.find("p span").html($("<span/>").addClass(i).text(a)), n.find("div").hide(), n.find("img").hide(), setTimeout(function() {
                        n.fadeOut(), r.removeClass("sad")
                    }, 3500)) : s.trackEvent("PhraseWhenSilent", "", 0, "", "", 1) : s.trackEvent("BadPhrase", e)
                }, t.receivePhrase = function(e, t) {
                    this.showBubble(e, t)
                }, t.show = function() {
                    $("#phrases").show()
                }, t.hide = function() {
                    $("#phrases").hide()
                }, t.disable = function() {
                    $("#speak").attr("disabled", "disabled"), this.hide()
                }, t.enable = function() {
                    $("#speak").removeAttr("disabled")
                }, e
            }();
        t.exports = i
    }, {
        "../util": 19
    }],
    16: [function(e, t, a) {
        "use strict";
        t.exports = {
            slug: slug,
            category: category,
            siteVersion: siteVersion,
            showAds: showAds,
            customChannelId: customChannelId,
            defaultSettings: defaultSettings,
            defaultSiteSettings: defaultSiteSettings,
            themes: themes,
            players: players
        }
    }, {}],
    17: [function(e, t, a) {
        "use strict";
        var i, n = e("./util"),
            r = n.logError,
            s = n.qs,
            o = e("../shared/helper-functions").captainsLog,
            u = !!s.gid;
        try {
            i = window.localStorage
        } catch (e) {
            i = null
        }
        var h = null,
            p = null;
        var l = (window.slug || "unknown") + ".stats";

        function d() {
            var e = i.getItem(l);
            if (e) {
                var t = JSON.parse(e);
                if (t && t.players && t.startTime) return t;
                i.removeItem(l);
                try {
                    r("Stats for " + l + " was malformed, removed it. First 50 chars of the data were: " + (e + "").substr(0, 50))
                } catch (e) {}
            }
            var a = {
                version: 4,
                startTime: (new Date).getTime(),
                gameCount: 0,
                abandonedGameCount: 0,
                finishedGameCount: 0,
                playersInGameCount: {},
                totalGameTime: 0,
                averageGameTime: null,
                maxGameTime: null,
                minGameTime: null,
                players: {}
            };
            return c(a), a
        }

        function c(e) {
            try {
                i.setItem(l, JSON.stringify(e))
            } catch (e) {
                o.error("localStorage is full")
            }
        }

        function m(e) {
            var t = d();
            e(t), c(t)
        }

        function f(e) {
            var t = {
                gameCount: 0,
                abandonedGameCount: 0,
                finishedGameCount: 0,
                winCount: 0,
                loseCount: 0,
                drawCount: 0,
                winPercentage: 0,
                totalGameTime: 0
            };
            return (e = e || {
                score: !0,
                tournaments: !0,
                streaks: !0,
                wonGameTime: !0
            }).wonGameTime && (t.minWonGameTime = null, t.maxWonGameTime = null, t.avgWonGameTime = null, t.totalWonGameTime = 0), e.score && (t.totalScore = 0, t.maxScore = null, t.minScore = null, t.avgScore = null), e.streaks && (t.winningStreak = 0, t.losingStreak = 0, t.maxWinningStreak = 0, t.maxLosingStreak = 0), e.tournaments && (t.finishedTournamentCount = 0, t.winTournamentCount = 0, t.loseTournamentCount = 0, t.totalTournamentScore = 0, t.avgTournamentScore = 0, t.tournamentWinPercentage = 0, t.tournamentWinningStreak = 0, t.tournamentLosingStreak = 0, t.tournamentMaxWinningStreak = 0, t.tournamentMaxLosingStreak = 0), t
        }
        var g = {
            get: d,
            enabled: !0,
            multiplayer: !1,
            clear: function() {
                this.enabled && i.removeItem(l)
            },
            emptyPlayer: f,
            minimumVersion: function(e) {
                if (this.enabled) {
                    var t = this.get();
                    t && t.version < e && this.clear()
                }
            },
            startGame: function(r, s) {
                this.enabled && (this.options = s || {
                    tournaments: !0,
                    streaks: !0,
                    score: !0,
                    wonGameTime: !0
                }, this.currentPlayers = r, h = (new Date).getTime(), p = null, m(function(e) {
                    e.playersInGameCount[r.length] = (e.playersInGameCount[r.length] || 0) + 1, e.gameCount++, e.abandonedGameCount++;
                    for (var t = 0; t < r.length; t++) {
                        var a = r[t];
                        if (!a.id) throw new Error("Missing id on player in statistics!");
                        var i = a.id;
                        if (u) {
                            if ("bottom-player" !== i) continue;
                            i = "multi-player"
                        }
                        e.players[i] || (e.players[i] = f(s));
                        var n = e.players[i];
                        n.gameCount++, n.abandonedGameCount++
                    }
                }))
            },
            cancelGame: function() {
                if (this.enabled && this.currentPlayers) {
                    var n = this.currentPlayers;
                    p = h = null;
                    var r = this.options;
                    m(function(e) {
                        e.playersInGameCount[n.length] = (e.playersInGameCount[n.length] || 0) - 1, e.gameCount--, e.abandonedGameCount--;
                        for (var t = 0; t < n.length; t++) {
                            var a = n[t];
                            if ("multi-player" !== a.id) {
                                e.players[a.id] || (e.players[a.id] = f(r));
                                var i = e.players[a.id];
                                i.gameCount--, i.abandonedGameCount--
                            }
                        }
                    })
                }
            },
            finishGame: function(o, l, e) {
                if (this.enabled) {
                    var d = [],
                        c = this.options;
                    if (m(function(e) {
                            l || (p = (new Date).getTime(), l = p - h, "number" == typeof pauseTime && (l -= pauseTime)), e.finishedGameCount++, e.abandonedGameCount = Math.max(e.abandonedGameCount - 1, 0), e.totalGameTime += l, e.averageGameTime = e.totalGameTime / e.finishedGameCount, e.maxGameTime = null === e.maxGameTime ? l : Math.max(l, e.maxGameTime), e.minGameTime = null === e.minGameTime ? l : Math.min(l, e.minGameTime);
                            for (var t = 0; t < o.length; t++) {
                                var a = o[t],
                                    i = a.id;
                                if (u) {
                                    if ("bottom-player" !== i) continue;
                                    i = "multi-player"
                                }
                                var n = e.players[i];
                                for (var r in n || (e.players[i] = f(c), (n = e.players[i]).abandonedGameCount++, n.gameCount++), a.stats = a.stats || {}, a.stats.score |= 0, n.abandonedGameCount = Math.max(n.abandonedGameCount - 1, 0), n.finishedGameCount++, n.totalScore += a.stats.score, n.minScore = null === n.minScore ? a.stats.score : Math.min(n.minScore, a.stats.score), n.maxScore = null === n.maxScore ? a.stats.score : Math.max(n.maxScore, a.stats.score), n.avgScore = n.totalScore / n.finishedGameCount, n.totalGameTime += l, "win" == a.stats.result ? (n.winCount++, n.winningStreak++, n.losingStreak = 0, n.maxWinningStreak = Math.max(n.maxWinningStreak, n.winningStreak), null === n.minWonGameTime ? n.minWonGameTime = l : l < n.minWonGameTime && (d.push({
                                        oldTime: n.minWonGameTime,
                                        newTime: l,
                                        name: a.name
                                    }), n.minWonGameTime = l), n.minWonGameTime = null === n.minWonGameTime ? l : Math.min(n.minWonGameTime, l), n.maxWonGameTime = null === n.maxWonGameTime ? l : Math.max(n.maxWonGameTime, l), n.totalWonGameTime += l, n.avgWonGameTime = n.totalWonGameTime / n.winCount) : "lose" == a.stats.result ? (n.loseCount++, n.winningStreak = 0, n.losingStreak++, n.maxLosingStreak = Math.max(n.maxLosingStreak, n.losingStreak)) : "draw" == a.stats.result && (n.drawCount++, n.winningStreak = 0, n.losingStreak = 0), n.winPercentage = n.winCount / n.finishedGameCount, a.stats.tournamentResult && (n.finishedTournamentCount++, n.totalTournamentScore += a.stats.tournamentScore, n.avgTournamentScore = n.totalTournamentScore / n.finishedTournamentCount, "win" == a.stats.tournamentResult ? (n.winTournamentCount++, n.tournamentWinningStreak++, n.tournamentLosingStreak = 0, n.tournamentMaxWinningStreak = Math.max(n.tournamentMaxWinningStreak, n.tournamentWinningStreak)) : "lose" == a.stats.tournamentResult && (n.loseTournamentCount++, n.tournamentLosingStreak++, n.tournamentWinningStreak = 0, n.tournamentMaxLosingStreak = Math.max(n.tournamentMaxLosingStreak, n.tournamentLosingStreak)), n.tournamentWinPercentage = n.winTournamentCount / n.finishedTournamentCount), a.stats)
                                    if (!r.match(/^(score|result|tournamentResult|tournamentScore)$/)) {
                                        var s = a.stats[r];
                                        "number" == typeof s && (r.match(/maximum/) ? (void 0 === n[r] || s > n[r]) && (n[r] = s) : r.match(/minimum/) ? (void 0 === n[r] || s < n[r]) && (n[r] = s) : (n[r] |= 0, n[r] += a.stats[r]))
                                    }
                            }
                        }), e)
                        for (var t = 0; t < d.length; t++) e(d[t])
                }
            },
            startMultiplayerChallengeGame: function(t) {
                m(function(e) {
                    e.activeMultiplayerGame = {
                        name: t.name,
                        face: t.face
                    }
                })
            },
            finishMultiplayerChallengeGame: function(i) {
                m(function(e) {
                    var t = i.find(function(e) {
                        return "bottom-player" !== e.id
                    });
                    e.multiplayer || (e.multiplayer = []);
                    var a = e.multiplayer.find(function(e) {
                        return e.name === t.name && e.face === t.face
                    });
                    a || (a = {
                        name: t.name,
                        face: t.face,
                        win: 0,
                        lose: 0,
                        draw: 0
                    }, e.multiplayer.push(a)), "win" === t.stats.result ? a.lose++ : "lose" === t.stats.result ? a.win++ : a.draw++, delete e.activeMultiplayerGame
                })
            },
            checkAbandonedMultiplayerGame: function() {
                this.registeredUnload || (this.registeredUnload = !0, window.addEventListener("beforeunload", function() {
                    g.checkAbandonedMultiplayerGame()
                }));
                var e = d();
                if (e.activeMultiplayerGame) {
                    var t = e.activeMultiplayerGame,
                        a = t.name,
                        i = t.face;
                    e.multiplayer || (e.multiplayer = []);
                    var n = e.multiplayer.find(function(e) {
                        return e.name === a && e.face === i
                    });
                    n ? n.lose++ : (n = {
                        name: a,
                        face: i,
                        win: 0,
                        lose: 1,
                        draw: 0
                    }, e.multiplayer.push(n)), delete e.activeMultiplayerGame, c(e)
                }
            },
            isGameActive: function() {
                return null !== h && null === p
            },
            saveRaw: function(e) {
                m(e)
            }
        };
        try {
            localStorage.setItem("test", "test"), localStorage.removeItem("test"), JSON.parse('{"test":"test"}'), JSON.stringify({
                "test": "test"
            }), g.supported = !0
        } catch (e) {
            g.supported = !1
        }
        if (!g.supported)
            for (var y in g) "supported" != y && (g[y] = function() {});
        t.exports = g
    }, {
        "../shared/helper-functions": 8,
        "./util": 19
    }],
    18: [function(e, t, a) {
        "use strict";
        var i = e("./util"),
            n = i.cake,
            r = i.deleteCake,
            s = function() {
                function e(e) {
                    this.slug = e, this.sessionStorageAvailable = !0;
                    try {
                        sessionStorage.test = 1, delete sessionStorage.test
                    } catch (e) {
                        this.sessionStorageAvailable = !1
                    }
                }
                var t = e.prototype;
                return t.useCookies = function(e) {
                    return ("undefined" == typeof window || !window.APP_MODE || !window.Android) && (!this.sessionStorageAvailable || "scores" === e || "autodeal" === e || "lastdealerindex" === e)
                }, t.set = function(e, t) {
                    this.useCookies(e) ? n(this.slug + "." + e, JSON.stringify(t)) : sessionStorage.setItem(this.slug + "." + e, JSON.stringify(t))
                }, t.get = function(e, t) {
                    var a;
                    return null !== (a = this.useCookies(e) ? n(this.slug + "." + e) : sessionStorage.getItem(this.slug + "." + e)) ? JSON.parse(a) : t
                }, t.remove = function(e) {
                    this.useCookies(e) ? r(this.slug + "." + e) : sessionStorage.removeItem(this.slug + "." + e)
                }, e
            }();
        t.exports = s
    }, {
        "./util": 19
    }],
    19: [function(e, t, a) {
        "use strict";
        var n = e("./helper-functions").ArrayUtils,
            i = 730,
            o = window.setTimeout,
            r = e("./helper-functions"),
            p = r.captainsLog,
            s = r._setTimeout,
            m = e("./api"),
            l = e("./gamecontrol");

        function d() {
            return window.matchMedia ? matchMedia("(max-width: " + i + "px)").matches : $(window).width() <= i
        }
        "dev.cardgames.io" == document.location.hostname && (p.level = "debug"), window.console && window.console.log || (window.console = {
            log: function() {},
            debug: function() {},
            info: function() {},
            warn: function() {},
            error: function() {}
        });
        var h = "gdprconsent";

        function f(e, t, a, i) {
            if (void 0 === t) {
                if (document.cookie && navigator.cookieEnabled) {
                    for (var n = document.cookie.split(";"), r = {}, s = 0; s < n.length; s++) {
                        var o = n[s].replace(/^\s*|\s*$/g, "").split("=");
                        r[o[0]] = decodeURIComponent(o[1])
                    }
                    return r[e] || null
                }
                return g(e)
            }
            if (null === f(h) && e !== h && !APP_MODE) return g(e, t), void console.log("Consent has not been given to set cookies, using dough for " + e + "=" + t + " ...");
            navigator.cookieEnabled || (p.debug("Cookies are disabled in this browser, setting up temporary value " + e + "=" + t + " ..."), g(e, t));
            var l = e + "=" + encodeURIComponent(t);
            if (a) {
                var d = new Date;
                d.setTime(d.getTime() + 24 * a * 60 * 60 * 1e3), l += "; expires=" + d.toUTCString()
            }
            i && (l += "; path=" + i), y(e), document.cookie = l;
            try {
                var c = f(e);
                if (c != t) {
                    if (!t && !c) return;
                    if (!navigator.cookieEnabled) return;
                    var u = navigator.userAgent.match(/Firefox/);
                    b("CAKEFAIL", "Name=" + e + ", set " + t + ", got " + c + ", cookies=" + navigator.cookieEnabled + ", firefox=" + u + ", cookie=" + document.cookie, 0, "", "", 1)
                }
            } catch (e) {}
        }

        function g(e, t) {
            try {
                var a = {};
                try {
                    a = JSON.parse(window.name)
                } catch (e) {
                    a = {}
                }
                if ("object" == typeof a && null !== a || (a = {}), void 0 === t) return void 0 !== a[e] ? a[e] : null;
                a[e] = t, window.name = JSON.stringify(a)
            } catch (e) {
                try {
                    m.errors.log("DoughError", slug, e.message + " , window.name=" + window.name, null, null, 5)
                } catch (e) {}
                return null
            }
        }

        function y(e) {
            var t = e + "=; expires=Thu, 01 Jan 1970 00:00:01 GMT;";
            document.cookie = t, document.cookie = t + " path=/";
            try {
                var a = JSON.parse(window.name);
                a && "object" == typeof a && void 0 !== a[e] && (delete a[e], window.name = JSON.stringify(a))
            } catch (e) {}
        }
        try {
            y("site.multiplayerPhrases")
        } catch (e) {}

        function b(e, t, a, i, n, r) {
            if ("FinishGame" == e && l.finishGame(), category = category || "", t = t || "", a = a || 0, i = i || "", n = n || "", "Error" === (e = e || "") && "" === i && "undefined" != typeof window && (i = window.siteVersion || ""), APP_MODE) {
                var s = navigator.userAgent || "";
                n = s.match(/iPhone/i) ? "APP-iPhone" : s.match(/iPad/i) ? "APP-iPad" : s.match(/android/i) ? "APP-Android" : "APP-Unknown - " + s
            }
            r = r || b.PROBABILITY, p.debug("TrackEvent: action=" + e + ", label=" + t + ", value=" + a + ", variable1=" + i + ", variable2=" + n + ", probability=" + r), APP_MODE && (r = 1), Math.random() <= r && m.events.post({
                category: category,
                action: e,
                label: t,
                value: a,
                variable1: i,
                variable2: n,
                probability: r
            })
        }

        function c(e, t, a, i, n) {
            b(e, t, a, i, n, 1)
        }
        b.PROBABILITY = .01;
        var u, v, k = {},
            w = document,
            C = "loc",
            S = "hos",
            T = Math;

        function E(r, s) {
            this.meta = {
                prefix: r,
                defaults: s,
                listeners: {}
            }, r += ".";
            var o = this;
            try {
                this.meta.cookies = function() {
                    if (!document.cookie) return {};
                    for (var e = {}, t = function(e) {
                            return decodeURIComponent(e).replace(/^\s*|\s*$/g, "")
                        }, a = document.cookie.split(";"), i = 0; i < a.length; i++) {
                        var n = a[i].split("=");
                        e[t(n[0])] = t(n[1])
                    }
                    return e
                }()
            } catch (e) {
                alert("EXCEPTION WHEN PARSING COOKIES" + e)
            }

            function e(e) {
                for (var t in e)
                    if (t.substr(0, r.length) == r) {
                        var a = e[t],
                            i = t.substr(r.length),
                            n = s[i];
                        if (void 0 === n) continue;
                        if (void 0 !== n.defaultValue && (n = n.defaultValue), "number" == typeof n) o[i] = parseFloat(a);
                        else if ("boolean" == typeof n)
                            if ("true" == a) o[i] = !0;
                            else {
                                if ("false" != a) continue;
                                o[i] = !1
                            }
                        else o[i] = "object" == typeof n ? JSON.parse(a) : a
                    }
            }
            try {
                window.localStorage && e(localStorage)
            } catch (e) {}
            for (var t in e(this.meta.cookies), s) this.meta.listeners[t] = [], void 0 === this[t] && (s[t] && void 0 !== s[t].defaultValue ? this[t] = s[t].defaultValue : this[t] = JSON.parse(JSON.stringify(s[t])))
        }
        E.prototype.addListener = function(e, t) {
            this.meta.listeners[e] || (this.meta.listeners[e] = []), this.meta.listeners[e].push(t)
        }, E.prototype.set = function(n, r) {
            if (APP_MODE || null !== f(h)) {
                if (void 0 === this[n] || "function" == typeof this[n]) throw "Invalid key: " + n;
                if (typeof r != typeof this[n]) throw "Unexpected type for " + n + ", expected " + typeof this[n] + ", got " + typeof r;
                var e, t;
                if (this[n] = r, void 0 !== this.meta.defaults[n].defaultValue) {
                    var a = this.meta.defaults[n];
                    e = a.defaultValue, t = a.allowedValues, a.minValue, a.maxValue
                } else e = this.meta.defaults[n];
                var s = this.meta,
                    i = this.meta.prefix + "." + n;
                if (r == e) {
                    this.meta.cookies[i] && (document.cookie = escape(i) + "=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/");
                    try {
                        localStorage.removeItem(i)
                    } catch (e) {}
                    d()
                } else {
                    if (t) {
                        for (var o = !1, l = 0; l < t.length; l++)
                            if (r == t[l]) {
                                o = !0;
                                break
                            } if (!o) throw "Bad value for " + n + ": " + r + ". Allowed values are: " + t
                    }
                    d();
                    try {
                        "object" == typeof r && (r = JSON.stringify(r)), localStorage.setItem(i, r)
                    } catch (e) {
                        document.cookie = escape(i) + "=" + escape(r) + "; expires=Tue, 19 Jan 2030 03:14:07 GMT; path=/"
                    }
                }
            } else console.log("GDPR consent has not been given, ignoring " + n + "=" + r);

            function d() {
                var e = s.listeners[n],
                    t = Array.isArray(e),
                    a = 0;
                for (e = t ? e : e[Symbol.iterator]();;) {
                    var i;
                    if (t) {
                        if (a >= e.length) break;
                        i = e[a++]
                    } else {
                        if ((a = e.next()).done) break;
                        i = a.value
                    }
                    i({
                        key: n,
                        value: r
                    })
                }
                "string" == typeof r || "number" == typeof r ? $('.option-row input[name="' + n + '"][value="' + r + '"]').prop("checked", !0) : "boolean" == typeof r && $('.option-row input[name="' + n + '"][type="checkbox"]').prop("checked", r)
            }
        };
        try {
            u = new E(slug, defaultSettings)
        } catch (e) {
            alert("ERROR when loading settings for " + slug + ", err: " + e)
        }
        try {
            v = new E("site", window.defaultSiteSettings || {})
        } catch (e) {
            alert("ERROR when loading site-settings for " + slug + ", err: " + e)
        }
        if (window.siteSettings = v, window.players) {
            for (var A in players) {
                players[A].name !== players[A].defaultName && $("." + A + "-player-name").text(players[A].name);
                var I = players[A].code + "",
                    P = I.match(/^\d+$/) ? I : I.charAt(2);
                $(".face-" + A + "-player.face-small").addClass("hair-" + P), $("#challenge-yourself .face-bottom-player").addClass("hair-" + P)
            }
            $("#temphidenames").remove()
        }
        $(".show-after-names").removeClass("show-after-names");
        var x = {};
        if (! function() {
                var e = document.location.search.replace(/\?/, "");
                if (e)
                    for (var t = e.split("&"), a = 0; a < t.length; a++) {
                        var i = t[a].split("="),
                            n = i[0],
                            r = i[1];
                        n = s(window.settings || {}, n), n = s(v, n), r = l(r), x[n] = r, o(window.settings || {}, n, r), o(v, n, r)
                    }

                function s(e, t) {
                    for (var a in e)
                        if (a.toLowerCase() == t.toLowerCase()) return a;
                    return t
                }

                function o(e, t, a) {
                    var i = e[t];
                    if (void 0 !== i)
                        if ("boolean" != typeof i || "number" != typeof a) {
                            if (typeof i != typeof a) throw "Incompatible types for " + t + ": " + typeof i + " and " + typeof a;
                            e[t] = a
                        } else e[t] = !!a
                }

                function l(e) {
                    if (void 0 === e) return !0;
                    if (e.match(/^\d+$/)) return parseInt(e);
                    if ("true" == e) return !0;
                    if ("false" == e) return !1;
                    if (e.match(/,/)) {
                        for (var t = (e = e.replace(/,$/, "")).split(","), a = 0; a < t.length; a++) t[a] = l(t[a]);
                        return t
                    }
                    return e
                }
            }(), "debug" === x.log && (p.level = "debug"), (location.hostname || "").match(/translat/) || x.translatecheck ? ($("#play-page").remove(), $("#board").append($("<div>", {
                id: "translate-proxy"
            }).html('We do not support playing the game on translation websites. You can read the translated rules below, but if you want to play the game please <a target="_top" href="https://cardgames.io/' + slug + "/?fromproxy=" + location.hostname + '">CLICK HERE</a> to open the real CardGames.io website.'))) : location.hostname && "cardgames.io" !== location.hostname && "dev.cardgames.io" !== location.hostname && !window.APP_MODE, x.fromproxy) {
            c("ProxyRedirect", "Game: " + category + ", Proxy: " + x.fromproxy);
            try {
                window.history.pushState("", document.title, location.pathname)
            } catch (e) {}
        }
        try {
            var _ = !1;
            C += "ation", S += "tname", _ = document.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#Image", "1.1")
        } catch (e) {}

        function R(e, t) {
            return e.charAt(e.length - t)
        }
        var D = {
            canSetCookies: function() {
                var e = "test";
                return f(e, "value", 2, "/"), "value" == f(e) && (y(e), !0)
            },
            supportsSvg: _
        };
        if ("cribage" != window.slug) var M = w[C][S];
        var O = 5e3;
        o(function e() {
            if (l.isGameStarted()) {
                if (!D.canSetCookies()) return;
                p.debug("Logged visit");
                var t = f("cid") || function() {
                    for (var e = "", t = "ABCDEFGHIJKLMNOPQRSTUVWXYZ", a = 0; a < 10; a++) e += t.charAt(Math.floor(Math.random() * t.length));
                    return e
                }();
                f("cid", t, 365, "/");
            } else o(e, O)
        }, O), APP_MODE && o(function() {
            var e = new Date;
            e.setUTCHours(0, 0, 0, 0);
            var t = e.getTime().toString();
            f("appversion") === t ? p.debug("Not logging version, already done it today") : (b("AppOpen", window.siteVersion + "" || "Unknown"), f("appversion", t, 1, "/"))
        }, 1e4);
        var L = document.location.hash.match(/#logerrors=(\w+)/);
        if (L) ! function() {
            try {
                var e = document.location;
                window.history && window.history.replaceState ? history.replaceState("", document.title, e.pathname + e.search) : document.location.hash = ""
            } catch (e) {}
        }(), f("logerrors", L[1], 1, "/");
        else if (!APP_MODE && ("." != R(M, 3) || "o" != R(M, 1)) && "9" != R(M, 12)) {
            M.replace(/^\w+/, "") != "#r!ud!s#i&".replace(/#/g, ".").replace("$", "e").replace(/!/g, "a").replace(/&/g, "s") && (T.random = function() {
                return 1.5
            }, T.round = function() {
                return .22
            })
        }

        function N(e, t, a, i, n, r, s) {
            if (void 0 === s && (s = 0), "RummyError" !== r) try {
                var o = "";
                t && (o += t), a && i && (o += "(" + a + "," + i + ") "), o += e, n && n.stack && (o += "\r\n\r\n" + n.stack), p.error(o);
                var l = location.pathname.split("/")[1] || "",
                    d = JSON.parse(localStorage.errors || "[]");
                10 <= d.length && d.shift(), b("Error", o + "|| UserAgent: " + navigator.userAgent.replace(/Mozilla\/5\.0/, ""), a || 0);
                var c = l + " " + new Date + ":\r\n\r\n " + (n && n.stack ? n.stack : e),
                    u = c.split(/\r?\n/);
                u = u.filter(function(e) {
                    return !e.match(/jquery-/)
                });
                for (var h = 0; h < u.length; h++) u[h] = u[h].replace(/https?:\/\/(dev\.)?cardgames\.io(:\d+)?\/\w+/, "");
                if (c = u.join("\r\n"), d.push(c), localStorage.setItem("errors", JSON.stringify(d)), !r && !(r = f("logerrors"))) return;
                p.debug("Sending error to server:\n " + o), m.errors.log(r, l, o, null, null, s)
            } catch (e) {
                p.error("Error in error handling: " + e)
            }
        }

        function B() {
            G.close()
        }
        window.logError = N, window.onerror || (window.onerror = N);
        var G = {
            open: function() {
                W(), $("#game-link-wrapper").addClass("has-transitions").get(0).scrollTop = 0, $("body").addClass("menu-open"), APP_MODE || $("#wrapper").css("height", $("#game-link-wrapper").height()), s(function() {
                    return $("#wrapper").on("click", B)
                }, 100), $("#mobile-menu").css("z-index", 9999999999)
            },
            close: function() {
                G.isOpen() && ($("body").removeClass("menu-open"), APP_MODE || $("#wrapper").css("height", "auto"), s(function() {
                    return $("#game-link-wrapper").removeClass("has-transitions")
                }, 300), window.scrollTo(0, 0), $("#wrapper").off("click", B))
            },
            toggle: function(e) {
                "touchstart" === e.type && (this.cancelClicks = !0), "click" === e.type && this.cancelClicks || (e.preventDefault(), G.isOpen() ? G.close() : G.open())
            },
            isOpen: function() {
                return $("body").hasClass("menu-open")
            }
        };

        function F() {
            window.scrollY ? f("scroll", scrollY) : void 0 === window.scrollY && window.pageYOffset && f("scroll", window.pageYOffset), f("reload", "1"), document.location.href = document.location.href.replace(/#.*/, "")
        }

        function H(e) {
            var t = $(this).find("input");
            if ($(this).hasClass("non-removable")) return e.preventDefault(), void e.stopPropagation();
            "A" === e.target.tagName && (e.preventDefault(), t.prop("checked", !t.prop("checked")));
            var a = t.attr("value");
            if (t.prop("checked")) {
                var i = $("<a/>", {
                    href: "/" + a.toLowerCase().replace(/\s*/g, "") + "/"
                }).html(a);
                $("#customizable-links").prepend(i), 30 < $("#promo-mini").height() && (i.remove(), t.prop("checked", !1), alert("There is not enough space for this link. Please remove some other games first by unchecking them."))
            } else {
                var n = function(e) {
                    for (var t = $("#customizable-links a"), a = 0; a < t.length; a++)
                        if ($(t[a]).text() === e) return t[a];
                    return null
                }(a);
                $(n).remove()
            }! function() {
                var e = [];
                $("#customizable-links a").each(function() {
                    e.push($(this).text())
                }), v.set("gameLinks", e.toString())
            }()
        }

        function j() {
            G.isCustomizing = !1, $("#game-link-wrapper").removeClass("customize-open"), $('#promo-links input[type="checkbox"]').remove(), $(".game-links a").each(function() {
                var e = $(this).text();
                $(this).text(e.replace(/^\s*|\s*$/g, "")), $(this).css("text-align", ""), $(this).off("click", H)
            }), $("#customize-menu").text("Customize..."), $("#close-menu").off("click", j)
        }

        function Z(e, t) {
            var a = document.createElement("script");
            a.async = !0, a.src = e, a.onload = t;
            var i = document.getElementsByTagName("script")[0];
            return i.parentNode.insertBefore(a, i), a
        }
        $(function() {
            if ($("#mobile-menu").on("click touchstart", function(e) {
                    if ($("body").hasClass("options-open")) $("body").removeClass("options-open"), e.preventDefault();
                    else if ($("html").hasClass("appmode") && $("body").hasClass("rules-open")) $("body").removeClass("rules-open"), e.preventDefault();
                    else if ($("html").hasClass("appmode") && $("body").hasClass("subview-open")) {
                        $("body").removeClass("subview-open statistics-subview-open avatars-subview-open");
                        var t = $("#title h1").data("real-title");
                        t && $("#title h1").text(t), e.preventDefault()
                    } else G.toggle(e)
                }), $('a[href="#more-games"]').on("click", function(e) {
                    W(), e.preventDefault(), G.open()
                }), $("#close-menu").on("click touchstart", function(e) {
                    e.preventDefault(), G.close()
                }), APP_MODE) $('input[type="text"]').on("blur", function() {
                0 !== document.documentElement.scrollTop && (document.documentElement.scrollTop = 0), 0 !== document.body.scrollTop && (document.body.scrollTop = 0)
            });
            else {
                $("#app-prompt a").on("click", function(e) {
                    var t = navigator.userAgent.match(/iPhone/i) ? "iPhoneAppLinkClick" : "AndroidAppLinkClick";
                    "no-thanks" === e.target.id ? (b(t, "No Thanks", 0, "", "", 1), e.preventDefault()) : b(t, "Get App", 0, "", "", 1), $("#app-prompt").slideUp()
                }), $("#fruit-monster-island a").on("click", function(e) {
                    var t, a = navigator.userAgent.match(/Android/i) ? "AndroidFruitPrompt" : "iOSFruitPrompt";
                    "no-fruit" === e.target.id ? (t = 0, e.preventDefault()) : t = 1, c(a, "", t), $("#fruit-monster-island").slideUp()
                });
                if (null !== f(h)) {
                    o(function() {
                        return Y.initialize()
                    }, 2e3), $("html").addClass("gdpr-accepted");
                    var e = f(h).split("_")[2];
                    return -1 !== NON_GDPR_COUNTRES.indexOf(e) && $("html").addClass("non-gdpr-country"), void(null === f("app_prompt") || APP_MODE ? function() {
                        f("androidprompt") && f("app_prompt", (new Date).getTime(), 4, "/");
                        try {
                            var e = navigator.userAgent,
                                t = e.match(/Android (\d+)/i),
                                a = e.match(/iPhone OS (\d+)/),
                                i = e.match(/\biPad\b.* OS (\d+)/i),
                                n = t || a || i,
                                r = "itms-apps://itunes.apple.com/app/apple-store/id1496007149";
                            if (null === f("app_prompt") && n) {
                                var s = parseInt(n[1]);
                                f("app_prompt", (new Date).getTime(), 4, "/"), i ? 12 <= s ? ($("#get-app, #app-icon").attr("href", r), b("iPadAppPrompt", s.toString(), 0, "", "", 1), $("#app-prompt").slideDown()) : b("iPadOldVersion", s.toString(), 0, "", "", 1) : a ? 12 <= s ? ($("#get-app, #app-icon").attr("href", r), b("iPhoneAppPrompt", s.toString(), 0, "", "", 1), $("#app-prompt").slideDown()) : b("iPhoneOldVersion", s.toString(), 0, "", "", 1) : t && (5 <= s ? ($("#get-app, #app-icon").attr("href", "market://details?id=io.cardgames.app"), b("AndroidAppPrompt", s.toString(), 0, "", "", 1), $("#app-prompt").slideDown()) : b("AndroidOldVersion", s.toString(), 0, "", "", 1))
                            }
                        } catch (e) {
                            b("AppPromptError", e.toString().substr(0, 200))
                        }
                    }() : function() {
                        try {
                            var e = navigator.userAgent,
                                t = e.match(/Android (\d+)/i),
                                a = e.match(/iPhone OS (\d+)/),
                                i = e.match(/\biPad\b.* OS (\d+)/i),
                                n = t || a || i,
                                r = parseInt(f("app_prompt"));
                            if ((new Date).getTime() - r < 18e4) return;
                            if (location.search.match(/gid=/)) return;
                            if (null === f("fruit_prompt") && n) {
                                var s = parseInt(n[1]);
                                f("fruit_prompt", (new Date).getTime(), 30, "/"), i || a ? 10 <= s && ($("#get-fruit-monster-island").attr("href", "itms-apps://itunes.apple.com/app/apple-store/id1564432703?pt=118730957&ct=cardgames.io&mt=8"), $("#fruit-monster-island img").attr("src", "/shared/images/fruit-monster-island.png"), o(function() {
                                    return $("#fruit-monster-island").slideDown()
                                }, 500)) : t && 7 <= s && ($("#get-fruit-monster-island").attr("href", "market://details?id=is.raudas.fruitmonsterisland"), $("#fruit-monster-island img").attr("src", "/shared/images/fruit-monster-island.png"), o(function() {
                                    return $("#fruit-monster-island").slideDown()
                                }, 500))
                            }
                        } catch (e) {
                            c("FruitPromptError", e.toString().substr(0, 200))
                        }
                    }())
                }
                $.getJSON("/lambda/country").done(function(e) {
                    window.country = e.country, -1 !== NON_GDPR_COUNTRES.indexOf(e.country) || !0 === navigator.standalone ? (f(h, (new Date).getTime() + "_true_" + e.country, 365, "/"), o(function() {
                        return Y.initialize()
                    }, 2e3), $("html").addClass("gdpr-accepted").addClass("non-gdpr-country")) : o(function() {
                        return t(e.country)
                    }, 4e3)
                }).fail(function() {
                    return t("Unknown")
                })
            }

            function t(i) {
                $("#gdpr-notice").fadeIn(), $("#gdpr-agree").on("click", function(e) {
                    var t = $("#personalized-ads").is(":checked"),
                        a = (new Date).getTime();
                    f(h, a + "_" + t + "_" + i, 365, "/"), e.preventDefault(), $("#gdpr-notice").fadeOut(), Y.initialize(), $("html").addClass("gdpr-accepted"), c("GdprAccept", "", t ? 1 : 0), m.gdpr.accept(t, navigator.userAgent, function(e) {
                        v.set("acceptCookiesId", e.acceptId)
                    }, function(e) {
                        p.error("Failed to save id of consent")
                    })
                })
            }
        }), window.NON_GDPR_COUNTRES = ["US", "CA", "AU"], !0 === navigator.standalone && $(document).on("click", "a", function(e) {
            var t = e.target.href;
            if (t && !t.match(/#/) && !t.match(/javascript:/)) {
                var a = location.protocol + "//" + location.host + "/";
                t.substr(0, a.length) === a && (e.preventDefault(), location.href = t)
            }
        }), $("#random-game").on("click", function() {
            var a = $('.game-links a[href^="/"]').toArray();
            n.shuffle(a);
            var i = 8;
            $("body").addClass("random-selection-process"),
                function e() {
                    var t = a.pop();
                    $(".random-highlight").removeClass("random-highlight"), $(t).addClass("random-highlight"), 0 == --i ? ($(t).addClass("random-select"), o(function() {
                        return location.href = t.href
                    }, 1e3)) : o(e, 450)
                }()
        }), window.facebookBorder = function(e) {
            devicePixelRatio;
            var t = Math.ceil(1200 / 630 * 800);
            $("#promo-links").remove(), $("#promo-mini").css("visibility", "hidden").css("height", "10px"), $("<div>").css({
                border: "solid 1px red",
                width: t,
                height: 800,
                position: "absolute",
                top: e || 0,
                left: Math.ceil(($(window).width() - t) / 2) - 1
            }).appendTo("body"), $(".underboard-message").css("visibility", "hidden"), $(".don-draper").remove(), $("#board-and-header").css("float", "none").css("margin", "auto")
        }, $('a[href="#customize-menu"]').on("click", function(e) {
            if (e.preventDefault(), G.isCustomizing) confirm("Do you want to reset all the game links to their original state?") && (v.set("gameLinks", ""), F());
            else {
                G.isCustomizing = !0, $("#close-menu").on("click", j), $("#customize-menu").text("Reset links..."), $("#game-link-wrapper").addClass("customize-open");
                var a = {};
                $("#promo-mini a").each(function() {
                    a[$(this).text()] = this
                }), $(".game-links a").each(function() {
                    var e = $(this).text(),
                        t = $("<input/>", {
                            type: "checkbox",
                            value: e
                        });
                    e in a && t.attr("checked", "checked"), $(this).hasClass("non-removable") && t.attr("disabled", "disabled"), $(this).html(t.wrap("<div/>").parent().html() + " " + e).css("text-align", "left"), $(this).on("click", H)
                })
            }
        }), $(".default-game-link").is(":visible") || $(".default-game-link").remove();
        var Y = {
            type: showAds,
            adsAreReady: !1,
            initialize: function() {
                var e = this;
                if (!APP_MODE) {
                    var t = f("gdprconsent"),
                        a = !1;
                    if (t) a = "true" === t.split("_")[1];
                    else b("NoGdprCookie", navigator.userAgent + "\n" + document.cookie + "\n" + navigator.cookieEnabled);
                    var i = l(navigator.doNotTrack) || l(window.doNotTrack) || l(navigator.msDoNotTrack);
                    p.debug("ADS: Do not track is set: " + i), this.requestPersonalized = a && !i, "undefined" != typeof adsbygoogle && (adsbygoogle.requestNonPersonalizedAds = this.requestPersonalized ? 0 : 1, p.debug("ADS: Set .requestNonPersonalizedAds to " + adsbygoogle.requestNonPersonalizedAds));
                    var n = "//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js",
                        r = "dev.cardgames.io" === location.hostname;
                    if ("none" !== this.type)
                        if (d() || v.alwaysUseInterstitialAds) {
                            0 === this.lastAdShown && (this.lastAdShown = (new Date).getTime() - 12e4), $("ins.adslot_1, ins.adslot_2").remove(), window.adsbygoogle = [];
                            var s = document.createElement("script");
                            s.async = !0, s.src = n, s.setAttribute("data-ad-client", "ca-pub-9002823967926225"), s.setAttribute("data-ad-channel", window.customChannelId), r && !x.realads && s.setAttribute("data-adbreak-test", "on"), s.onload = function() {
                                p.debug("ADS: loaded script"), adConfig({
                                    preloadAdBreaks: "on",
                                    sound: "off",
                                    onReady: function() {
                                        return e.adReady()
                                    }
                                })
                            };
                            var o = document.getElementsByTagName("script")[0];
                            o.parentNode.insertBefore(s, o), $("#draper-left, #draper-right").css("visibility", "hidden")
                        } else if ("adsense" === this.type) {
                        if (r && !x.ads) return;
                        $(window).width() < 1354 && ($("ins.adslot_1").remove(), adsbygoogle.pop()), Z(n)
                    }
                }

                function l(e) {
                    return "1" == e || !0 === e || "yes" == e
                }
            },
            trigger: function(e) {
                var t = this;
                if (APP_MODE) {
                    if (this.lastTrigger && (new Date).getTime() - this.lastTrigger < 300) return void b("DoubleAdTrigger", "", 0, "", "", 1);
                    if (this.lastTrigger = (new Date).getTime(), window.adCallback = function() {
                            console.log("APP: Got callback from native app"), delete window.adCallback, e()
                        }, "undefined" != typeof Android) console.log("APP: Sending ad message to Android..."), window.Android.triggerAds();
                    else try {
                        console.log("APP: Sending ad message to Swift..."), window.webkit.messageHandlers.triggerAds.postMessage("TIME FOR SOME ADS")
                    } catch (e) {
                        if (!location.search.match(/appmode/)) throw e;
                        console.log("ARE IN SIMULATED APP MODE ON BROWSER, CALLING window.adCallback()"), window.adCallback()
                    }
                } else {
                    if ("none" === this.type) return p.debug("ADS: No ad triggered. Type=" + this.type), void e();
                    if (!this.adsAreReady) return p.debug("ADS: Ads API has not finished loading yet"), void e();
                    var a = (new Date).getTime() - this.lastAdShown;
                    if (a < 24e4 && "immediate" !== x.ads) return p.debug("ADS: Only " + a / 1e3 + " seconds since last ad was shown, not showing ad yet!"), void e();
                    p.debug("ADS: Calling adBreak"), this._callback === e && c("AdBreakSameCallback"), this._callback = e, this.testId && (c("AdBreakDoubleTrigger"), clearTimeout(this.testId)), this.testId = o(function() {
                        Array.prototype.slice.call(document.getElementsByTagName("iframe")).some(function(e) {
                            return $(e).is(":visible")
                        }) || c("AdBreakNoVisibleIframe", "Current time " + (new Date).toString() + "\n" + t.bf + "\n" + t.af + "\n" + t.abf)
                    }, 5e3), adBreak({
                        type: "next",
                        name: "mobile-ads",
                        beforeAd: function() {
                            return t.beforeAd()
                        },
                        afterAd: function() {
                            return t.afterAd()
                        },
                        adBreakDone: function(e) {
                            return t.adBreakDone(e)
                        }
                    })
                }
            },
            get lastAdShown() {
                return parseInt(f("lastadshown")) || 0
            },
            set lastAdShown(e) {
                f("lastadshown", e, null, "/")
            },
            adReady: function() {
                p.debug("ADS: AdReady"), this.adsAreReady = !0
            },
            beforeAd: function() {
                p.debug("ADS: beforeAd called"), this.bf = "Before " + (new Date).toString()
            },
            afterAd: function() {
                p.debug("ADS: afterAd called"), this.af = "After " + (new Date).toString()
            },
            adBreakDone: function(e) {
                this.abf = "AdBreakDone: " + (new Date).toString(), p.debug("ADS: AdBreakDone: " + JSON.stringify(e, null, 2)), clearTimeout(this.testId), delete this.testId;
                var t = (new Date).getTime(),
                    a = this.lastAdShown;
                "viewed" === e.breakStatus && (this.lastAdShown = t, 0 < a && c("AdIntervalManual", Math.round((t - a) / 1e3).toString()));
                var i = this._callback;
                delete this._callback, c("AdBreakDone", e.breakStatus), i && i()
            }
        };

        function W() {
            window.confettiEffect && (confettiEffect.stop(), $(".confetti-container").remove(), $("body").removeClass("confetti"), delete window.confettiEffect)
        }
        t.exports = {
            qs: x,
            cake: f,
            preloadBackgroundImage: function(e) {
                var t = $("<div/>");
                t.css("background-image", "url(" + e + ")").css("width", "1px").appendTo("body"), o(function() {
                    return t.remove()
                }, 50)
            },
            preloadBackgroundImageClass: function(e) {
                var t = $("<div/>");
                t.addClass(e).appendTo("body"), o(function() {
                    return t.remove()
                }, 50)
            },
            isEmojiValid: function(e) {
                return !0
            },
            ads: Y,
            parseUserAgent: function(e) {
                e = e || navigator.userAgent;
                for (var t = {
                        browser: "Unknown",
                        os: "Unknown",
                        version: 0
                    }, a = ["Windows", "Macintosh", "Android", "Linux", "iPhone", "iPad"], i = ["Opera", "Chrome", "Firefox", "Mobile Safari", "Safari", "MSIE"], n = 0; n < a.length; n++) {
                    if (new RegExp("\\b" + a[n] + "\\b", "i").exec(e)) {
                        t.os = a[n];
                        break
                    }
                }
                for (var r = 0; r < i.length; r++) {
                    var s = new RegExp("\\b(" + i[r] + ")(?:/| )(\\d+)", "i").exec(e);
                    if (s) {
                        t.browser = i[r], "MSIE" == t.browser && (t.browser = "Internet Explorer");
                        var o = /\bVersion\/(\d+)\b/i.exec(e);
                        t.version = o ? parseInt(o[1]) : parseInt(s[2]);
                        break
                    }
                }
                return t
            },
            valentines: function(e) {
                try {
                    if (!($("#top-player").is(":visible") && $("#left-player").is(":visible") && $("#right-player").is(":visible"))) return;
                    if ("Bill" !== players.top.name || "Lisa" !== players.right.name) return;
                    $("html").hasClass("valentines") && ($(".bubble p span").css("font-size", "12px"), o(function() {
                        $("#top-player-bubble p span").text("Happy Valentine's day Lisa! ❤️️️️️️️❤️"), $("#top-player-bubble").fadeIn()
                    }, 1500), o(function() {
                        $("#right-player-bubble p span").text("😍️️").css("font-size", "40px"), $("#right-player-bubble").fadeIn()
                    }, 3500), o(function() {
                        $("#left-player-bubble p span").text("Enough already, let's play " + e + "!"), $("#left-player-bubble").fadeIn()
                    }, 5500), o(function() {
                        $(".bubble").hide(), $(".bubble p span").css("font-size", "")
                    }, 9e3))
                } catch (e) {
                    b("ValentinesError", e.toString(), 0, "", "", 1)
                }
            },
            getFaceUrl: function(e, t) {
                if (e.toString().match(/^\d\d?$/)) return t ? "/shared/images/svg/face-" + e + "-sad.svg" : "/shared/images/svg/face-" + e + ".svg";
                var a = "https://cardgames.io/lambda/faces/" + e;
                return t && (a += "/sad"), a
            },
            getHairClass: function(e) {
                return e.length <= 2 ? "hair-" + e : "hair-" + e.charAt(2)
            },
            siteSettings: v,
            settings: u,
            browser: D,
            preloadImage: function(e) {
                if (!k[e]) {
                    var t = new Image;
                    t.src = e, t.onload = function() {}, t.onerror = function() {}, k[e] = t
                }
            },
            trackEvent: b,
            forceTrackEvent: c,
            reloadPage: F,
            deleteCake: y,
            showConfetti: function() {
                v.confetti && Z("/shared/effects/" + siteVersion + "/confetti.min.js", function() {
                    var e = $("<div>", {
                            "class": "confetti-container"
                        }).appendTo("html"),
                        t = d() || navigator.userAgent.match(/iPhone/);
                    window.confettiEffect = new Confetti(e.get(0), t ? 250 : 800), confettiEffect.start(), $("body").addClass("confetti"), $(".confetti-container").on("click", W)
                })
            },
            removeConfetti: W,
            logError: N,
            mobileMenu: G,
            isMobileLookActive: d,
            GDPR_CONSENT_COOKIE: h,
            isDev: function() {
                return window.location.href.includes("dev.cardgames.io")
            }
        }
    }, {
        "./api": 1,
        "./gamecontrol": 7,
        "./helper-functions": 8
    }],
    20: [function(e, t, a) {
        "use strict";
        var i = e("../shared/helper-functions"),
            _ = i.ArrayUtils,
            R = i.captainsLog,
            D = "s",
            n = function() {
                function e(e) {
                    this.name = e, this.hand = []
                }
                var t = e.prototype;
                return t.toString = function() {
                    return this.name
                }, t.notifyPlay = function(e, t, a) {
                    if (0 < e.length && e[0].suit !== a.suit && (this.playerInfo[t.name][e[0].suit] = !1), _.remove(this.remaining[a.suit], a.rank), 0 === this.remaining[a.suit].length)
                        for (var i in this.playerInfo) this.playerInfo[i][a.suit] = !1
                }, t.removeLowerAdjacentCards = function(e) {
                    e.sort(function(e, t) {
                        var a, i = ((a = {}).h = 0, a.s = 1, a.d = 2, a.c = 3, a);
                        return e.suit != t.suit ? i[e.suit] - i[t.suit] : e.rank - t.rank
                    });
                    for (var t = [], a = 0; a < e.length; a++) {
                        var i = e[a],
                            n = e[a + 1];
                        n && i.suit === n.suit && i.rank === n.rank - 1 || t.push(i)
                    }
                    return e.toString() != t.toString() && R.debug("Was " + e + ", now is " + t), t
                }, t.play = function(e) {
                    e = this.removeLowerAdjacentCards(e), this.sortPlayable(e), 0 === this.game.pile.length && R.debug("-------------"), R.debug(this.name + ": " + e), 0 === this.game.pile.length ? this.playPos1(e) : 1 === this.game.pile.length ? this.playPos2(e) : 2 === this.game.pile.length ? this.playPos3(e) : 3 === this.game.pile.length && this.playPos4(e)
                }, t.haveMadeBid = function() {
                    return 0 !== this.bidValue && 0 !== this.partner.bidValue && this.bidValue + this.partner.bidValue <= this.tricks.length + this.partner.tricks.length
                }, t.opponentHasGoodNilBid = function() {
                    for (var e = 0; e < this.game.players.length; e++) {
                        var t = this.game.players[e];
                        if (t !== this && t !== this.partner && 0 === t.bidValue && 0 === t.tricks.length) return t
                    }
                    return null
                }, t.playPos1 = function(e) {
                    console.log("ai play pos 1");
                    var u = this,
                        t = this.game.players.indexOf(this),
                        h = this.game.players[(t + 1) % 4],
                        p = this.game.players[(t + 3) % 4],
                        m = this.partner,
                        f = 0 === this.bidValue && 0 === this.tricks.length,
                        g = 0 === this.partner.bidValue && 0 === this.partner.tricks.length && !f,
                        a = function() {
                            if (b) {
                                if (v >= y.length) return "break";
                                k = y[v++]
                            } else {
                                if ((v = y.next()).done) return "break";
                                k = v.value
                            }
                            var t = k;
                            t.goodness = t.rank;
                            var e = u.remaining[t.suit],
                                a = Array.isArray(e),
                                i = 0;
                            for (e = a ? e : e[Symbol.iterator]();;) {
                                var n;
                                if (a) {
                                    if (i >= e.length) break;
                                    n = e[i++]
                                } else {
                                    if ((i = e.next()).done) break;
                                    n = i.value
                                }
                                n > t.rank && t.goodness--
                            }
                            g && !1 === u.playerInfo[m.name][t.suit] && (t.goodness += 500);
                            var r = u.playerInfo[h.name],
                                s = u.playerInfo[p.name],
                                o = !1 === r[t.suit] && !1 === s[t.suit],
                                l = !1 === r.s && !1 === s.s;
                            if (!g && l && o ? t.goodness += 1e3 : f || !o || l || (t.goodness -= 10), t.isSpade && (t.goodness -= 1), 13 === t.rank) {
                                var d = !!u.hand.find(function(e) {
                                        return e.suit === t.suit && 14 === e.rank
                                    }),
                                    c = u.remaining[t.suit].includes(14);
                                g || d || !c || 0 === u.bidValue || u.opponentHasGoodNilBid() || (t.goodness = -10, R.debug("Not leading the king because reasons"))
                            }
                        },
                        y = e,
                        b = Array.isArray(y),
                        v = 0;
                    for (y = b ? y : y[Symbol.iterator]();;) {
                        var k;
                        if ("break" === a()) break
                    }
                    e.sort(function(e, t) {
                        return e.goodness - t.goodness
                    });
                    var i = e[e.length - 1],
                        n = e[0],
                        r = this.opponentHasGoodNilBid();
                    g ? (R.debug("Playing best card to try to help partner make nil bid"), this.playCard(i)) : r ? (this.playCard(n), R.debug(this.name + " leading worst card to try to ruin " + r.name + "'s nil bid")) : this.haveMadeBid() ? this.shouldGetBags() ? (R.debug(this.name + " has made bid, trying for bags in lead to set others."), this.playCard(i)) : (R.debug(this.name + " has made bid, trying to lose lead"), this.playCard(n)) : 0 === this.bidValue ? (R.debug(this.name + " has nil bid, trying to lose in lead"), this.playCard(n)) : this.playCard(i)
                }, t.playPos2 = function(e) {
                    var t = this.getImportantCards(e),
                        a = 0 === this.bidValue && 0 === this.tricks.length,
                        i = 0 === this.partner.bidValue && 0 === this.partner.tricks.length,
                        n = this.opponentHasGoodNilBid();
                    i && !a && t.bestThatCanWin ? t.worstThatCanWin && t.worstThatCanWin.isSpade && !this.game.pile[0].isSpade ? (R.debug(this.name + " playing worst card that can win, since it is a trump and our nil bidding partner will not take it"), this.playCard(t.worstThatCanWin)) : (R.debug(this.name + " playing best card to win, to help nil bid buddy"), this.playCard(t.bestThatCanWin)) : n && this.game.pile[0].playedBy === n && t.bestThatCanLose ? (R.debug(this.name + " trying to ruin nil bid from " + n.name), this.playCard(t.bestThatCanLose)) : this.haveMadeBid() ? this.shouldGetBags() ? (R.debug(this.name + " has made bid, trying for bags to set others. pos 2"), this.winPos2(t)) : (R.debug(this.name + " has made bid, trying to lose pos 2"), this.losePos2(t)) : 0 === this.bidValue ? (R.debug(this.name + " has nil bid, trying to lose pos 2"), this.losePos2(t)) : this.winPos2(t)
                }, t.winPos2 = function(e) {
                    if (e.worstThatCanWin)
                        if (e.worstThatCanWin.isSpade && !this.game.pile[0].isSpade) this.playCard(e.worstThatCanWin);
                        else {
                            var t = this.remaining[e.worstThatCanWin.suit][this.remaining[e.worstThatCanWin.suit].length - 1];
                            !t || t > e.bestThatCanWin.rank ? this.playCard(e.worstThatCanWin) : this.playCard(e.bestThatCanWin)
                        }
                    else this.playCard(e.worstThatCanLose)
                }, t.losePos2 = function(e) {
                    e.bestThatCanLose ? this.playCard(e.bestThatCanLose) : this.playCard(e.worstThatCanWin)
                }, t.shouldGetBags = function() {
                    return !1
                }, t.getImportantCards = function(e) {
                    var t = {
                        worstThatCanWin: null,
                        bestThatCanWin: null,
                        worstThatCanLose: null,
                        bestThatCanLose: null
                    };
                    this.sortPlayable(e);
                    var a = this.getBestCard();
                    this.canWinCard(e[0], a) || (t.worstThatCanLose = e[0]), this.canWinCard(e[e.length - 1], a) && (t.bestThatCanWin = e[e.length - 1]);
                    var i = e,
                        n = Array.isArray(i),
                        r = 0;
                    for (i = n ? i : i[Symbol.iterator]();;) {
                        var s;
                        if (n) {
                            if (r >= i.length) break;
                            s = i[r++]
                        } else {
                            if ((r = i.next()).done) break;
                            s = r.value
                        }
                        var o = s;
                        if (this.canWinCard(o, a)) {
                            t.worstThatCanWin = o;
                            break
                        }
                    }
                    for (var l = e.length - 1; 0 <= l; l--) {
                        var d = e[l];
                        if (!this.canWinCard(d, a)) {
                            t.bestThatCanLose = d;
                            break
                        }
                    }
                    return t
                }, t.sortPlayable = function(e) {
                    e.sort(function(e, t) {
                        return !e.isSpade && t.isSpade ? -1 : e.isSpade && !t.isSpade ? 1 : e.rank - t.rank
                    })
                }, t.playPos3 = function(e) {
                    var t = this.getImportantCards(e),
                        a = this.getBestCard(),
                        i = a == this.game.pile[0],
                        n = 0 === this.partner.bidValue && 0 === this.partner.tricks.length,
                        r = this.opponentHasGoodNilBid();
                    i && n ? this.winPos3(t, a, i) : this.haveMadeBid() ? this.shouldGetBags() ? (R.debug(this.name + " has made bid, trying for bags to set others. pos 4"), this.winPos3(t, a, i)) : (R.debug(this.name + " has made bid, trying to lose pos 3"), this.losePos3(t, a, i)) : 0 === this.bidValue ? (R.debug(this.name + " has nil bid, trying to lose pos 3"), this.losePos3(t, a, i)) : r && t.worstThatCanLose ? (R.debug(this.name + " trying to ruin nil bid from " + r.name), this.playCard(t.worstThatCanLose)) : this.winPos3(t, a, i)
                }, t.nextPlayer = function() {
                    for (var e = this.game.players, t = 0; t < e.length; t++)
                        if (e[t] === this) return e[t + 1] || e[0]
                }, t.winPos3 = function(t, e, a) {
                    var i = this;
                    if (a) {
                        var n = 0 === this.partner.bidValue && 0 === this.partner.tricks.length;
                        0 === this.partner.bidValue && this.partner.tricks.length;
                        if (n) t.worstThatCanWin ? this.playCard(t.worstThatCanWin) : this.playCard(t.worstThatCanLose);
                        else {
                            if (!t.worstThatCanWin) return void this.playCard(t.worstThatCanLose);
                            var r = this.nextPlayer(),
                                s = this.game.pile[0].suit,
                                o = !1 === this.playerInfo[r.name][s],
                                l = !1 === this.playerInfo[r.name].s;
                            if (o && l) return void this.playCard(t.worstThatCanLose || t.worstThatCanWin);
                            if (this.remaining[s].some(function(e) {
                                    return e > i.game.pile[0].rank
                                }) && !o) {
                                if (t.worstThatCanWin.isSpade && s !== D) this.playCard(t.worstThatCanWin);
                                else {
                                    var d = this.game.pile[0].rank;
                                    0 === this.remaining[s].filter(function(e) {
                                        return d < e && e < t.bestThatCanWin.rank
                                    }).length ? this.playCard(t.worstThatCanLose || t.worstThatCanWin) : this.playCard(t.bestThatCanWin)
                                }
                                return
                            }
                            this.playCard(t.worstThatCanLose || t.worstThatCanWin)
                        }
                    } else t.worstThatCanWin && t.worstThatCanWin.isSpade ? this.playCard(t.worstThatCanWin) : t.bestThatCanWin ? this.playCard(t.bestThatCanWin) : this.playCard(t.worstThatCanLose)
                }, t.losePos3 = function(e) {
                    e.bestThatCanLose ? this.playCard(e.bestThatCanLose) : this.playCard(e.worstThatCanWin)
                }, t.playPos4 = function(e) {
                    var t = this.getImportantCards(e),
                        a = this.getBestCard(),
                        i = a === this.game.pile[1],
                        n = 0 === this.partner.bidValue && 0 === this.partner.tricks.length,
                        r = 0 === this.bidValue && 0 === this.tricks.length,
                        s = this.opponentHasGoodNilBid();
                    s && s === a.playedBy && t.worstThatCanLose ? (R.debug(this.name + " trying to ruin nil bid from " + a.playedBy), this.playCard(t.worstThatCanLose)) : i && n && !r ? (R.debug(this.name + " trying to help partner keep good nil bid"), this.winPos4(t, a, i)) : this.haveMadeBid() ? this.shouldGetBags() ? (R.debug(this.name + " has made bid, trying for bags to set others. pos 4"), this.winPos4(t, a, i)) : (R.debug(this.name + " has made bid, trying to lose pos 4"), this.losePos4(t, a, i)) : 0 === this.bidValue ? (R.debug(this.name + " has nil bid, trying to lose pos 4"), this.losePos4(t, a, i)) : this.winPos4(t, a, i)
                }, t.winPos4 = function(e, t, a) {
                    if (a) {
                        var i = 0 === this.partner.bidValue && 0 === this.partner.tricks.length;
                        0 === this.partner.bidValue && this.partner.tricks.length;
                        i ? e.worstThatCanWin ? this.playCard(e.worstThatCanWin) : this.playCard(e.worstThatCanLose) : e.worstThatCanLose ? this.playCard(e.worstThatCanLose) : this.playCard(e.worstThatCanWin)
                    } else e.worstThatCanWin ? this.playCard(e.worstThatCanWin) : this.playCard(e.worstThatCanLose)
                }, t.losePos4 = function(e) {
                    e.bestThatCanLose ? this.playCard(e.bestThatCanLose) : this.playCard(e.bestThatCanWin)
                }, t.playCard = function(e) {
                    R.debug(this.name + " plays " + e), this.game.playCards(this, [e])
                }, t.canWinCard = function(e, t) {
                    return e.suit === t.suit && e.rank > t.rank || e.isSpade && !t.isSpade
                }, t.getBestCard = function() {
                    for (var e = this.game.pile[0], t = 1; t < this.game.pile.length; t++) {
                        var a = this.game.pile[t];
                        this.canWinCard(a, e) && (e = a)
                    }
                    return e
                }, t.beforeGameStart = function() {
                    this.remaining = {};
                    for (var e = 0, t = ["h", D, "d", "c"]; e < t.length; e++) {
                        var a = t[e];
                        this.remaining[a] = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]
                    }
                    var i = this.hand,
                        n = Array.isArray(i),
                        r = 0;
                    for (i = n ? i : i[Symbol.iterator]();;) {
                        var s;
                        if (n) {
                            if (r >= i.length) break;
                            s = i[r++]
                        } else {
                            if ((r = i.next()).done) break;
                            s = r.value
                        }
                        var o = s;
                        _.remove(this.remaining[o.suit], o.rank)
                    }
                    this.playerInfo = {};
                    var l = this.game.players,
                        d = Array.isArray(l),
                        c = 0;
                    for (l = d ? l : l[Symbol.iterator]();;) {
                        var u;
                        if (d) {
                            if (c >= l.length) break;
                            u = l[c++]
                        } else {
                            if ((c = l.next()).done) break;
                            u = c.value
                        }
                        var h = u;
                        this.playerInfo[h.name] = {
                            h: !0,
                            s: !0,
                            d: !0,
                            c: !0
                        }
                    }
                }, t.bid = function() {
                    var e;
                    if (13 !== this.partner.bidValue) {
                        var t = ((e = {}).s = {
                                count: 0
                            }, e.d = {
                                count: 0
                            }, e.c = {
                                count: 0
                            }, e.h = {
                                count: 0
                            }, e),
                            a = this.hand,
                            i = Array.isArray(a),
                            n = 0;
                            console.log(a);
                            console.log(JSON.stringify(t));
                        for (a = i ? a : a[Symbol.iterator]();;) {
                            var r;
                            if (i) {
                                if (n >= a.length) break;
                                r = a[n++]
                            } else {
                                if ((n = a.next()).done) break;
                                r = n.value
                            }
                            var s = r;
                            t[s.suit].count++, 14 === s.rank && (t[s.suit].hasAce = !0), 13 === s.rank && (t[s.suit].hasKing = !0), 12 === s.rank && (t[s.suit].hasQueen = !0)
                        }
                        // at this point we have a count of each suit and whether there is a A, K, or Q and for some reason if the suit is red or black
                        // t is the local version of a (do not modify a)
                        console.log(a);
                        console.log(t);
                        for (var o = this.hand.filter(function(e) {
                                return e.isSpade
                            }), l = 0, d = 0, c = function(t) {
                                return o.find(function(e) {
                                    return e.rank === t
                                })
                            }, u = 14; 0 <= u; u--) {
                            var h = c(u);
                            if (!h) break;
                            l++, _.remove(o, h)
                        }
                        // count the top contiguous spades and this is the for-sure value of tricks which will be won - stored in l 
                        R.debug("********** " + this.name + " BID ***************"), R.debug(this.name + ": Hard Bid is " + l);
                        var p = o.filter(function(e) {
                                return 10 <= e.rank
                            }),
                            m = p.length;
                        R.debug(this.name + ": High spade bid is " + p.length);
                        var f = p,
                            g = Array.isArray(f),
                            y = 0;
                        for (f = g ? f : f[Symbol.iterator]();;) {
                            var b;
                            if (g) {
                                if (y >= f.length) break;
                                b = f[y++]
                            } else {
                                if ((y = f.next()).done) break;
                                b = y.value
                            }
                            var v = b;
                            d++, _.remove(o, v)
                        }
                        var k = Math.ceil(o.length / 2.5);
                        for (var w in R.debug(this.name + ": Low spade bid is " + k), d += k, t)
                            if (w !== D) {
                                var C = t[w];
                                C.hasAce && C.hasKing ? (d += 2, R.debug(this.name + " Bid for King+Ace in " + w + ": 2")) : C.hasAce ? (d += 1, R.debug(this.name + " Bid for Ace in " + w + ": 1")) : C.hasKing && 2 <= o.length && (d += .5, R.debug(this.name + " Bid for King in " + w + ": 0.5"))
                            } var S = Math.min(1, d);
                        R.debug(this.name + " lowering soft bid by " + S);
                        var T = l + (d -= S);
                        if (R.debug(this.name + " Soft+Hard Bid: " + T), this.shouldBidNil(T, m, t)) this.game.bid(this, 0);
                        else {
                            T = Math.ceil(T), T = Math.min(T, 7), T = Math.max(T, 1);
                            if (7 <= this.partner.bidValue) R.debug(this.name + " changing bid from " + T + " to hard bid " + l + " because our partner has 6 or more"), T = l;
                            else if (11 < T + this.partner.bidValue) {
                                var $ = T;
                                T = Math.max(11 - this.partner.bidValue, l), R.debug(this.name + " changed bid from " + $ + " to " + T + " because the combined bid was higher than 11")
                            }
                            var E = this.bags,
                                A = this.scoreLastRound,
                                I = this.game.winScore - A,
                                P = T;
                            if (0 < this.partner.bidValue) {
                                this.partner.bidValue;
                                T = this.reduceBidForEndGame(I, T, T + this.partner.bidValue, E)
                            } else T = this.reduceBidForEndGame(I, T, T, E);
                            if (T < P && R.debug(this.name + " reduced bid from " + P + " to " + T + " because of endgame strategy"), T < l && (R.debug(this.name + " changing bid again from " + T + " to hardBid: " + l), T = l), 0 < this.partner.bidValue && 13 < this.partner.bidValue + T) {
                                var x = this.name + " has to lower bid because partner bid is too high";
                                R.debug(x), T = 13 - this.partner.bidValue
                            }
                            T = Math.max(T, 1), this.game.bid(this, T)
                        }
                    } else this.game.bid(this, 0)
                }, t.shouldBidNil = function(e, t, a) {
                    if (3 < e || 0 === this.partner.bidValue || 0 < t) return !1;
                    for (var i in a)
                        if (a[i].hasAce || a[i].hasKing) return !1;
                    return !(this.partner.bidValue && this.partner.bidValue < 4) && !(3 < a.s.count)
                }, t.reduceBidForEndGame = function(e, t, a, i) {
                    var n = a * this.game.pointsPerBidTrick;
                    if (e < n) {
                        var r = n - e,
                            s = Math.floor(r / 10);
                        if (10 <= i + s) return t;
                        if (5 <= s) return R.debug(this.name + ": Extra tricks is " + s + ", reducing bid by 2 to make it to " + this.game.winScore), t - 2;
                        if (1 <= s) return R.debug(this.name + ": Extra tricks is " + s + ", reducing bid by 1 to make it to " + this.game.winScore), t - 1
                    }
                    return t
                }, e
            }();
        t.exports = n
    }, {
        "../shared/helper-functions": 8
    }],
    21: [function(e, t, a) {
        "use strict";
        var i = e("../shared/cardgames/cardgame"),
            n = function(s) {
                function e() {
                    var e;
                    return (e = s.call(this) || this).cardCount = 13, e.sortType = "suit", e.canSelectCards = !1, e.defaultPlayerCount = 4, e.spadesIsBroken = !1, e.showDealerHat = !0, e.winScore = 500, e.nilBidBonus = 100, e.pointsPerBidTrick = 10, e.pointsPerBag = 1, e.tenBagsPenalty = 100, e.previousGameScores = null, e.renderers.spadesbroken = e.makeRenderFunc("spadesbroken - @player.name breaks spades"), e.renderers.taketrick = e.makeRenderFunc("taketrick - @player.name takes the trick"), e.renderers.bid = e.makeRenderFunc("bid - @player.name bids @bid"), e.renderers.startbid = e.makeRenderFunc("startbid - @player.name"), e
                }! function(e, t) {
                    e.prototype = Object.create(t.prototype), (e.prototype.constructor = e).__proto__ = t
                }(e, s);
                var t = e.prototype;
                return t.toString = function() {
                    return "Spades"
                }, t.canPlayCard = function(e, t) {
                    if (0 === this.pile.length) return !t.isSpade || (this.spadesIsBroken || e.hand.every(function(e) {
                        return e.isSpade
                    }));
                    var a = this.pile[0].suit;
                    return t.suit === a || !e.hand.some(function(e) {
                        return e.suit === a
                    })
                }, t.beforeNewRound = function() {
                    this.spadesIsBroken = !1
                }, t.canSelectCard = function(e, t) {
                    return this.canPlayCard(e, t)
                }, t.afterDealing = function() {
                    var e = this.players,
                        t = Array.isArray(e),
                        a = 0;
                    for (e = t ? e : e[Symbol.iterator]();;) {
                        var i;
                        if (t) {
                            if (a >= e.length) break;
                            i = e[a++]
                        } else {
                            if ((a = e.next()).done) break;
                            i = a.value
                        }
                        var n = i;
                        if ("bottom-player" === n.id && !this.handSorted) return this.handSorted = !0, this.sortHand(n, this.afterDealing);
                        n.tricks = [], n.bidValue = -1
                    }
                    for (var r = 0; r < this.players.length; r++) this.players[r].partner = this.players[(r + 2) % this.players.length];
                    var s = this.players,
                        o = Array.isArray(s),
                        l = 0;
                    for (s = o ? s : s[Symbol.iterator]();;) {
                        var d;
                        if (o) {
                            if (l >= s.length) break;
                            d = s[l++]
                        } else {
                            if ((l = s.next()).done) break;
                            d = l.value
                        }
                        var c = d;
                        c.beforeGameStart && c.beforeGameStart()
                    }
                    this.currentPlayerIndex = this.pickFirstPlayerIndex(), this.bidPlayerIndex = this.currentPlayerIndex;
                    var u = this.players[this.bidPlayerIndex];
                    this.renderEvent("startbid", function() {
                        return u.bid(13)
                    }, {
                        player: u,
                        maxBid: 13
                    })
                }, t.bid = function(e, t) {
                    e.bidValue = t, this.renderEvent("bid", this.afterRenderBid, {
                        player: e,
                        bid: t
                    })
                }, t.afterRenderBid = function() {
                    if (this.players.every(function(e) {
                            return 0 <= e.bidValue
                        })) this.renderEvent("start", this.currentPlayerTurn);
                    else {
                        this.bidPlayerIndex = (this.bidPlayerIndex + 1) % this.players.length;
                        var e = this.players[this.bidPlayerIndex],
                            t = 13 - (-1 !== e.partner.bidValue ? e.partner.bidValue : 0);
                        this.renderEvent("startbid", function() {
                            return e.bid(t)
                        }, {
                            player: e,
                            maxBid: t
                        })
                    }
                }, t.playCards = function(e, t) {
                    t[0].isSpade && !this.spadesIsBroken && (this.spadesIsBroken = !0, this.renderEvent("spadesbroken", function() {})), t[0].playedBy = e;
                    var a = this.players,
                        i = Array.isArray(a),
                        n = 0;
                    for (a = i ? a : a[Symbol.iterator]();;) {
                        var r;
                        if (i) {
                            if (n >= a.length) break;
                            r = a[n++]
                        } else {
                            if ((n = a.next()).done) break;
                            r = n.value
                        }
                        r.notifyPlay(this.pile, e, t[0])
                    }
                    s.prototype.playCards.call(this, e, t)
                }, t.calculateScore = function() {
                    function e(e, t) {
                        var a = {
                            bid: e.bidValue + t.bidValue,
                            tricks: 0,
                            bagsPrevRound: e.bags || 0,
                            bags: 0,
                            totalBags: 0,
                            bagsNextRound: 0,
                            nilBidScore: 0,
                            nilBidPenalty: 0,
                            bagsScore: 0,
                            bagsPenalty: 0,
                            tricksScore: 0,
                            tricksPenalty: 0,
                            score: 0,
                            scoreLastRound: e.scoreLastRound || 0,
                            scoreTotal: 0,
                            boston: !1
                        };
                        13 === e.tricks.length || 13 === t.tricks.length ? a.boston = !0 : 0 < e.bidValue && 0 < t.bidValue && e.tricks.length + t.tricks.length === 13 && (a.boston = !0);
                        for (var i = 0, n = [e, t]; i < n.length; i++) {
                            var r = n[i];
                            0 === r.bidValue && 0 === r.tricks.length ? a.nilBidScore += 100 : 0 === r.bidValue && 0 < r.tricks.length ? (a.nilBidPenalty -= 100, a.bags += r.tricks.length) : a.tricks += r.tricks.length
                        }
                        return a.bags += Math.max(0, a.tricks - a.bid), a.tricks >= a.bid ? a.tricksScore += 10 * a.bid : a.tricksPenalty -= 10 * a.bid, a.totalBags = a.bags + a.bagsPrevRound, a.bagsNextRound = a.totalBags, a.bagsScore = a.bags, 10 <= a.bagsNextRound && (a.bagsPenalty -= 100, a.bagsNextRound -= 10), a.score = a.tricksScore + a.tricksPenalty + a.bagsScore + a.bagsPenalty + a.nilBidScore + a.nilBidPenalty, a.scoreTotal = a.score + a.scoreLastRound, a
                    }
                    var t = e(this.players[0], this.players[2]),
                        a = e(this.players[1], this.players[3]),
                        i = [this.players[0], this.players[2]],
                        n = [this.players[1], this.players[3]];
                    if (t.scoreTotal < this.winScore && a.scoreTotal < this.winScore || t.scoreTotal >= this.winScore && t.scoreTotal == a.scoreTotal) this.renderEvent("win", function() {}, {
                        team1: t,
                        team2: a,
                        winner: t.score > a.score ? i : n,
                        gameFinished: !1
                    });
                    else if (t.scoreTotal >= this.winScore && t.scoreTotal > a.scoreTotal) this.renderEvent("win", function() {}, {
                        team1: t,
                        team2: a,
                        winner: i,
                        gameFinished: !0
                    });
                    else {
                        if (!(a.scoreTotal >= this.winScore)) throw new Error("What just happened...?");
                        this.renderEvent("win", function() {}, {
                            team1: t,
                            team2: a,
                            winner: n,
                            gameFinished: !0
                        })
                    }
                }, t.afterPlayCards = function() {
                    if (this.pile.length < this.players.length) this.nextPlayerTurn();
                    else {
                        for (var e = 0, t = this.pile[0], a = (this.currentPlayerIndex + 1) % this.players.length, i = 1; i < this.pile.length; i++) {
                            var n = this.pile[i];
                            !t.isSpade && n.isSpade ? (t = n, e = i) : n.suit == t.suit && n.rank > t.rank && (t = n, e = i)
                        }
                        var r = (a + e) % this.players.length;
                        this.fakeBoston && (r = .5 < Math.random() ? 0 : 2);
                        var s = 0 === this.players[0].hand.length;
                        this.currentPlayerIndex = r, this.currentPlayer().tricks.push(this.pile.slice(0));
                        var o = this.pile;
                        this.pile = [];
                        var l = s ? this.calculateScore : this.currentPlayerTurn;
                        this.renderEvent("taketrick", l, {
                            trick: o
                        })
                    }
                }, e
            }(i);
        t.exports = n
    }, {
        "../shared/cardgames/cardgame": 3
    }],
    22: [function(e, t, a) {
        "use strict";
        var i = e("../shared/multiplayer/multiplayer-util").AutoPlayTimer,
            n = e("../shared/helper-functions").captainsLog,
            r = e("../shared/util"),
            s = function() {
                function e(e) {
                    var t = this;
                    this.name = e, this.hand = [], this.timer = new i(function(e) {
                        return t.game.message(e)
                    }), this.randomMovesCount = 0
                }
                var t = e.prototype;
                return t.getWaitTimeSeconds = function() {
                    return this.game.isPrivateGame ? 120 : 25
                }, t.bid = function(e) {
                    var t = this;
                    if (this.isBidding = !0, this.maxBid = e, this.multiplayer) {
                        this.timer.start(this.getWaitTimeSeconds(), function() {
                            var e = Math.floor(4 * Math.random()) + 1;
                            $("#bid-div").hide(), t.doBid(e)
                        }, "Can't leave the other players waiting too long! We will make a random bid in $REMAINING$ seconds...")
                    }
                    try {
                        localStorage.autohuman && ($("#bid-div").hide(), this.doBid(3))
                    } catch (e) {
                        n.error("autohuman failed; " + e)
                    }
                }, t.doBid = function(e) {
                    var t = this;
                    if (this.timer.stop(), this.isBidding = !1, e > this.maxBid || e < 0) {
                        var a = e;
                        $.getJSON("/lambda/country").done(function(e) {
                            return r.forceTrackEvent("HackerMoron", "Tried to bid " + a + ", maxBid was: " + t.maxBid + ", partner bid: " + t.partner.bidValue + ". User Agent: " + navigator.userAgent + ". Country: " + e.country)
                        }), $("html").css("filter", "grayscale(1)"), $("body").css("transform", "rotate(5deg)"), e = this.maxBid
                    }
                    this.game.bid(this, e)
                }, t.notifyPlay = function() {}, t.useCard = function(e) {
                    if (e.random ? this.randomMovesCount++ : this.randomMovesCount = 0, this.isBidding) return this.game.message("It's your turn to bid now. You can't play any card while you're bidding!");
                    this.game.message(""), this.hand.includes(e) ? this.canPlay ? this.playable.includes(e) ? (this.timer.stop(), this.game.playCards(this, [e])) : this.cannotPlayCardMessage(e) : this.game.message("It's not your turn to play!") : this.game.useIllegalCard(this, e)
                }, t.play = function(t) {
                    var a = this;
                    if (this.multiplayer) {
                        var e = this.getWaitTimeSeconds();
                        2 < this.randomMovesCount && (e = 10), this.timer.start(e, function() {
                            var e = t[0];
                            e.random = !0, a.useCard(e)
                        })
                    }
                    this.playable = t;
                    try {
                        localStorage.autohuman && this.useCard(t[0])
                    } catch (e) {
                        n.error("autohuman failed; " + e)
                    }
                }, t.cannotPlayCardMessage = function(e) {
                    if (0 !== this.game.pile.length) {
                        var t = this.game.pile[0];
                        if (this.hand.some(function(e) {
                                return e.suit === t.suit
                            })) return this.game.message("The suit of the current trick is " + t.suitName + "s. You have a " + t.suitName + " so you must play it!");
                        throw "Unexpected state: Can't play card even though we don't have the trick card suit"
                    }
                    if (!e.isSpade || this.game.spadesIsBroken) throw "Unexpected state: Can't lead with a card even though it's not spades or spades has been broken!";
                    this.game.message("You cannot lead with a spade until spades have been broken (a spade played on another suit).")
                }, e
            }();
        t.exports = s
    }, {
        "../shared/helper-functions": 8,
        "../shared/multiplayer/multiplayer-util": 12,
        "../shared/util": 19
    }],
    23: [function(e, t, a) {
        "use strict";
        var r = e("../shared/helper-functions").captainsLog,
            i = e("./spades-computer-player"),
            s = window.setTimeout,
            n = function(n) {
                function e(e) {
                    var t;
                    return (t = n.call(this, e) || this).multiplayerMoves = [], t
                }! function(e, t) {
                    e.prototype = Object.create(t.prototype), (e.prototype.constructor = e).__proto__ = t
                }(e, n);
                var t = e.prototype;
                return t.play = function(e) {
                    var t = this;
                    if (this.shouldMakeSubstituteMove()) n.prototype.play.call(this, e);
                    else {
                        this.waitStart || (this.waitStart = (new Date).getTime());
                        var a = this.multiplayerMoves.shift();
                        if (a)
                            if (r.debug(this.name + ": Got move: " + JSON.stringify(a)), delete this.waitStart, "play" === a.type) {
                                var i = this.hand.find(function(e) {
                                    return e.shortName === a.cards[0]
                                });
                                i ? (i.random = a.random, this.game.playCards(this, [i])) : r.error("Player " + this.id + " did not find card " + a.cards + ", hand was: " + this.hand)
                            } else r.error(this.id + " got unexpected move while waiting for move of type 'play'. Got move: " + JSON.stringify(a));
                        else s(function() {
                            return t.play(e)
                        }, 500)
                    }
                }, t.bid = function() {
                    var e = this;
                    if (this.shouldMakeSubstituteMove()) n.prototype.bid.call(this);
                    else {
                        this.waitStart || (this.waitStart = (new Date).getTime());
                        var t = this.multiplayerMoves.shift();
                        t ? (r.debug(this.name + ": Got move: " + JSON.stringify(t)), delete this.waitStart, "bid" === t.type ? this.game.bid(this, t.bid) : r.error(this.id + " got unexpected move while waiting for move of type 'bid'. Got move: " + JSON.stringify(t))) : s(function() {
                            return e.bid()
                        }, 500)
                    }
                }, e
            }(i);
        t.exports = n
    }, {
        "../shared/helper-functions": 8,
        "./spades-computer-player": 20
    }],
    24: [function(e, t, a) {
        "use strict";
        var i = e("../shared/cardgames/render"),
            n = i.timing,
            r = i.Renderer,
            s = e("../shared/helper-functions")._setTimeout,
            o = function(t) {
                function e() {
                    var e;
                    return (e = t.call(this) || this).playType = "trick", e
                }! function(e, t) {
                    e.prototype = Object.create(t.prototype), (e.prototype.constructor = e).__proto__ = t
                }(e, t);
                var a = e.prototype;
                return a.dealCard = function(e) {
                    n.ANIMATION_SPEED = 100, t.prototype.dealCard.call(this, e), n.ANIMATION_SPEED = 500
                }, a.bid = function(e) {
                    var t = "#" + e.player.id + "-bubble";
                    $(t + " p span").text("I bid " + e.bid), $(t).fadeIn();
                    var a = this.getTrickProps(e.player, -1),
                        i = this.getTrickCountProps(e.player, a);
                    $("#" + e.player.id + "-trick-count").css(i).text("0/" + e.bid).show(), s(e.callback, 1e3)
                }, a.startNextRound = function(e) {
                    $("#winner1, #winner2").removeClass(), this.clearTable(e)
                }, a.win = function(e) {
                    $("#messageBox").hide();
                    var t = [e.team1, e.team2],
                        a = e.game.players[0];
                    0 === a.bidValue && 0 < a.tricks.length ? $("#result-header").text("Sorry, you failed your nil bid!") : e.team1.boston ? $("#result-header").text("Congratulations! You got a Boston!!!") : 0 === a.bidValue && 0 === a.tricks.length ? $("#result-header").text("Congratulations! You made your nil bid") : e.team1.tricksScore ? $("#result-header").text("Congratulations! You made your bid!") : e.team1.tricksPenalty && $("#result-header").text("Sorry, you failed your bid!");
                    for (var i = 0, n = [0, 1]; i < n.length; i++) {
                        var r = n[i],
                            s = t[r],
                            o = 0 === r ? ".t1" : ".t2";
                        $("#combined-bid " + o).text(s.bid), $("#tricks-taken " + o).text(s.tricks), $("#bags " + o).text(s.bags), $("#bags-last-round " + o).text(s.bagsPrevRound), $("#bags-total " + o).text(s.totalBags), $("#successful-bid " + o).text(s.tricksScore), $("#failed-bid " + o).text(s.tricksPenalty), $("#successful-nil-bid " + o).text(s.nilBidScore), $("#failed-nil-bid " + o).text(s.nilBidPenalty), $("#bag-score " + o).text(s.bagsScore), $("#bag-penalty " + o).text(s.bagsPenalty), $("#points-this-round " + o).text(s.score), $("#points-last-round " + o).text(s.scoreLastRound), $("#points-total " + o).text(s.scoreTotal)
                    }
                    var l = e.team1,
                        d = e.team2;
                    if (0 === l.tricksScore && 0 === d.tricksScore && $("#successful-bid").hide(), 0 === l.tricksPenalty && 0 === d.tricksPenalty && $("#failed-bid").hide(), 0 === l.nilBidScore && 0 === d.nilBidScore && $("#successful-nil-bid").hide(), 0 === l.nilBidPenalty && 0 === d.nilBidPenalty && $("#failed-nil-bid").hide(), 0 === l.bagsScore && 0 === d.bagsScore && $("#bag-score").hide(), 0 === l.bagsPenalty && 0 === d.bagsPenalty && $("#bag-penalty").hide(), e.gameFinished) {
                        e.game.players;
                        $("#start-new-game").hide(), $("#start-new-tournament").show(), $("#winner-pics").show(), $("#winner1").get(0).className = $("#" + e.winner[0].id + " .face-small").get(0).className, $("#winner2").get(0).className = $("#" + e.winner[1].id + " .face-small").get(0).className, $("#result-header").text(e.winner[0].name + " and " + e.winner[1].name + " win the game!")
                    }
                    this.showResults(), e.callback()
                }, a.spadesBroken = function(e) {
                    e.game.message("SPADES ARE BROKEN!!! SPADES ARE BROKEN!!!"), $("#bigspade").show().delay(300).fadeOut("slow"), e.callback()
                }, e
            }(r);
        t.exports = o
    }, {
        "../shared/cardgames/render": 4,
        "../shared/helper-functions": 8
    }],
    25: [function(e, t, a) {
        "use strict";
        var d = e("../shared/util"),
            c = e("../shared/game").makePlayersSad,
            u = e("../shared/game"),
            i = e("../shared/cardgames/render"),
            n = i.dimensions,
            o = i.zIndex,
            h = e("../shared/statistics"),
            r = e("../shared/cardgames/webcardgame"),
            s = e("./spades-game"),
            l = e("./spades-human-player"),
            p = e("./spades-computer-player"),
            m = e("./spades-remote-player"),
            f = e("./spades-render"),
            g = e("../shared/gamecontrol"),
            y = (e("../shared/helper-functions").captainsLog, n);
        new(function(a) {
            function e(e) {
                var t;
                return (t = a.call(this, e) || this).roundNr = 1, t.tempStorage.get("autodeal") || d.qs.gid || (setTimeout(function() {
                    var e = $("html").hasClass("starwars") ? "padawan" : "partner";
                    $("#top-player-bubble p span").html('<span style="font-size:12px;margin-top:6px">Hi there ' + e + "!</span>"), $("#top-player-bubble").fadeIn()
                }, 1e3), setTimeout(function() {
                    1 === $("#top-player-bubble p span span").length && $("#top-player-bubble").fadeOut()
                }, 4e3)), t
            }! function(e, t) {
                e.prototype = Object.create(t.prototype), (e.prototype.constructor = e).__proto__ = t
            }(e, a);
            var t = e.prototype;
            return t.setScore = function(e, t, a, i) {
                $("#human-team-score").text(e), $("#human-team-bags").text(t), $("#computer-team-score").text(a), $("#computer-team-bags").text(i)
            }, t.setupStartHandler = function() {
                var t = this;
                this.game.setEventRenderer("start", function(e) {
                    t.bindCardEventHandlers(), $(".bubble").fadeOut(), t.multiplayerTable && t.client.speechHandler.enable(), e.callback()
                })
            }, t.statsRegister = function(e, t, a, i) {
                t.win = t.score > a.score, a.win = !t.win, t.tournamentWin = t.scoreTotal > a.scoreTotal, a.tournamentWin = !t.tournamentWin, e[0].result = t, e[1].result = a, e[2].result = t, e[3].result = a;
                var n = e,
                    r = Array.isArray(n),
                    s = 0;
                for (n = r ? n : n[Symbol.iterator]();;) {
                    var o;
                    if (r) {
                        if (s >= n.length) break;
                        o = n[s++]
                    } else {
                        if ((s = n.next()).done) break;
                        o = s.value
                    }
                    var l = o;
                    l.stats = {}, l.stats.result = l.result.win ? "win" : "lose", i && (l.stats.tournamentResult = l.result.tournamentWin ? "win" : "lose", l.stats.tournamentScore = l.result.scoreTotal), l.stats.score = l.result.score, l.stats.totalBagCount = l.result.bags, l.stats.trickCount = l.tricks.length, l.stats.teamTrickCount = l.result.tricks, l.stats.teamTotalBidValue = l.result.bid, l.stats.totalBidValue = l.bidValue, l.stats.nilBidCount = 0 === l.bidValue ? 1 : 0, l.stats.bostonCount = l.result.boston ? 1 : 0, 0 === l.bidValue ? 0 === l.tricks.length ? (l.stats.successNilBidCount = 1, l.stats.failedNilBidCount = 0) : (l.stats.successNilBidCount = 0, l.stats.failedNilBidCount = 1) : l.result.tricks >= l.result.bid ? (l.stats.successBidCount = 1, l.stats.failedBidCount = 0) : (l.stats.successBidCount = 0, l.stats.failedBidCount = 1)
                }
            }, t.setupScoresFromLastRound = function() {
                0 === this.scores.length && (this.scores = [0, 0, 0, 0, 1]);
                var e = this.game.players,
                    t = e[0],
                    a = e[1],
                    i = e[2],
                    n = e[3];
                t.scoreLastRound = i.scoreLastRound = this.scores[0], t.bags = i.bags = this.scores[1], a.scoreLastRound = n.scoreLastRound = this.scores[2], a.bags = n.bags = this.scores[3]
            }, t.setupDealHandler = function() {
                var t = this;
                $("#deal").on("click touchstart", function(e) {
                    e.preventDefault(), g.startGame(), $("#multiplayer-button").fadeOut(), 0 === t.game.players.length && (t.preloadImages(), t.addPlayers()), h.startGame(t.game.players), t.game.message(""), t.setupScoresFromLastRound(), t.game.deal(), $("#deal").hide(), $("#open-player-picker").hide(), d.trackEvent("StartGame")
                })
            }, t.beforeMultiplayerDeal = function() {
                this.client.speechHandler.disable()
            }, t.setupMultiplayerGame = function() {
                a.prototype.setupMultiplayerGame.call(this), this.setupScoresFromLastRound()
            }, t.setupMultiplayerEvents = function() {
                a.prototype.setupMultiplayerEvents.call(this), this.handleMultiplayerEvent("bid", function(e) {
                    return {
                        type: e.name,
                        bid: e.bid
                    }
                })
            }, t.resetScores = function() {
                this.scores = [0, 0, 0, 0, 0]
            }, t.extraSetup = function() {
                var l = this;
                d.qs.fakeBoston && (this.game.fakeBoston = !0), this.game.setEventRenderer("startagain", function(e) {
                    return l.renderer.startNextRound(e)
                }), this.game.setEventRenderer("taketrick", function(e) {
                    return l.renderer.takeTrick(e)
                }), this.game.setEventRenderer("bid", function(e) {
                    return l.renderer.bid(e)
                }), this.game.setEventRenderer("win", function(e) {
                    var t = l.game.players.filter(function(e) {
                            return 0 === e.bidValue
                        }),
                        a = Array.isArray(t),
                        i = 0;
                    for (t = a ? t : t[Symbol.iterator]();;) {
                        var n;
                        if (a) {
                            if (i >= t.length) break;
                            n = t[i++]
                        } else {
                            if ((i = t.next()).done) break;
                            n = i.value
                        }
                        var r = n;
                        d.trackEvent("NilBidResult", r.id, 0 === r.tricks.length ? 1 : 0)
                    }
                    if (l.scores = [e.team1.scoreTotal, e.team1.bagsNextRound, e.team2.scoreTotal, e.team2.bagsNextRound, l.roundNr], l.tempStorage.set("scores", l.scores), $(".results h5").text("Round " + l.roundNr).show(), l.roundNr++, l.saveLastDealer(), l.setScore.apply(l, l.scores), l.multiplayerTable || (d.trackEvent("Score", "Human Team", e.team1.score), d.trackEvent("Score", "Computer Team", e.team2.score), e.team1.score > e.team2.score ? d.trackEvent("Win", "Human Team") : d.trackEvent("Win", "Computer Team")), d.trackEvent("FinishGame"), g.finishGame(), e.team1.boston ? (d.showConfetti(), d.trackEvent("Boston", "Human Team")) : e.team2.boston && d.trackEvent("Boston", "Computer Team"), l.statsRegister(e.game.players, e.team1, e.team2, e.gameFinished), h.finishGame(e.game.players), e.gameFinished) {
                        var s = e.winner.some(function(e) {
                            return "bottom-player" === e.id
                        }) ? "Human Team" : "Computer Team";
                        l.multiplayerTable || d.trackEvent("WinTournament", s), u.makePlayersSad(e.winner.map(function(e) {
                            return e.id
                        })), l.resetScores(), l.roundNr = 1, l.tempStorage.remove("scores"), $("#inline-score").hide()
                    } else e.team1.score < 0 && e.team2.score < 0 ? c([]) : e.team1.score < 0 ? c(["left-player", "right-player"]) : e.team2.score < 0 && c(["top-player", "bottom-player"]);
                    if (l.multiplayerTable) {
                        var o = {
                            finished: e.gameFinished,
                            winners: e.winner.map(function(e) {
                                return e.multiplayerId
                            })
                        };
                        l.client.sendResult(o)
                    }
                    l.renderer.win(e)
                }), this.game.setEventRenderer("spadesbroken", function(e) {
                    return l.renderer.spadesBroken(e)
                }), this.game.setEventRenderer("startbid", function(e) {
                    if ("bottom-player" !== e.player.id || d.qs.autoplay) return e.callback();
                    if (d.isMobileLookActive()) {
                        var t = y.TABLE_SIZE.height - $("#top-player").height() - y.CARD_SIZE.height - 5;
                        e.player.top !== t && l.renderer.resize(), $("#bid-div").css("bottom", $("#bottom-player").height() + y.MAX_CARD_SIZE.height + 7)
                    } else $("#bid-div").css("bottom", "290px");
                    $("#bid-div").css("z-index", o.value + 1e4).show();
                    l.game.message("Choose how many tricks you think you will be able to take.");

                    function a() {
                        r.message("Bid " + $(this).text())
                    }

                    function i() {
                        r.message("")
                    }

                    function n() {
                        e.player.doBid(parseInt($(this).text())), $("#bid-div").hide(), r.message("")
                    }
                    var r = l.game;
                    $("#bid-div-inner span").remove();
                    for (var s = 0; s <= e.maxBid; s++) $("<span/>").text(s).appendTo("#bid-div-inner").click(n).mouseover(a).mouseout(i);
                    e.callback()
                }), $("#start-new-tournament").click(function() {
                    l.tempStorage.remove("scores"), l.resetScores(), l.roundNr = 1, l.setScore.apply(l, l.scores), $("#inline-score").show(), d.trackEvent("NewTournament"), d.ads.trigger(function() {
                        d.qs.gid ? location.href = location.pathname : d.isMobileLookActive() ? l.game.startAgain() : d.reloadPage()
                    })
                }), this.scores = this.tempStorage.get("scores", [0, 0, 0, 0, 0]), this.setScore.apply(this, this.scores), $("#inline-score").show();
                this.multiplayerTable ? this.roundNr = this.multiplayerTable.round : this.roundNr = this.scores[4] + 1, 1 === this.roundNr && d.valentines("Spades"), this.loadLastDealer()
            }, t.restartWithoutReload = function() {
                this.resetScores(), $("#bid-div, .bubble").hide(), this.roundNr = 1, this.setScore.apply(this, this.scores), this.tempStorage.remove("scores"), this.game.startAgain()
            }, e
        }(r))(new s).init(d.qs.autoplay ? p : l, p, new f, m)
    }, {
        "../shared/cardgames/render": 4,
        "../shared/cardgames/webcardgame": 5,
        "../shared/game": 6,
        "../shared/gamecontrol": 7,
        "../shared/helper-functions": 8,
        "../shared/statistics": 17,
        "../shared/util": 19,
        "./spades-computer-player": 20,
        "./spades-game": 21,
        "./spades-human-player": 22,
        "./spades-remote-player": 23,
        "./spades-render": 24
    }]
}, {}, [25]);
